datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "go run github.com/steebchen/prisma-client-go"
}

// role user
enum Role {
  SUPER_ADMIN
  ADMIN
  ASISTEN
  PRAKTIKAN
}

// user
model User {
  id        String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  nrp       String    @unique
  name      String
  about     String
  email     String
  phone     String
  password  String
  role      Role
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  // Relasi untuk anggota kelompok
  memberGroups Group[] @relation("MemberGroups")

  // Relasi untuk asisten yang memberi nilai
  gradedGrades Grade[] @relation("GradedBy")

  // Relasi untuk praktikan yang menerima nilai
  userGrades Grade[] @relation("UserGrades")

  // Relasi ke jadwal asisten
  assistantSchedules Schedule[] @relation("AssistantSchedules")

  // Relasi ke pengumuman yang dibuat
  announcements Announcement[]
}

// kelompok
model Group {
  id   String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  name Int    @db.SmallInt @unique

  // Anggota kelompok (praktikan)
  members User[] @relation("MemberGroups")

  // Relasi ke Schedule (jadwal praktikum)
  schedules Schedule[] @relation("GroupSchedules")
}

// praktikum
model Practicum {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi ke Schedule
  schedules Schedule[]

  @@map("practicums")
}

// jadwal
model Schedule {
  id          Int       @id @default(autoincrement())
  practicumId Int
  groupId     String
  assistantId String
  date        DateTime?
  startTime   DateTime?
  status      Status    @default(UNSCHEDULED)

  practicum Practicum @relation(fields: [practicumId], references: [id])
  group     Group     @relation("GroupSchedules", fields: [groupId], references: [id])
  assistant User      @relation("AssistantSchedules", fields: [assistantId], references: [id])

  grades Grade[]

  @@unique([groupId, startTime])
  @@unique([practicumId, groupId])
  @@unique([practicumId, assistantId])
}

// penilaian
model Grade {
  id           Int      @id @default(autoincrement())
  scheduleId   Int
  userId       String
  prelab       Int?     @db.SmallInt
  inlab        Int?     @db.SmallInt
  abstract     Int?     @db.SmallInt
  introduction Int?     @db.SmallInt
  methodology  Int?     @db.SmallInt
  discussion   Int?     @db.SmallInt
  conclusion   Int?     @db.SmallInt
  formatting   Int?     @db.SmallInt
  feedback     String?
  gradedBy     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  user     User     @relation("UserGrades", fields: [userId], references: [id])
  grader   User     @relation("GradedBy", fields: [gradedBy], references: [id])
}

// status praktikum yang diambil
enum Status {
  UNSCHEDULED
  SCHEDULED
  COMPLETED
  CANCELLED
}

// pengumuman
model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  author User @relation(fields: [authorId], references: [id])
}
