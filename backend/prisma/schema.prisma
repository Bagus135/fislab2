datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

// role user
enum Role {
  SUPER_ADMIN
  ADMIN
  ASISTEN
  PRAKTIKAN
}

// User
model User {
  id        String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  nrp       String
  name      String
  password  String
  role      Role
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  asistantGroups    Group[]    @relation("AsistantGroups") // Relasi untuk asisten ke kelompok
  memberGroups      Group[]    @relation("MemberGroups") // Relasi untuk anggota kelompok
  gradedGrades      Grade[]    @relation("GradedBy") // Relasi untuk asisten yang memberi nilai
  userGrades        Grade[]    @relation("UserGrades") // Relasi untuk praktikan yang menerima nilai
  asistantSchedules Schedule[] @relation("AsistantSchedules") // Relasi ke jadwal asisten
}

// Group
model Group {
  groupId     String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  name        Int    @db.SmallInt // Urutan kelompok
  practicumId Int
  asistantId  String

  practicum Practicum  @relation(fields: [practicumId], references: [id])
  asistant  User       @relation("AsistantGroups", fields: [asistantId], references: [id])
  members   User[]     @relation("MemberGroups")
  schedules Schedule[] @relation("GroupSchedules") // Relasi ke jadwal grup
}

// Practicum
model Practicum {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  schedules Schedule[] // Relasi ke jadwal
  groups    Group[] // Relasi ke kelompok

  @@map("practicums")
}

// Schedule
model Schedule {
  id          Int      @id @default(autoincrement())
  practicumId Int
  groupId     String
  asistantId  String
  date        DateTime
  startTime   DateTime
  status      Status   @default(SCHEDULED)

  practicum Practicum @relation(fields: [practicumId], references: [id])
  group     Group     @relation("GroupSchedules", fields: [groupId], references: [groupId])
  asistant  User      @relation("AsistantSchedules", fields: [asistantId], references: [id])

  grades Grade[] // Relasi ke nilai

  @@unique([groupId, startTime]) // Memastikan tidak ada jadwal yang bentrok
}

// Grade
model Grade {
  id           Int      @id @default(autoincrement())
  scheduleId   Int
  userId       String
  prelab       Int?     @db.SmallInt // 0-100
  inlab        Int?     @db.SmallInt
  abstract     Int?     @db.SmallInt
  introduction Int?     @db.SmallInt
  methodology  Int?     @db.SmallInt
  discussion   Int?     @db.SmallInt
  conclusion   Int?     @db.SmallInt
  formatting   Int?     @db.SmallInt
  feedback     String? // Feedback dari asisten
  gradedBy     String // Asisten yang memberi nilai
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  user     User     @relation("UserGrades", fields: [userId], references: [id])
  grader   User     @relation("GradedBy", fields: [gradedBy], references: [id])
}

// Status Praktikum
enum Status {
  SCHEDULED // Dijadwalkan oleh asisten
  COMPLETED // Praktikum selesai
  CANCELLED // Praktikum dibatalkan
}
