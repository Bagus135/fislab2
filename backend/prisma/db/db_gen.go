// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"fmt"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"postgresql","activeProvider":"postgresql","url":{"fromEnvVar":"DATABASE_URL","value":""},"config":null}]`

const schema = `datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "go run github.com/steebchen/prisma-client-go"
}

// role
enum Role {
  SUPER_ADMIN
  ADMIN
  ASISTEN
  PRAKTIKAN
}

// status praktikum
enum Status {
  UNSCHEDULED
  SCHEDULED
  COMPLETED
  CANCELLED
}

// status presensi
enum AttendanceStatus {
  HADIR
  SAKIT
  IZIN
  TIDAK_HADIR
}

// User
model User {
  id        String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  nrp       String    @unique
  name      String
  about     String
  email     String
  phone     String
  password  String
  role      Role
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  // Relasi untuk anggota kelompok
  memberGroups Group[] @relation("MemberGroups")

  // Relasi presensi
  attendances Attendance[] @relation("UserAttendance")

  // Relasi ke jadwal asisten
  assistantSchedules Schedule[] @relation("AssistantSchedules")

  // Relasi untuk asisten yang memberi nilai
  gradedGrades Grade[] @relation("GradedBy")

  // Relasi untuk praktikan yang menerima nilai
  userGrades Grade[] @relation("UserGrades")

  // Relasi ke pengumuman yang dibuat
  announcements Announcement[]
}

// kelompok
model Group {
  id   String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  name Int    @unique @db.SmallInt

  // Anggota kelompok (praktikan)
  members User[] @relation("MemberGroups")

  // Relasi ke Schedule (jadwal praktikum)
  schedules Schedule[] @relation("GroupSchedules")
}

// praktikum
model Practicum {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi ke Schedule
  schedules Schedule[]

  @@map("practicums")
}

// Jadwal
model Schedule {
  id          Int       @id @default(autoincrement())
  practicumId Int
  groupId     String
  assistantId String
  date        DateTime?
  startTime   DateTime?
  status      Status    @default(UNSCHEDULED)

  practicum Practicum @relation(fields: [practicumId], references: [id])
  group     Group     @relation("GroupSchedules", fields: [groupId], references: [id])
  assistant User      @relation("AssistantSchedules", fields: [assistantId], references: [id])

  attendanceCodes AttendanceCode[]
  grades          Grade[]

  @@unique([groupId, startTime])
  @@unique([practicumId, groupId])
  @@unique([practicumId, assistantId])
}

// penilaian
model Grade {
  id           Int      @id @default(autoincrement())
  scheduleId   Int
  userId       String
  prelab       Int?     @db.SmallInt
  inlab        Int?     @db.SmallInt
  abstract     Int?     @db.SmallInt
  introduction Int?     @db.SmallInt
  methodology  Int?     @db.SmallInt
  discussion   Int?     @db.SmallInt
  conclusion   Int?     @db.SmallInt
  formatting   Int?     @db.SmallInt
  feedback     String?
  gradedBy     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  user     User     @relation("UserGrades", fields: [userId], references: [id])
  grader   User     @relation("GradedBy", fields: [gradedBy], references: [id])
}

// pengumuman
model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  author User @relation(fields: [authorId], references: [id])
}

// Kode absensi
model AttendanceCode {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  code       String   @unique
  expiredAt  DateTime
  createdAt  DateTime @default(now())

  schedule    Schedule     @relation(fields: [scheduleId], references: [id])
  attendances Attendance[]

  @@unique([scheduleId, expiredAt])
}

// Absensi
model Attendance {
  id        Int              @id @default(autoincrement())
  codeId    Int
  userId    String
  status    AttendanceStatus @default(TIDAK_HADIR)
  createdAt DateTime         @default(now())

  code AttendanceCode @relation(fields: [codeId], references: [id])
  user User           @relation("UserAttendance", fields: [userId], references: [id])

  @@unique([codeId, userId])
}
`
const schemaDatasourceURL = ""
const schemaEnvVarName = "DATABASE_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set " + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.User = userActions{client: c}
	c.Group = groupActions{client: c}
	c.Practicum = practicumActions{client: c}
	c.Schedule = scheduleActions{client: c}
	c.Grade = gradeActions{client: c}
	c.Announcement = announcementActions{client: c}
	c.AttendanceCode = attendanceCodeActions{client: c}
	c.Attendance = attendanceActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// User provides access to CRUD methods.
	User userActions
	// Group provides access to CRUD methods.
	Group groupActions
	// Practicum provides access to CRUD methods.
	Practicum practicumActions
	// Schedule provides access to CRUD methods.
	Schedule scheduleActions
	// Grade provides access to CRUD methods.
	Grade gradeActions
	// Announcement provides access to CRUD methods.
	Announcement announcementActions
	// AttendanceCode provides access to CRUD methods.
	AttendanceCode attendanceCodeActions
	// Attendance provides access to CRUD methods.
	Attendance attendanceActions
}

// --- template enums.gotpl ---

type Role string

const (
	RoleSuperAdmin Role = "SUPER_ADMIN"
	RoleAdmin      Role = "ADMIN"
	RoleAsisten    Role = "ASISTEN"
	RolePraktikan  Role = "PRAKTIKAN"
)

type RawRole Role
type Status string

const (
	StatusUnscheduled Status = "UNSCHEDULED"
	StatusScheduled   Status = "SCHEDULED"
	StatusCompleted   Status = "COMPLETED"
	StatusCancelled   Status = "CANCELLED"
)

type RawStatus Status
type AttendanceStatus string

const (
	AttendanceStatusHadir      AttendanceStatus = "HADIR"
	AttendanceStatusSakit      AttendanceStatus = "SAKIT"
	AttendanceStatusIzin       AttendanceStatus = "IZIN"
	AttendanceStatusTidakHadir AttendanceStatus = "TIDAK_HADIR"
)

type RawAttendanceStatus AttendanceStatus

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID        UserScalarFieldEnum = "id"
	UserScalarFieldEnumNrp       UserScalarFieldEnum = "nrp"
	UserScalarFieldEnumName      UserScalarFieldEnum = "name"
	UserScalarFieldEnumAbout     UserScalarFieldEnum = "about"
	UserScalarFieldEnumEmail     UserScalarFieldEnum = "email"
	UserScalarFieldEnumPhone     UserScalarFieldEnum = "phone"
	UserScalarFieldEnumPassword  UserScalarFieldEnum = "password"
	UserScalarFieldEnumRole      UserScalarFieldEnum = "role"
	UserScalarFieldEnumCreatedAt UserScalarFieldEnum = "createdAt"
	UserScalarFieldEnumUpdatedAt UserScalarFieldEnum = "updatedAt"
)

type GroupScalarFieldEnum string

const (
	GroupScalarFieldEnumID   GroupScalarFieldEnum = "id"
	GroupScalarFieldEnumName GroupScalarFieldEnum = "name"
)

type PracticumScalarFieldEnum string

const (
	PracticumScalarFieldEnumID          PracticumScalarFieldEnum = "id"
	PracticumScalarFieldEnumTitle       PracticumScalarFieldEnum = "title"
	PracticumScalarFieldEnumDescription PracticumScalarFieldEnum = "description"
	PracticumScalarFieldEnumCreatedAt   PracticumScalarFieldEnum = "createdAt"
	PracticumScalarFieldEnumUpdatedAt   PracticumScalarFieldEnum = "updatedAt"
)

type ScheduleScalarFieldEnum string

const (
	ScheduleScalarFieldEnumID          ScheduleScalarFieldEnum = "id"
	ScheduleScalarFieldEnumPracticumID ScheduleScalarFieldEnum = "practicumId"
	ScheduleScalarFieldEnumGroupID     ScheduleScalarFieldEnum = "groupId"
	ScheduleScalarFieldEnumAssistantID ScheduleScalarFieldEnum = "assistantId"
	ScheduleScalarFieldEnumDate        ScheduleScalarFieldEnum = "date"
	ScheduleScalarFieldEnumStartTime   ScheduleScalarFieldEnum = "startTime"
	ScheduleScalarFieldEnumStatus      ScheduleScalarFieldEnum = "status"
)

type GradeScalarFieldEnum string

const (
	GradeScalarFieldEnumID           GradeScalarFieldEnum = "id"
	GradeScalarFieldEnumScheduleID   GradeScalarFieldEnum = "scheduleId"
	GradeScalarFieldEnumUserID       GradeScalarFieldEnum = "userId"
	GradeScalarFieldEnumPrelab       GradeScalarFieldEnum = "prelab"
	GradeScalarFieldEnumInlab        GradeScalarFieldEnum = "inlab"
	GradeScalarFieldEnumAbstract     GradeScalarFieldEnum = "abstract"
	GradeScalarFieldEnumIntroduction GradeScalarFieldEnum = "introduction"
	GradeScalarFieldEnumMethodology  GradeScalarFieldEnum = "methodology"
	GradeScalarFieldEnumDiscussion   GradeScalarFieldEnum = "discussion"
	GradeScalarFieldEnumConclusion   GradeScalarFieldEnum = "conclusion"
	GradeScalarFieldEnumFormatting   GradeScalarFieldEnum = "formatting"
	GradeScalarFieldEnumFeedback     GradeScalarFieldEnum = "feedback"
	GradeScalarFieldEnumGradedBy     GradeScalarFieldEnum = "gradedBy"
	GradeScalarFieldEnumCreatedAt    GradeScalarFieldEnum = "createdAt"
	GradeScalarFieldEnumUpdatedAt    GradeScalarFieldEnum = "updatedAt"
)

type AnnouncementScalarFieldEnum string

const (
	AnnouncementScalarFieldEnumID        AnnouncementScalarFieldEnum = "id"
	AnnouncementScalarFieldEnumTitle     AnnouncementScalarFieldEnum = "title"
	AnnouncementScalarFieldEnumContent   AnnouncementScalarFieldEnum = "content"
	AnnouncementScalarFieldEnumCreatedAt AnnouncementScalarFieldEnum = "createdAt"
	AnnouncementScalarFieldEnumUpdatedAt AnnouncementScalarFieldEnum = "updatedAt"
	AnnouncementScalarFieldEnumAuthorID  AnnouncementScalarFieldEnum = "authorId"
)

type AttendanceCodeScalarFieldEnum string

const (
	AttendanceCodeScalarFieldEnumID         AttendanceCodeScalarFieldEnum = "id"
	AttendanceCodeScalarFieldEnumScheduleID AttendanceCodeScalarFieldEnum = "scheduleId"
	AttendanceCodeScalarFieldEnumCode       AttendanceCodeScalarFieldEnum = "code"
	AttendanceCodeScalarFieldEnumExpiredAt  AttendanceCodeScalarFieldEnum = "expiredAt"
	AttendanceCodeScalarFieldEnumCreatedAt  AttendanceCodeScalarFieldEnum = "createdAt"
)

type AttendanceScalarFieldEnum string

const (
	AttendanceScalarFieldEnumID        AttendanceScalarFieldEnum = "id"
	AttendanceScalarFieldEnumCodeID    AttendanceScalarFieldEnum = "codeId"
	AttendanceScalarFieldEnumUserID    AttendanceScalarFieldEnum = "userId"
	AttendanceScalarFieldEnumStatus    AttendanceScalarFieldEnum = "status"
	AttendanceScalarFieldEnumCreatedAt AttendanceScalarFieldEnum = "createdAt"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type userPrismaFields = prismaFields

const userFieldID userPrismaFields = "id"

const userFieldNrp userPrismaFields = "nrp"

const userFieldName userPrismaFields = "name"

const userFieldAbout userPrismaFields = "about"

const userFieldEmail userPrismaFields = "email"

const userFieldPhone userPrismaFields = "phone"

const userFieldPassword userPrismaFields = "password"

const userFieldRole userPrismaFields = "role"

const userFieldCreatedAt userPrismaFields = "createdAt"

const userFieldUpdatedAt userPrismaFields = "updatedAt"

const userFieldMemberGroups userPrismaFields = "memberGroups"

const userFieldAttendances userPrismaFields = "attendances"

const userFieldAssistantSchedules userPrismaFields = "assistantSchedules"

const userFieldGradedGrades userPrismaFields = "gradedGrades"

const userFieldUserGrades userPrismaFields = "userGrades"

const userFieldAnnouncements userPrismaFields = "announcements"

type groupPrismaFields = prismaFields

const groupFieldID groupPrismaFields = "id"

const groupFieldName groupPrismaFields = "name"

const groupFieldMembers groupPrismaFields = "members"

const groupFieldSchedules groupPrismaFields = "schedules"

type practicumPrismaFields = prismaFields

const practicumFieldID practicumPrismaFields = "id"

const practicumFieldTitle practicumPrismaFields = "title"

const practicumFieldDescription practicumPrismaFields = "description"

const practicumFieldCreatedAt practicumPrismaFields = "createdAt"

const practicumFieldUpdatedAt practicumPrismaFields = "updatedAt"

const practicumFieldSchedules practicumPrismaFields = "schedules"

type schedulePrismaFields = prismaFields

const scheduleFieldID schedulePrismaFields = "id"

const scheduleFieldPracticumID schedulePrismaFields = "practicumId"

const scheduleFieldGroupID schedulePrismaFields = "groupId"

const scheduleFieldAssistantID schedulePrismaFields = "assistantId"

const scheduleFieldDate schedulePrismaFields = "date"

const scheduleFieldStartTime schedulePrismaFields = "startTime"

const scheduleFieldStatus schedulePrismaFields = "status"

const scheduleFieldPracticum schedulePrismaFields = "practicum"

const scheduleFieldGroup schedulePrismaFields = "group"

const scheduleFieldAssistant schedulePrismaFields = "assistant"

const scheduleFieldAttendanceCodes schedulePrismaFields = "attendanceCodes"

const scheduleFieldGrades schedulePrismaFields = "grades"

type gradePrismaFields = prismaFields

const gradeFieldID gradePrismaFields = "id"

const gradeFieldScheduleID gradePrismaFields = "scheduleId"

const gradeFieldUserID gradePrismaFields = "userId"

const gradeFieldPrelab gradePrismaFields = "prelab"

const gradeFieldInlab gradePrismaFields = "inlab"

const gradeFieldAbstract gradePrismaFields = "abstract"

const gradeFieldIntroduction gradePrismaFields = "introduction"

const gradeFieldMethodology gradePrismaFields = "methodology"

const gradeFieldDiscussion gradePrismaFields = "discussion"

const gradeFieldConclusion gradePrismaFields = "conclusion"

const gradeFieldFormatting gradePrismaFields = "formatting"

const gradeFieldFeedback gradePrismaFields = "feedback"

const gradeFieldGradedBy gradePrismaFields = "gradedBy"

const gradeFieldCreatedAt gradePrismaFields = "createdAt"

const gradeFieldUpdatedAt gradePrismaFields = "updatedAt"

const gradeFieldSchedule gradePrismaFields = "schedule"

const gradeFieldUser gradePrismaFields = "user"

const gradeFieldGrader gradePrismaFields = "grader"

type announcementPrismaFields = prismaFields

const announcementFieldID announcementPrismaFields = "id"

const announcementFieldTitle announcementPrismaFields = "title"

const announcementFieldContent announcementPrismaFields = "content"

const announcementFieldCreatedAt announcementPrismaFields = "createdAt"

const announcementFieldUpdatedAt announcementPrismaFields = "updatedAt"

const announcementFieldAuthorID announcementPrismaFields = "authorId"

const announcementFieldAuthor announcementPrismaFields = "author"

type attendanceCodePrismaFields = prismaFields

const attendanceCodeFieldID attendanceCodePrismaFields = "id"

const attendanceCodeFieldScheduleID attendanceCodePrismaFields = "scheduleId"

const attendanceCodeFieldCode attendanceCodePrismaFields = "code"

const attendanceCodeFieldExpiredAt attendanceCodePrismaFields = "expiredAt"

const attendanceCodeFieldCreatedAt attendanceCodePrismaFields = "createdAt"

const attendanceCodeFieldSchedule attendanceCodePrismaFields = "schedule"

const attendanceCodeFieldAttendances attendanceCodePrismaFields = "attendances"

type attendancePrismaFields = prismaFields

const attendanceFieldID attendancePrismaFields = "id"

const attendanceFieldCodeID attendancePrismaFields = "codeId"

const attendanceFieldUserID attendancePrismaFields = "userId"

const attendanceFieldStatus attendancePrismaFields = "status"

const attendanceFieldCreatedAt attendancePrismaFields = "createdAt"

const attendanceFieldCode attendancePrismaFields = "code"

const attendanceFieldUser attendancePrismaFields = "user"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.User = userMock{
		mock: m,
	}

	m.Group = groupMock{
		mock: m,
	}

	m.Practicum = practicumMock{
		mock: m,
	}

	m.Schedule = scheduleMock{
		mock: m,
	}

	m.Grade = gradeMock{
		mock: m,
	}

	m.Announcement = announcementMock{
		mock: m,
	}

	m.AttendanceCode = attendanceCodeMock{
		mock: m,
	}

	m.Attendance = attendanceMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	User userMock

	Group groupMock

	Practicum practicumMock

	Schedule scheduleMock

	Grade gradeMock

	Announcement announcementMock

	AttendanceCode attendanceCodeMock

	Attendance attendanceMock
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type groupMock struct {
	mock *Mock
}

type GroupMockExpectParam interface {
	ExtractQuery() builder.Query
	groupModel()
}

func (m *groupMock) Expect(query GroupMockExpectParam) *groupMockExec {
	return &groupMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type groupMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *groupMockExec) Returns(v GroupModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *groupMockExec) ReturnsMany(v []GroupModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *groupMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type practicumMock struct {
	mock *Mock
}

type PracticumMockExpectParam interface {
	ExtractQuery() builder.Query
	practicumModel()
}

func (m *practicumMock) Expect(query PracticumMockExpectParam) *practicumMockExec {
	return &practicumMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type practicumMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *practicumMockExec) Returns(v PracticumModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *practicumMockExec) ReturnsMany(v []PracticumModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *practicumMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type scheduleMock struct {
	mock *Mock
}

type ScheduleMockExpectParam interface {
	ExtractQuery() builder.Query
	scheduleModel()
}

func (m *scheduleMock) Expect(query ScheduleMockExpectParam) *scheduleMockExec {
	return &scheduleMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type scheduleMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *scheduleMockExec) Returns(v ScheduleModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *scheduleMockExec) ReturnsMany(v []ScheduleModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *scheduleMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type gradeMock struct {
	mock *Mock
}

type GradeMockExpectParam interface {
	ExtractQuery() builder.Query
	gradeModel()
}

func (m *gradeMock) Expect(query GradeMockExpectParam) *gradeMockExec {
	return &gradeMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type gradeMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *gradeMockExec) Returns(v GradeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *gradeMockExec) ReturnsMany(v []GradeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *gradeMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type announcementMock struct {
	mock *Mock
}

type AnnouncementMockExpectParam interface {
	ExtractQuery() builder.Query
	announcementModel()
}

func (m *announcementMock) Expect(query AnnouncementMockExpectParam) *announcementMockExec {
	return &announcementMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type announcementMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *announcementMockExec) Returns(v AnnouncementModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *announcementMockExec) ReturnsMany(v []AnnouncementModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *announcementMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type attendanceCodeMock struct {
	mock *Mock
}

type AttendanceCodeMockExpectParam interface {
	ExtractQuery() builder.Query
	attendanceCodeModel()
}

func (m *attendanceCodeMock) Expect(query AttendanceCodeMockExpectParam) *attendanceCodeMockExec {
	return &attendanceCodeMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type attendanceCodeMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *attendanceCodeMockExec) Returns(v AttendanceCodeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *attendanceCodeMockExec) ReturnsMany(v []AttendanceCodeModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *attendanceCodeMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type attendanceMock struct {
	mock *Mock
}

type AttendanceMockExpectParam interface {
	ExtractQuery() builder.Query
	attendanceModel()
}

func (m *attendanceMock) Expect(query AttendanceMockExpectParam) *attendanceMockExec {
	return &attendanceMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type attendanceMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *attendanceMockExec) Returns(v AttendanceModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *attendanceMockExec) ReturnsMany(v []AttendanceModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *attendanceMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// UserModel represents the User model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID        string    `json:"id"`
	Nrp       string    `json:"nrp"`
	Name      string    `json:"name"`
	About     string    `json:"about"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Password  string    `json:"password"`
	Role      Role      `json:"role"`
	CreatedAt *DateTime `json:"createdAt,omitempty"`
	UpdatedAt *DateTime `json:"updatedAt,omitempty"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID        RawString    `json:"id"`
	Nrp       RawString    `json:"nrp"`
	Name      RawString    `json:"name"`
	About     RawString    `json:"about"`
	Email     RawString    `json:"email"`
	Phone     RawString    `json:"phone"`
	Password  RawString    `json:"password"`
	Role      RawRole      `json:"role"`
	CreatedAt *RawDateTime `json:"createdAt,omitempty"`
	UpdatedAt *RawDateTime `json:"updatedAt,omitempty"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	MemberGroups       []GroupModel        `json:"memberGroups,omitempty"`
	Attendances        []AttendanceModel   `json:"attendances,omitempty"`
	AssistantSchedules []ScheduleModel     `json:"assistantSchedules,omitempty"`
	GradedGrades       []GradeModel        `json:"gradedGrades,omitempty"`
	UserGrades         []GradeModel        `json:"userGrades,omitempty"`
	Announcements      []AnnouncementModel `json:"announcements,omitempty"`
}

func (r UserModel) CreatedAt() (value DateTime, ok bool) {
	if r.InnerUser.CreatedAt == nil {
		return value, false
	}
	return *r.InnerUser.CreatedAt, true
}

func (r UserModel) UpdatedAt() (value DateTime, ok bool) {
	if r.InnerUser.UpdatedAt == nil {
		return value, false
	}
	return *r.InnerUser.UpdatedAt, true
}

func (r UserModel) MemberGroups() (value []GroupModel) {
	if r.RelationsUser.MemberGroups == nil {
		panic("attempted to access memberGroups but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.MemberGroups
}

func (r UserModel) Attendances() (value []AttendanceModel) {
	if r.RelationsUser.Attendances == nil {
		panic("attempted to access attendances but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Attendances
}

func (r UserModel) AssistantSchedules() (value []ScheduleModel) {
	if r.RelationsUser.AssistantSchedules == nil {
		panic("attempted to access assistantSchedules but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.AssistantSchedules
}

func (r UserModel) GradedGrades() (value []GradeModel) {
	if r.RelationsUser.GradedGrades == nil {
		panic("attempted to access gradedGrades but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.GradedGrades
}

func (r UserModel) UserGrades() (value []GradeModel) {
	if r.RelationsUser.UserGrades == nil {
		panic("attempted to access userGrades but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.UserGrades
}

func (r UserModel) Announcements() (value []AnnouncementModel) {
	if r.RelationsUser.Announcements == nil {
		panic("attempted to access announcements but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Announcements
}

// GroupModel represents the Group model and is a wrapper for accessing fields and methods
type GroupModel struct {
	InnerGroup
	RelationsGroup
}

// InnerGroup holds the actual data
type InnerGroup struct {
	ID   string `json:"id"`
	Name int    `json:"name"`
}

// RawGroupModel is a struct for Group when used in raw queries
type RawGroupModel struct {
	ID   RawString `json:"id"`
	Name RawInt    `json:"name"`
}

// RelationsGroup holds the relation data separately
type RelationsGroup struct {
	Members   []UserModel     `json:"members,omitempty"`
	Schedules []ScheduleModel `json:"schedules,omitempty"`
}

func (r GroupModel) Members() (value []UserModel) {
	if r.RelationsGroup.Members == nil {
		panic("attempted to access members but did not fetch it using the .With() syntax")
	}
	return r.RelationsGroup.Members
}

func (r GroupModel) Schedules() (value []ScheduleModel) {
	if r.RelationsGroup.Schedules == nil {
		panic("attempted to access schedules but did not fetch it using the .With() syntax")
	}
	return r.RelationsGroup.Schedules
}

// PracticumModel represents the Practicum model and is a wrapper for accessing fields and methods
type PracticumModel struct {
	InnerPracticum
	RelationsPracticum
}

// InnerPracticum holds the actual data
type InnerPracticum struct {
	ID          int      `json:"id"`
	Title       string   `json:"title"`
	Description *string  `json:"description,omitempty"`
	CreatedAt   DateTime `json:"createdAt"`
	UpdatedAt   DateTime `json:"updatedAt"`
}

// RawPracticumModel is a struct for Practicum when used in raw queries
type RawPracticumModel struct {
	ID          RawInt      `json:"id"`
	Title       RawString   `json:"title"`
	Description *RawString  `json:"description,omitempty"`
	CreatedAt   RawDateTime `json:"createdAt"`
	UpdatedAt   RawDateTime `json:"updatedAt"`
}

// RelationsPracticum holds the relation data separately
type RelationsPracticum struct {
	Schedules []ScheduleModel `json:"schedules,omitempty"`
}

func (r PracticumModel) Description() (value String, ok bool) {
	if r.InnerPracticum.Description == nil {
		return value, false
	}
	return *r.InnerPracticum.Description, true
}

func (r PracticumModel) Schedules() (value []ScheduleModel) {
	if r.RelationsPracticum.Schedules == nil {
		panic("attempted to access schedules but did not fetch it using the .With() syntax")
	}
	return r.RelationsPracticum.Schedules
}

// ScheduleModel represents the Schedule model and is a wrapper for accessing fields and methods
type ScheduleModel struct {
	InnerSchedule
	RelationsSchedule
}

// InnerSchedule holds the actual data
type InnerSchedule struct {
	ID          int       `json:"id"`
	PracticumID int       `json:"practicumId"`
	GroupID     string    `json:"groupId"`
	AssistantID string    `json:"assistantId"`
	Date        *DateTime `json:"date,omitempty"`
	StartTime   *DateTime `json:"startTime,omitempty"`
	Status      Status    `json:"status"`
}

// RawScheduleModel is a struct for Schedule when used in raw queries
type RawScheduleModel struct {
	ID          RawInt       `json:"id"`
	PracticumID RawInt       `json:"practicumId"`
	GroupID     RawString    `json:"groupId"`
	AssistantID RawString    `json:"assistantId"`
	Date        *RawDateTime `json:"date,omitempty"`
	StartTime   *RawDateTime `json:"startTime,omitempty"`
	Status      RawStatus    `json:"status"`
}

// RelationsSchedule holds the relation data separately
type RelationsSchedule struct {
	Practicum       *PracticumModel       `json:"practicum,omitempty"`
	Group           *GroupModel           `json:"group,omitempty"`
	Assistant       *UserModel            `json:"assistant,omitempty"`
	AttendanceCodes []AttendanceCodeModel `json:"attendanceCodes,omitempty"`
	Grades          []GradeModel          `json:"grades,omitempty"`
}

func (r ScheduleModel) Date() (value DateTime, ok bool) {
	if r.InnerSchedule.Date == nil {
		return value, false
	}
	return *r.InnerSchedule.Date, true
}

func (r ScheduleModel) StartTime() (value DateTime, ok bool) {
	if r.InnerSchedule.StartTime == nil {
		return value, false
	}
	return *r.InnerSchedule.StartTime, true
}

func (r ScheduleModel) Practicum() (value *PracticumModel) {
	if r.RelationsSchedule.Practicum == nil {
		panic("attempted to access practicum but did not fetch it using the .With() syntax")
	}
	return r.RelationsSchedule.Practicum
}

func (r ScheduleModel) Group() (value *GroupModel) {
	if r.RelationsSchedule.Group == nil {
		panic("attempted to access group but did not fetch it using the .With() syntax")
	}
	return r.RelationsSchedule.Group
}

func (r ScheduleModel) Assistant() (value *UserModel) {
	if r.RelationsSchedule.Assistant == nil {
		panic("attempted to access assistant but did not fetch it using the .With() syntax")
	}
	return r.RelationsSchedule.Assistant
}

func (r ScheduleModel) AttendanceCodes() (value []AttendanceCodeModel) {
	if r.RelationsSchedule.AttendanceCodes == nil {
		panic("attempted to access attendanceCodes but did not fetch it using the .With() syntax")
	}
	return r.RelationsSchedule.AttendanceCodes
}

func (r ScheduleModel) Grades() (value []GradeModel) {
	if r.RelationsSchedule.Grades == nil {
		panic("attempted to access grades but did not fetch it using the .With() syntax")
	}
	return r.RelationsSchedule.Grades
}

// GradeModel represents the Grade model and is a wrapper for accessing fields and methods
type GradeModel struct {
	InnerGrade
	RelationsGrade
}

// InnerGrade holds the actual data
type InnerGrade struct {
	ID           int      `json:"id"`
	ScheduleID   int      `json:"scheduleId"`
	UserID       string   `json:"userId"`
	Prelab       *int     `json:"prelab,omitempty"`
	Inlab        *int     `json:"inlab,omitempty"`
	Abstract     *int     `json:"abstract,omitempty"`
	Introduction *int     `json:"introduction,omitempty"`
	Methodology  *int     `json:"methodology,omitempty"`
	Discussion   *int     `json:"discussion,omitempty"`
	Conclusion   *int     `json:"conclusion,omitempty"`
	Formatting   *int     `json:"formatting,omitempty"`
	Feedback     *string  `json:"feedback,omitempty"`
	GradedBy     string   `json:"gradedBy"`
	CreatedAt    DateTime `json:"createdAt"`
	UpdatedAt    DateTime `json:"updatedAt"`
}

// RawGradeModel is a struct for Grade when used in raw queries
type RawGradeModel struct {
	ID           RawInt      `json:"id"`
	ScheduleID   RawInt      `json:"scheduleId"`
	UserID       RawString   `json:"userId"`
	Prelab       *RawInt     `json:"prelab,omitempty"`
	Inlab        *RawInt     `json:"inlab,omitempty"`
	Abstract     *RawInt     `json:"abstract,omitempty"`
	Introduction *RawInt     `json:"introduction,omitempty"`
	Methodology  *RawInt     `json:"methodology,omitempty"`
	Discussion   *RawInt     `json:"discussion,omitempty"`
	Conclusion   *RawInt     `json:"conclusion,omitempty"`
	Formatting   *RawInt     `json:"formatting,omitempty"`
	Feedback     *RawString  `json:"feedback,omitempty"`
	GradedBy     RawString   `json:"gradedBy"`
	CreatedAt    RawDateTime `json:"createdAt"`
	UpdatedAt    RawDateTime `json:"updatedAt"`
}

// RelationsGrade holds the relation data separately
type RelationsGrade struct {
	Schedule *ScheduleModel `json:"schedule,omitempty"`
	User     *UserModel     `json:"user,omitempty"`
	Grader   *UserModel     `json:"grader,omitempty"`
}

func (r GradeModel) Prelab() (value Int, ok bool) {
	if r.InnerGrade.Prelab == nil {
		return value, false
	}
	return *r.InnerGrade.Prelab, true
}

func (r GradeModel) Inlab() (value Int, ok bool) {
	if r.InnerGrade.Inlab == nil {
		return value, false
	}
	return *r.InnerGrade.Inlab, true
}

func (r GradeModel) Abstract() (value Int, ok bool) {
	if r.InnerGrade.Abstract == nil {
		return value, false
	}
	return *r.InnerGrade.Abstract, true
}

func (r GradeModel) Introduction() (value Int, ok bool) {
	if r.InnerGrade.Introduction == nil {
		return value, false
	}
	return *r.InnerGrade.Introduction, true
}

func (r GradeModel) Methodology() (value Int, ok bool) {
	if r.InnerGrade.Methodology == nil {
		return value, false
	}
	return *r.InnerGrade.Methodology, true
}

func (r GradeModel) Discussion() (value Int, ok bool) {
	if r.InnerGrade.Discussion == nil {
		return value, false
	}
	return *r.InnerGrade.Discussion, true
}

func (r GradeModel) Conclusion() (value Int, ok bool) {
	if r.InnerGrade.Conclusion == nil {
		return value, false
	}
	return *r.InnerGrade.Conclusion, true
}

func (r GradeModel) Formatting() (value Int, ok bool) {
	if r.InnerGrade.Formatting == nil {
		return value, false
	}
	return *r.InnerGrade.Formatting, true
}

func (r GradeModel) Feedback() (value String, ok bool) {
	if r.InnerGrade.Feedback == nil {
		return value, false
	}
	return *r.InnerGrade.Feedback, true
}

func (r GradeModel) Schedule() (value *ScheduleModel) {
	if r.RelationsGrade.Schedule == nil {
		panic("attempted to access schedule but did not fetch it using the .With() syntax")
	}
	return r.RelationsGrade.Schedule
}

func (r GradeModel) User() (value *UserModel) {
	if r.RelationsGrade.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsGrade.User
}

func (r GradeModel) Grader() (value *UserModel) {
	if r.RelationsGrade.Grader == nil {
		panic("attempted to access grader but did not fetch it using the .With() syntax")
	}
	return r.RelationsGrade.Grader
}

// AnnouncementModel represents the Announcement model and is a wrapper for accessing fields and methods
type AnnouncementModel struct {
	InnerAnnouncement
	RelationsAnnouncement
}

// InnerAnnouncement holds the actual data
type InnerAnnouncement struct {
	ID        int      `json:"id"`
	Title     string   `json:"title"`
	Content   string   `json:"content"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
	AuthorID  string   `json:"authorId"`
}

// RawAnnouncementModel is a struct for Announcement when used in raw queries
type RawAnnouncementModel struct {
	ID        RawInt      `json:"id"`
	Title     RawString   `json:"title"`
	Content   RawString   `json:"content"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
	AuthorID  RawString   `json:"authorId"`
}

// RelationsAnnouncement holds the relation data separately
type RelationsAnnouncement struct {
	Author *UserModel `json:"author,omitempty"`
}

func (r AnnouncementModel) Author() (value *UserModel) {
	if r.RelationsAnnouncement.Author == nil {
		panic("attempted to access author but did not fetch it using the .With() syntax")
	}
	return r.RelationsAnnouncement.Author
}

// AttendanceCodeModel represents the AttendanceCode model and is a wrapper for accessing fields and methods
type AttendanceCodeModel struct {
	InnerAttendanceCode
	RelationsAttendanceCode
}

// InnerAttendanceCode holds the actual data
type InnerAttendanceCode struct {
	ID         int      `json:"id"`
	ScheduleID int      `json:"scheduleId"`
	Code       string   `json:"code"`
	ExpiredAt  DateTime `json:"expiredAt"`
	CreatedAt  DateTime `json:"createdAt"`
}

// RawAttendanceCodeModel is a struct for AttendanceCode when used in raw queries
type RawAttendanceCodeModel struct {
	ID         RawInt      `json:"id"`
	ScheduleID RawInt      `json:"scheduleId"`
	Code       RawString   `json:"code"`
	ExpiredAt  RawDateTime `json:"expiredAt"`
	CreatedAt  RawDateTime `json:"createdAt"`
}

// RelationsAttendanceCode holds the relation data separately
type RelationsAttendanceCode struct {
	Schedule    *ScheduleModel    `json:"schedule,omitempty"`
	Attendances []AttendanceModel `json:"attendances,omitempty"`
}

func (r AttendanceCodeModel) Schedule() (value *ScheduleModel) {
	if r.RelationsAttendanceCode.Schedule == nil {
		panic("attempted to access schedule but did not fetch it using the .With() syntax")
	}
	return r.RelationsAttendanceCode.Schedule
}

func (r AttendanceCodeModel) Attendances() (value []AttendanceModel) {
	if r.RelationsAttendanceCode.Attendances == nil {
		panic("attempted to access attendances but did not fetch it using the .With() syntax")
	}
	return r.RelationsAttendanceCode.Attendances
}

// AttendanceModel represents the Attendance model and is a wrapper for accessing fields and methods
type AttendanceModel struct {
	InnerAttendance
	RelationsAttendance
}

// InnerAttendance holds the actual data
type InnerAttendance struct {
	ID        int              `json:"id"`
	CodeID    int              `json:"codeId"`
	UserID    string           `json:"userId"`
	Status    AttendanceStatus `json:"status"`
	CreatedAt DateTime         `json:"createdAt"`
}

// RawAttendanceModel is a struct for Attendance when used in raw queries
type RawAttendanceModel struct {
	ID        RawInt              `json:"id"`
	CodeID    RawInt              `json:"codeId"`
	UserID    RawString           `json:"userId"`
	Status    RawAttendanceStatus `json:"status"`
	CreatedAt RawDateTime         `json:"createdAt"`
}

// RelationsAttendance holds the relation data separately
type RelationsAttendance struct {
	Code *AttendanceCodeModel `json:"code,omitempty"`
	User *UserModel           `json:"user,omitempty"`
}

func (r AttendanceModel) Code() (value *AttendanceCodeModel) {
	if r.RelationsAttendance.Code == nil {
		panic("attempted to access code but did not fetch it using the .With() syntax")
	}
	return r.RelationsAttendance.Code
}

func (r AttendanceModel) User() (value *UserModel) {
	if r.RelationsAttendance.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsAttendance.User
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDString

	// Nrp
	//
	// @required
	// @unique
	Nrp userQueryNrpString

	// Name
	//
	// @required
	Name userQueryNameString

	// About
	//
	// @required
	About userQueryAboutString

	// Email
	//
	// @required
	Email userQueryEmailString

	// Phone
	//
	// @required
	Phone userQueryPhoneString

	// Password
	//
	// @required
	Password userQueryPasswordString

	// Role
	//
	// @required
	Role userQueryRoleRole

	// CreatedAt
	//
	// @optional
	CreatedAt userQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @optional
	UpdatedAt userQueryUpdatedAtDateTime

	MemberGroups userQueryMemberGroupsRelations

	Attendances userQueryAttendancesRelations

	AssistantSchedules userQueryAssistantSchedulesRelations

	GradedGrades userQueryGradedGradesRelations

	UserGrades userQueryUserGradesRelations

	Announcements userQueryAnnouncementsRelations
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDString struct{}

// Set the required value of ID
func (r userQueryIDString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userQueryIDString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryIDString) Equals(value string) userWithPrismaIDEqualsUniqueParam {

	return userWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EqualsIfPresent(value *string) userWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryIDString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryIDString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryIDString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryIDString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryIDString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryIDString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryIDString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryIDString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryIDString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryIDString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryIDString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryIDString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryIDString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryIDString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryIDString) Field() userPrismaFields {
	return userFieldID
}

// base struct
type userQueryNrpString struct{}

// Set the required value of Nrp
func (r userQueryNrpString) Set(value string) userWithPrismaNrpSetParam {

	return userWithPrismaNrpSetParam{
		data: builder.Field{
			Name:  "nrp",
			Value: value,
		},
	}

}

// Set the optional value of Nrp dynamically
func (r userQueryNrpString) SetIfPresent(value *String) userWithPrismaNrpSetParam {
	if value == nil {
		return userWithPrismaNrpSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryNrpString) Equals(value string) userWithPrismaNrpEqualsUniqueParam {

	return userWithPrismaNrpEqualsUniqueParam{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) EqualsIfPresent(value *string) userWithPrismaNrpEqualsUniqueParam {
	if value == nil {
		return userWithPrismaNrpEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryNrpString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "nrp",
			Value: direction,
		},
	}
}

func (r userQueryNrpString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "nrp",
			Value: cursor,
		},
	}
}

func (r userQueryNrpString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryNrpString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryNrpString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryNrpString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryNrpString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryNrpString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryNrpString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryNrpString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryNrpString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryNrpString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryNrpString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNrpString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryNrpString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryNrpString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryNrpString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "nrp",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryNrpString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryNrpString) Field() userPrismaFields {
	return userFieldNrp
}

// base struct
type userQueryNameString struct{}

// Set the required value of Name
func (r userQueryNameString) Set(value string) userWithPrismaNameSetParam {

	return userWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r userQueryNameString) SetIfPresent(value *String) userWithPrismaNameSetParam {
	if value == nil {
		return userWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryNameString) Equals(value string) userWithPrismaNameEqualsParam {

	return userWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) EqualsIfPresent(value *string) userWithPrismaNameEqualsParam {
	if value == nil {
		return userWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryNameString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r userQueryNameString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r userQueryNameString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryNameString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryNameString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryNameString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryNameString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryNameString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryNameString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryNameString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryNameString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryNameString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryNameString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryNameString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryNameString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryNameString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryNameString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryNameString) Field() userPrismaFields {
	return userFieldName
}

// base struct
type userQueryAboutString struct{}

// Set the required value of About
func (r userQueryAboutString) Set(value string) userWithPrismaAboutSetParam {

	return userWithPrismaAboutSetParam{
		data: builder.Field{
			Name:  "about",
			Value: value,
		},
	}

}

// Set the optional value of About dynamically
func (r userQueryAboutString) SetIfPresent(value *String) userWithPrismaAboutSetParam {
	if value == nil {
		return userWithPrismaAboutSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryAboutString) Equals(value string) userWithPrismaAboutEqualsParam {

	return userWithPrismaAboutEqualsParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) EqualsIfPresent(value *string) userWithPrismaAboutEqualsParam {
	if value == nil {
		return userWithPrismaAboutEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryAboutString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "about",
			Value: direction,
		},
	}
}

func (r userQueryAboutString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "about",
			Value: cursor,
		},
	}
}

func (r userQueryAboutString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryAboutString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryAboutString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryAboutString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryAboutString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryAboutString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryAboutString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryAboutString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryAboutString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryAboutString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryAboutString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAboutString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryAboutString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryAboutString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryAboutString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "about",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryAboutString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryAboutString) Field() userPrismaFields {
	return userFieldAbout
}

// base struct
type userQueryEmailString struct{}

// Set the required value of Email
func (r userQueryEmailString) Set(value string) userWithPrismaEmailSetParam {

	return userWithPrismaEmailSetParam{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}

}

// Set the optional value of Email dynamically
func (r userQueryEmailString) SetIfPresent(value *String) userWithPrismaEmailSetParam {
	if value == nil {
		return userWithPrismaEmailSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryEmailString) Equals(value string) userWithPrismaEmailEqualsParam {

	return userWithPrismaEmailEqualsParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EqualsIfPresent(value *string) userWithPrismaEmailEqualsParam {
	if value == nil {
		return userWithPrismaEmailEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryEmailString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "email",
			Value: direction,
		},
	}
}

func (r userQueryEmailString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "email",
			Value: cursor,
		},
	}
}

func (r userQueryEmailString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryEmailString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryEmailString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryEmailString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryEmailString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryEmailString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryEmailString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryEmailString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryEmailString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryEmailString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryEmailString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryEmailString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryEmailString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryEmailString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryEmailString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryEmailString) Field() userPrismaFields {
	return userFieldEmail
}

// base struct
type userQueryPhoneString struct{}

// Set the required value of Phone
func (r userQueryPhoneString) Set(value string) userWithPrismaPhoneSetParam {

	return userWithPrismaPhoneSetParam{
		data: builder.Field{
			Name:  "phone",
			Value: value,
		},
	}

}

// Set the optional value of Phone dynamically
func (r userQueryPhoneString) SetIfPresent(value *String) userWithPrismaPhoneSetParam {
	if value == nil {
		return userWithPrismaPhoneSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryPhoneString) Equals(value string) userWithPrismaPhoneEqualsParam {

	return userWithPrismaPhoneEqualsParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) EqualsIfPresent(value *string) userWithPrismaPhoneEqualsParam {
	if value == nil {
		return userWithPrismaPhoneEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryPhoneString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "phone",
			Value: direction,
		},
	}
}

func (r userQueryPhoneString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "phone",
			Value: cursor,
		},
	}
}

func (r userQueryPhoneString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryPhoneString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryPhoneString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryPhoneString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryPhoneString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryPhoneString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryPhoneString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryPhoneString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryPhoneString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryPhoneString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryPhoneString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPhoneString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryPhoneString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryPhoneString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryPhoneString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "phone",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryPhoneString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryPhoneString) Field() userPrismaFields {
	return userFieldPhone
}

// base struct
type userQueryPasswordString struct{}

// Set the required value of Password
func (r userQueryPasswordString) Set(value string) userWithPrismaPasswordSetParam {

	return userWithPrismaPasswordSetParam{
		data: builder.Field{
			Name:  "password",
			Value: value,
		},
	}

}

// Set the optional value of Password dynamically
func (r userQueryPasswordString) SetIfPresent(value *String) userWithPrismaPasswordSetParam {
	if value == nil {
		return userWithPrismaPasswordSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryPasswordString) Equals(value string) userWithPrismaPasswordEqualsParam {

	return userWithPrismaPasswordEqualsParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EqualsIfPresent(value *string) userWithPrismaPasswordEqualsParam {
	if value == nil {
		return userWithPrismaPasswordEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryPasswordString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "password",
			Value: direction,
		},
	}
}

func (r userQueryPasswordString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "password",
			Value: cursor,
		},
	}
}

func (r userQueryPasswordString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryPasswordString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryPasswordString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryPasswordString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryPasswordString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryPasswordString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryPasswordString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryPasswordString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryPasswordString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryPasswordString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryPasswordString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryPasswordString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryPasswordString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryPasswordString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryPasswordString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryPasswordString) Field() userPrismaFields {
	return userFieldPassword
}

// base struct
type userQueryRoleRole struct{}

// Set the required value of Role
func (r userQueryRoleRole) Set(value Role) userWithPrismaRoleSetParam {

	return userWithPrismaRoleSetParam{
		data: builder.Field{
			Name:  "role",
			Value: value,
		},
	}

}

// Set the optional value of Role dynamically
func (r userQueryRoleRole) SetIfPresent(value *Role) userWithPrismaRoleSetParam {
	if value == nil {
		return userWithPrismaRoleSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryRoleRole) Equals(value Role) userWithPrismaRoleEqualsParam {

	return userWithPrismaRoleEqualsParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryRoleRole) EqualsIfPresent(value *Role) userWithPrismaRoleEqualsParam {
	if value == nil {
		return userWithPrismaRoleEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryRoleRole) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "role",
			Value: direction,
		},
	}
}

func (r userQueryRoleRole) Cursor(cursor Role) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "role",
			Value: cursor,
		},
	}
}

func (r userQueryRoleRole) In(value []Role) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryRoleRole) InIfPresent(value []Role) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryRoleRole) NotIn(value []Role) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryRoleRole) NotInIfPresent(value []Role) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryRoleRole) Not(value Role) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryRoleRole) NotIfPresent(value *Role) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

func (r userQueryRoleRole) Field() userPrismaFields {
	return userFieldRole
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the optional value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of CreatedAt dynamically
func (r userQueryCreatedAtDateTime) SetOptional(value *DateTime) userSetParam {
	if value == nil {

		var v *DateTime
		return userSetParam{
			data: builder.Field{
				Name:  "createdAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParam {

	return userWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryCreatedAtDateTime) EqualsOptional(value *DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryCreatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryCreatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryCreatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryCreatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryCreatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryCreatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryCreatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryCreatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryCreatedAtDateTime) Field() userPrismaFields {
	return userFieldCreatedAt
}

// base struct
type userQueryUpdatedAtDateTime struct{}

// Set the optional value of UpdatedAt
func (r userQueryUpdatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r userQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of UpdatedAt dynamically
func (r userQueryUpdatedAtDateTime) SetOptional(value *DateTime) userSetParam {
	if value == nil {

		var v *DateTime
		return userSetParam{
			data: builder.Field{
				Name:  "updatedAt",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryUpdatedAtDateTime) Equals(value DateTime) userWithPrismaUpdatedAtEqualsParam {

	return userWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return userWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUpdatedAtDateTime) EqualsOptional(value *DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r userQueryUpdatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryUpdatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryUpdatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryUpdatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryUpdatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryUpdatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryUpdatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryUpdatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryUpdatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryUpdatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryUpdatedAtDateTime) Field() userPrismaFields {
	return userFieldUpdatedAt
}

// base struct
type userQueryMemberGroupsGroup struct{}

type userQueryMemberGroupsRelations struct{}

// User -> MemberGroups
//
// @relation
// @required
func (userQueryMemberGroupsRelations) Some(
	params ...GroupWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "memberGroups",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> MemberGroups
//
// @relation
// @required
func (userQueryMemberGroupsRelations) Every(
	params ...GroupWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "memberGroups",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> MemberGroups
//
// @relation
// @required
func (userQueryMemberGroupsRelations) None(
	params ...GroupWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "memberGroups",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryMemberGroupsRelations) Fetch(

	params ...GroupWhereParam,

) userToMemberGroupsFindMany {
	var v userToMemberGroupsFindMany

	v.query.Operation = "query"
	v.query.Method = "memberGroups"
	v.query.Outputs = groupOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryMemberGroupsRelations) Link(
	params ...GroupWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "memberGroups",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryMemberGroupsRelations) Unlink(
	params ...GroupWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "memberGroups",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryMemberGroupsGroup) Field() userPrismaFields {
	return userFieldMemberGroups
}

// base struct
type userQueryAttendancesAttendance struct{}

type userQueryAttendancesRelations struct{}

// User -> Attendances
//
// @relation
// @required
func (userQueryAttendancesRelations) Some(
	params ...AttendanceWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Attendances
//
// @relation
// @required
func (userQueryAttendancesRelations) Every(
	params ...AttendanceWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Attendances
//
// @relation
// @required
func (userQueryAttendancesRelations) None(
	params ...AttendanceWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryAttendancesRelations) Fetch(

	params ...AttendanceWhereParam,

) userToAttendancesFindMany {
	var v userToAttendancesFindMany

	v.query.Operation = "query"
	v.query.Method = "attendances"
	v.query.Outputs = attendanceOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryAttendancesRelations) Link(
	params ...AttendanceWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryAttendancesRelations) Unlink(
	params ...AttendanceWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryAttendancesAttendance) Field() userPrismaFields {
	return userFieldAttendances
}

// base struct
type userQueryAssistantSchedulesSchedule struct{}

type userQueryAssistantSchedulesRelations struct{}

// User -> AssistantSchedules
//
// @relation
// @required
func (userQueryAssistantSchedulesRelations) Some(
	params ...ScheduleWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "assistantSchedules",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> AssistantSchedules
//
// @relation
// @required
func (userQueryAssistantSchedulesRelations) Every(
	params ...ScheduleWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "assistantSchedules",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> AssistantSchedules
//
// @relation
// @required
func (userQueryAssistantSchedulesRelations) None(
	params ...ScheduleWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "assistantSchedules",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryAssistantSchedulesRelations) Fetch(

	params ...ScheduleWhereParam,

) userToAssistantSchedulesFindMany {
	var v userToAssistantSchedulesFindMany

	v.query.Operation = "query"
	v.query.Method = "assistantSchedules"
	v.query.Outputs = scheduleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryAssistantSchedulesRelations) Link(
	params ...ScheduleWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "assistantSchedules",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryAssistantSchedulesRelations) Unlink(
	params ...ScheduleWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "assistantSchedules",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryAssistantSchedulesSchedule) Field() userPrismaFields {
	return userFieldAssistantSchedules
}

// base struct
type userQueryGradedGradesGrade struct{}

type userQueryGradedGradesRelations struct{}

// User -> GradedGrades
//
// @relation
// @required
func (userQueryGradedGradesRelations) Some(
	params ...GradeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "gradedGrades",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> GradedGrades
//
// @relation
// @required
func (userQueryGradedGradesRelations) Every(
	params ...GradeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "gradedGrades",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> GradedGrades
//
// @relation
// @required
func (userQueryGradedGradesRelations) None(
	params ...GradeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "gradedGrades",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryGradedGradesRelations) Fetch(

	params ...GradeWhereParam,

) userToGradedGradesFindMany {
	var v userToGradedGradesFindMany

	v.query.Operation = "query"
	v.query.Method = "gradedGrades"
	v.query.Outputs = gradeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryGradedGradesRelations) Link(
	params ...GradeWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "gradedGrades",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryGradedGradesRelations) Unlink(
	params ...GradeWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "gradedGrades",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryGradedGradesGrade) Field() userPrismaFields {
	return userFieldGradedGrades
}

// base struct
type userQueryUserGradesGrade struct{}

type userQueryUserGradesRelations struct{}

// User -> UserGrades
//
// @relation
// @required
func (userQueryUserGradesRelations) Some(
	params ...GradeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "userGrades",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> UserGrades
//
// @relation
// @required
func (userQueryUserGradesRelations) Every(
	params ...GradeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "userGrades",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> UserGrades
//
// @relation
// @required
func (userQueryUserGradesRelations) None(
	params ...GradeWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "userGrades",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryUserGradesRelations) Fetch(

	params ...GradeWhereParam,

) userToUserGradesFindMany {
	var v userToUserGradesFindMany

	v.query.Operation = "query"
	v.query.Method = "userGrades"
	v.query.Outputs = gradeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryUserGradesRelations) Link(
	params ...GradeWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "userGrades",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryUserGradesRelations) Unlink(
	params ...GradeWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "userGrades",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryUserGradesGrade) Field() userPrismaFields {
	return userFieldUserGrades
}

// base struct
type userQueryAnnouncementsAnnouncement struct{}

type userQueryAnnouncementsRelations struct{}

// User -> Announcements
//
// @relation
// @required
func (userQueryAnnouncementsRelations) Some(
	params ...AnnouncementWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "announcements",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Announcements
//
// @relation
// @required
func (userQueryAnnouncementsRelations) Every(
	params ...AnnouncementWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "announcements",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Announcements
//
// @relation
// @required
func (userQueryAnnouncementsRelations) None(
	params ...AnnouncementWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "announcements",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryAnnouncementsRelations) Fetch(

	params ...AnnouncementWhereParam,

) userToAnnouncementsFindMany {
	var v userToAnnouncementsFindMany

	v.query.Operation = "query"
	v.query.Method = "announcements"
	v.query.Outputs = announcementOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryAnnouncementsRelations) Link(
	params ...AnnouncementWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "announcements",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryAnnouncementsRelations) Unlink(
	params ...AnnouncementWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "announcements",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryAnnouncementsAnnouncement) Field() userPrismaFields {
	return userFieldAnnouncements
}

// Group acts as a namespaces to access query methods for the Group model
var Group = groupQuery{}

// groupQuery exposes query functions for the group model
type groupQuery struct {

	// ID
	//
	// @required
	ID groupQueryIDString

	// Name
	//
	// @required
	// @unique
	Name groupQueryNameInt

	Members groupQueryMembersRelations

	Schedules groupQuerySchedulesRelations
}

func (groupQuery) Not(params ...GroupWhereParam) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (groupQuery) Or(params ...GroupWhereParam) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (groupQuery) And(params ...GroupWhereParam) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type groupQueryIDString struct{}

// Set the required value of ID
func (r groupQueryIDString) Set(value string) groupSetParam {

	return groupSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r groupQueryIDString) SetIfPresent(value *String) groupSetParam {
	if value == nil {
		return groupSetParam{}
	}

	return r.Set(*value)
}

func (r groupQueryIDString) Equals(value string) groupWithPrismaIDEqualsUniqueParam {

	return groupWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) EqualsIfPresent(value *string) groupWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return groupWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r groupQueryIDString) Order(direction SortOrder) groupDefaultParam {
	return groupDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r groupQueryIDString) Cursor(cursor string) groupCursorParam {
	return groupCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r groupQueryIDString) In(value []string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) InIfPresent(value []string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.In(value)
}

func (r groupQueryIDString) NotIn(value []string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) NotInIfPresent(value []string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.NotIn(value)
}

func (r groupQueryIDString) Lt(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) LtIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Lt(*value)
}

func (r groupQueryIDString) Lte(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) LteIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Lte(*value)
}

func (r groupQueryIDString) Gt(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) GtIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Gt(*value)
}

func (r groupQueryIDString) Gte(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) GteIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Gte(*value)
}

func (r groupQueryIDString) Contains(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) ContainsIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Contains(*value)
}

func (r groupQueryIDString) StartsWith(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) StartsWithIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r groupQueryIDString) EndsWith(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) EndsWithIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r groupQueryIDString) Mode(value QueryMode) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) ModeIfPresent(value *QueryMode) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Mode(*value)
}

func (r groupQueryIDString) Not(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryIDString) NotIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r groupQueryIDString) HasPrefix(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r groupQueryIDString) HasPrefixIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r groupQueryIDString) HasSuffix(value string) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r groupQueryIDString) HasSuffixIfPresent(value *string) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r groupQueryIDString) Field() groupPrismaFields {
	return groupFieldID
}

// base struct
type groupQueryNameInt struct{}

// Set the required value of Name
func (r groupQueryNameInt) Set(value int) groupWithPrismaNameSetParam {

	return groupWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r groupQueryNameInt) SetIfPresent(value *Int) groupWithPrismaNameSetParam {
	if value == nil {
		return groupWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of Name
func (r groupQueryNameInt) Increment(value int) groupWithPrismaNameSetParam {
	return groupWithPrismaNameSetParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) IncrementIfPresent(value *int) groupWithPrismaNameSetParam {
	if value == nil {
		return groupWithPrismaNameSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of Name
func (r groupQueryNameInt) Decrement(value int) groupWithPrismaNameSetParam {
	return groupWithPrismaNameSetParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) DecrementIfPresent(value *int) groupWithPrismaNameSetParam {
	if value == nil {
		return groupWithPrismaNameSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of Name
func (r groupQueryNameInt) Multiply(value int) groupWithPrismaNameSetParam {
	return groupWithPrismaNameSetParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) MultiplyIfPresent(value *int) groupWithPrismaNameSetParam {
	if value == nil {
		return groupWithPrismaNameSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of Name
func (r groupQueryNameInt) Divide(value int) groupWithPrismaNameSetParam {
	return groupWithPrismaNameSetParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) DivideIfPresent(value *int) groupWithPrismaNameSetParam {
	if value == nil {
		return groupWithPrismaNameSetParam{}
	}
	return r.Divide(*value)
}

func (r groupQueryNameInt) Equals(value int) groupWithPrismaNameEqualsUniqueParam {

	return groupWithPrismaNameEqualsUniqueParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) EqualsIfPresent(value *int) groupWithPrismaNameEqualsUniqueParam {
	if value == nil {
		return groupWithPrismaNameEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r groupQueryNameInt) Order(direction SortOrder) groupDefaultParam {
	return groupDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r groupQueryNameInt) Cursor(cursor int) groupCursorParam {
	return groupCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r groupQueryNameInt) In(value []int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) InIfPresent(value []int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.In(value)
}

func (r groupQueryNameInt) NotIn(value []int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) NotInIfPresent(value []int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.NotIn(value)
}

func (r groupQueryNameInt) Lt(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) LtIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Lt(*value)
}

func (r groupQueryNameInt) Lte(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) LteIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Lte(*value)
}

func (r groupQueryNameInt) Gt(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) GtIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Gt(*value)
}

func (r groupQueryNameInt) Gte(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) GteIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Gte(*value)
}

func (r groupQueryNameInt) Not(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r groupQueryNameInt) NotIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r groupQueryNameInt) LT(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r groupQueryNameInt) LTIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r groupQueryNameInt) LTE(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r groupQueryNameInt) LTEIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r groupQueryNameInt) GT(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r groupQueryNameInt) GTIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r groupQueryNameInt) GTE(value int) groupParamUnique {
	return groupParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r groupQueryNameInt) GTEIfPresent(value *int) groupParamUnique {
	if value == nil {
		return groupParamUnique{}
	}
	return r.GTE(*value)
}

func (r groupQueryNameInt) Field() groupPrismaFields {
	return groupFieldName
}

// base struct
type groupQueryMembersUser struct{}

type groupQueryMembersRelations struct{}

// Group -> Members
//
// @relation
// @required
func (groupQueryMembersRelations) Some(
	params ...UserWhereParam,
) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Group -> Members
//
// @relation
// @required
func (groupQueryMembersRelations) Every(
	params ...UserWhereParam,
) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Group -> Members
//
// @relation
// @required
func (groupQueryMembersRelations) None(
	params ...UserWhereParam,
) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (groupQueryMembersRelations) Fetch(

	params ...UserWhereParam,

) groupToMembersFindMany {
	var v groupToMembersFindMany

	v.query.Operation = "query"
	v.query.Method = "members"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r groupQueryMembersRelations) Link(
	params ...UserWhereParam,
) groupSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupSetParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r groupQueryMembersRelations) Unlink(
	params ...UserWhereParam,
) groupSetParam {
	var v groupSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = groupSetParam{
		data: builder.Field{
			Name: "members",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r groupQueryMembersUser) Field() groupPrismaFields {
	return groupFieldMembers
}

// base struct
type groupQuerySchedulesSchedule struct{}

type groupQuerySchedulesRelations struct{}

// Group -> Schedules
//
// @relation
// @required
func (groupQuerySchedulesRelations) Some(
	params ...ScheduleWhereParam,
) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Group -> Schedules
//
// @relation
// @required
func (groupQuerySchedulesRelations) Every(
	params ...ScheduleWhereParam,
) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Group -> Schedules
//
// @relation
// @required
func (groupQuerySchedulesRelations) None(
	params ...ScheduleWhereParam,
) groupDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupDefaultParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (groupQuerySchedulesRelations) Fetch(

	params ...ScheduleWhereParam,

) groupToSchedulesFindMany {
	var v groupToSchedulesFindMany

	v.query.Operation = "query"
	v.query.Method = "schedules"
	v.query.Outputs = scheduleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r groupQuerySchedulesRelations) Link(
	params ...ScheduleWhereParam,
) groupSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return groupSetParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r groupQuerySchedulesRelations) Unlink(
	params ...ScheduleWhereParam,
) groupSetParam {
	var v groupSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = groupSetParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r groupQuerySchedulesSchedule) Field() groupPrismaFields {
	return groupFieldSchedules
}

// Practicum acts as a namespaces to access query methods for the Practicum model
var Practicum = practicumQuery{}

// practicumQuery exposes query functions for the practicum model
type practicumQuery struct {

	// ID
	//
	// @required
	ID practicumQueryIDInt

	// Title
	//
	// @required
	Title practicumQueryTitleString

	// Description
	//
	// @optional
	Description practicumQueryDescriptionString

	// CreatedAt
	//
	// @required
	CreatedAt practicumQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt practicumQueryUpdatedAtDateTime

	Schedules practicumQuerySchedulesRelations
}

func (practicumQuery) Not(params ...PracticumWhereParam) practicumDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return practicumDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (practicumQuery) Or(params ...PracticumWhereParam) practicumDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return practicumDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (practicumQuery) And(params ...PracticumWhereParam) practicumDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return practicumDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type practicumQueryIDInt struct{}

// Set the required value of ID
func (r practicumQueryIDInt) Set(value int) practicumSetParam {

	return practicumSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r practicumQueryIDInt) SetIfPresent(value *Int) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r practicumQueryIDInt) Increment(value int) practicumSetParam {
	return practicumSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) IncrementIfPresent(value *int) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r practicumQueryIDInt) Decrement(value int) practicumSetParam {
	return practicumSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) DecrementIfPresent(value *int) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r practicumQueryIDInt) Multiply(value int) practicumSetParam {
	return practicumSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) MultiplyIfPresent(value *int) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r practicumQueryIDInt) Divide(value int) practicumSetParam {
	return practicumSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) DivideIfPresent(value *int) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}
	return r.Divide(*value)
}

func (r practicumQueryIDInt) Equals(value int) practicumWithPrismaIDEqualsUniqueParam {

	return practicumWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) EqualsIfPresent(value *int) practicumWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return practicumWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r practicumQueryIDInt) Order(direction SortOrder) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r practicumQueryIDInt) Cursor(cursor int) practicumCursorParam {
	return practicumCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r practicumQueryIDInt) In(value []int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) InIfPresent(value []int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.In(value)
}

func (r practicumQueryIDInt) NotIn(value []int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) NotInIfPresent(value []int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.NotIn(value)
}

func (r practicumQueryIDInt) Lt(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) LtIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.Lt(*value)
}

func (r practicumQueryIDInt) Lte(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) LteIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.Lte(*value)
}

func (r practicumQueryIDInt) Gt(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) GtIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.Gt(*value)
}

func (r practicumQueryIDInt) Gte(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) GteIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.Gte(*value)
}

func (r practicumQueryIDInt) Not(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryIDInt) NotIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r practicumQueryIDInt) LT(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r practicumQueryIDInt) LTIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r practicumQueryIDInt) LTE(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r practicumQueryIDInt) LTEIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r practicumQueryIDInt) GT(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r practicumQueryIDInt) GTIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r practicumQueryIDInt) GTE(value int) practicumParamUnique {
	return practicumParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r practicumQueryIDInt) GTEIfPresent(value *int) practicumParamUnique {
	if value == nil {
		return practicumParamUnique{}
	}
	return r.GTE(*value)
}

func (r practicumQueryIDInt) Field() practicumPrismaFields {
	return practicumFieldID
}

// base struct
type practicumQueryTitleString struct{}

// Set the required value of Title
func (r practicumQueryTitleString) Set(value string) practicumWithPrismaTitleSetParam {

	return practicumWithPrismaTitleSetParam{
		data: builder.Field{
			Name:  "title",
			Value: value,
		},
	}

}

// Set the optional value of Title dynamically
func (r practicumQueryTitleString) SetIfPresent(value *String) practicumWithPrismaTitleSetParam {
	if value == nil {
		return practicumWithPrismaTitleSetParam{}
	}

	return r.Set(*value)
}

func (r practicumQueryTitleString) Equals(value string) practicumWithPrismaTitleEqualsParam {

	return practicumWithPrismaTitleEqualsParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) EqualsIfPresent(value *string) practicumWithPrismaTitleEqualsParam {
	if value == nil {
		return practicumWithPrismaTitleEqualsParam{}
	}
	return r.Equals(*value)
}

func (r practicumQueryTitleString) Order(direction SortOrder) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name:  "title",
			Value: direction,
		},
	}
}

func (r practicumQueryTitleString) Cursor(cursor string) practicumCursorParam {
	return practicumCursorParam{
		data: builder.Field{
			Name:  "title",
			Value: cursor,
		},
	}
}

func (r practicumQueryTitleString) In(value []string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) InIfPresent(value []string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.In(value)
}

func (r practicumQueryTitleString) NotIn(value []string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) NotInIfPresent(value []string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.NotIn(value)
}

func (r practicumQueryTitleString) Lt(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) LtIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lt(*value)
}

func (r practicumQueryTitleString) Lte(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) LteIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lte(*value)
}

func (r practicumQueryTitleString) Gt(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) GtIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gt(*value)
}

func (r practicumQueryTitleString) Gte(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) GteIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gte(*value)
}

func (r practicumQueryTitleString) Contains(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) ContainsIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Contains(*value)
}

func (r practicumQueryTitleString) StartsWith(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) StartsWithIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r practicumQueryTitleString) EndsWith(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) EndsWithIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r practicumQueryTitleString) Mode(value QueryMode) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) ModeIfPresent(value *QueryMode) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Mode(*value)
}

func (r practicumQueryTitleString) Not(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryTitleString) NotIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r practicumQueryTitleString) HasPrefix(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r practicumQueryTitleString) HasPrefixIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r practicumQueryTitleString) HasSuffix(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r practicumQueryTitleString) HasSuffixIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r practicumQueryTitleString) Field() practicumPrismaFields {
	return practicumFieldTitle
}

// base struct
type practicumQueryDescriptionString struct{}

// Set the optional value of Description
func (r practicumQueryDescriptionString) Set(value string) practicumSetParam {

	return practicumSetParam{
		data: builder.Field{
			Name:  "description",
			Value: value,
		},
	}

}

// Set the optional value of Description dynamically
func (r practicumQueryDescriptionString) SetIfPresent(value *String) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Description dynamically
func (r practicumQueryDescriptionString) SetOptional(value *String) practicumSetParam {
	if value == nil {

		var v *string
		return practicumSetParam{
			data: builder.Field{
				Name:  "description",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r practicumQueryDescriptionString) Equals(value string) practicumWithPrismaDescriptionEqualsParam {

	return practicumWithPrismaDescriptionEqualsParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) EqualsIfPresent(value *string) practicumWithPrismaDescriptionEqualsParam {
	if value == nil {
		return practicumWithPrismaDescriptionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r practicumQueryDescriptionString) EqualsOptional(value *String) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) IsNull() practicumDefaultParam {
	var str *string = nil
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) Order(direction SortOrder) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name:  "description",
			Value: direction,
		},
	}
}

func (r practicumQueryDescriptionString) Cursor(cursor string) practicumCursorParam {
	return practicumCursorParam{
		data: builder.Field{
			Name:  "description",
			Value: cursor,
		},
	}
}

func (r practicumQueryDescriptionString) In(value []string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) InIfPresent(value []string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.In(value)
}

func (r practicumQueryDescriptionString) NotIn(value []string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) NotInIfPresent(value []string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.NotIn(value)
}

func (r practicumQueryDescriptionString) Lt(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) LtIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lt(*value)
}

func (r practicumQueryDescriptionString) Lte(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) LteIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lte(*value)
}

func (r practicumQueryDescriptionString) Gt(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) GtIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gt(*value)
}

func (r practicumQueryDescriptionString) Gte(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) GteIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gte(*value)
}

func (r practicumQueryDescriptionString) Contains(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) ContainsIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Contains(*value)
}

func (r practicumQueryDescriptionString) StartsWith(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) StartsWithIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r practicumQueryDescriptionString) EndsWith(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) EndsWithIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r practicumQueryDescriptionString) Mode(value QueryMode) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) ModeIfPresent(value *QueryMode) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Mode(*value)
}

func (r practicumQueryDescriptionString) Not(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryDescriptionString) NotIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r practicumQueryDescriptionString) HasPrefix(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r practicumQueryDescriptionString) HasPrefixIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r practicumQueryDescriptionString) HasSuffix(value string) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "description",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r practicumQueryDescriptionString) HasSuffixIfPresent(value *string) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r practicumQueryDescriptionString) Field() practicumPrismaFields {
	return practicumFieldDescription
}

// base struct
type practicumQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r practicumQueryCreatedAtDateTime) Set(value DateTime) practicumSetParam {

	return practicumSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r practicumQueryCreatedAtDateTime) SetIfPresent(value *DateTime) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}

	return r.Set(*value)
}

func (r practicumQueryCreatedAtDateTime) Equals(value DateTime) practicumWithPrismaCreatedAtEqualsParam {

	return practicumWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) practicumWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return practicumWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r practicumQueryCreatedAtDateTime) Order(direction SortOrder) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r practicumQueryCreatedAtDateTime) Cursor(cursor DateTime) practicumCursorParam {
	return practicumCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r practicumQueryCreatedAtDateTime) In(value []DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) InIfPresent(value []DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.In(value)
}

func (r practicumQueryCreatedAtDateTime) NotIn(value []DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.NotIn(value)
}

func (r practicumQueryCreatedAtDateTime) Lt(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) LtIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lt(*value)
}

func (r practicumQueryCreatedAtDateTime) Lte(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) LteIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lte(*value)
}

func (r practicumQueryCreatedAtDateTime) Gt(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) GtIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gt(*value)
}

func (r practicumQueryCreatedAtDateTime) Gte(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) GteIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gte(*value)
}

func (r practicumQueryCreatedAtDateTime) Not(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryCreatedAtDateTime) NotIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r practicumQueryCreatedAtDateTime) Before(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r practicumQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r practicumQueryCreatedAtDateTime) After(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r practicumQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r practicumQueryCreatedAtDateTime) BeforeEquals(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r practicumQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r practicumQueryCreatedAtDateTime) AfterEquals(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r practicumQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r practicumQueryCreatedAtDateTime) Field() practicumPrismaFields {
	return practicumFieldCreatedAt
}

// base struct
type practicumQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r practicumQueryUpdatedAtDateTime) Set(value DateTime) practicumSetParam {

	return practicumSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r practicumQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) practicumSetParam {
	if value == nil {
		return practicumSetParam{}
	}

	return r.Set(*value)
}

func (r practicumQueryUpdatedAtDateTime) Equals(value DateTime) practicumWithPrismaUpdatedAtEqualsParam {

	return practicumWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) practicumWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return practicumWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r practicumQueryUpdatedAtDateTime) Order(direction SortOrder) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) Cursor(cursor DateTime) practicumCursorParam {
	return practicumCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) In(value []DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) InIfPresent(value []DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.In(value)
}

func (r practicumQueryUpdatedAtDateTime) NotIn(value []DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.NotIn(value)
}

func (r practicumQueryUpdatedAtDateTime) Lt(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lt(*value)
}

func (r practicumQueryUpdatedAtDateTime) Lte(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Lte(*value)
}

func (r practicumQueryUpdatedAtDateTime) Gt(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gt(*value)
}

func (r practicumQueryUpdatedAtDateTime) Gte(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Gte(*value)
}

func (r practicumQueryUpdatedAtDateTime) Not(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r practicumQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r practicumQueryUpdatedAtDateTime) Before(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r practicumQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r practicumQueryUpdatedAtDateTime) After(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r practicumQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r practicumQueryUpdatedAtDateTime) BeforeEquals(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r practicumQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r practicumQueryUpdatedAtDateTime) AfterEquals(value DateTime) practicumDefaultParam {
	return practicumDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r practicumQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) practicumDefaultParam {
	if value == nil {
		return practicumDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r practicumQueryUpdatedAtDateTime) Field() practicumPrismaFields {
	return practicumFieldUpdatedAt
}

// base struct
type practicumQuerySchedulesSchedule struct{}

type practicumQuerySchedulesRelations struct{}

// Practicum -> Schedules
//
// @relation
// @required
func (practicumQuerySchedulesRelations) Some(
	params ...ScheduleWhereParam,
) practicumDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return practicumDefaultParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Practicum -> Schedules
//
// @relation
// @required
func (practicumQuerySchedulesRelations) Every(
	params ...ScheduleWhereParam,
) practicumDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return practicumDefaultParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Practicum -> Schedules
//
// @relation
// @required
func (practicumQuerySchedulesRelations) None(
	params ...ScheduleWhereParam,
) practicumDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return practicumDefaultParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (practicumQuerySchedulesRelations) Fetch(

	params ...ScheduleWhereParam,

) practicumToSchedulesFindMany {
	var v practicumToSchedulesFindMany

	v.query.Operation = "query"
	v.query.Method = "schedules"
	v.query.Outputs = scheduleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r practicumQuerySchedulesRelations) Link(
	params ...ScheduleWhereParam,
) practicumSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return practicumSetParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r practicumQuerySchedulesRelations) Unlink(
	params ...ScheduleWhereParam,
) practicumSetParam {
	var v practicumSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = practicumSetParam{
		data: builder.Field{
			Name: "schedules",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r practicumQuerySchedulesSchedule) Field() practicumPrismaFields {
	return practicumFieldSchedules
}

// Schedule acts as a namespaces to access query methods for the Schedule model
var Schedule = scheduleQuery{}

// scheduleQuery exposes query functions for the schedule model
type scheduleQuery struct {

	// ID
	//
	// @required
	ID scheduleQueryIDInt

	// PracticumID
	//
	// @required
	PracticumID scheduleQueryPracticumIDInt

	// GroupID
	//
	// @required
	GroupID scheduleQueryGroupIDString

	// AssistantID
	//
	// @required
	AssistantID scheduleQueryAssistantIDString

	// Date
	//
	// @optional
	Date scheduleQueryDateDateTime

	// StartTime
	//
	// @optional
	StartTime scheduleQueryStartTimeDateTime

	// Status
	//
	// @required
	Status scheduleQueryStatusStatus

	Practicum scheduleQueryPracticumRelations

	Group scheduleQueryGroupRelations

	Assistant scheduleQueryAssistantRelations

	AttendanceCodes scheduleQueryAttendanceCodesRelations

	Grades scheduleQueryGradesRelations
}

func (scheduleQuery) Not(params ...ScheduleWhereParam) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (scheduleQuery) Or(params ...ScheduleWhereParam) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (scheduleQuery) And(params ...ScheduleWhereParam) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (scheduleQuery) GroupIDStartTime(
	_groupID ScheduleWithPrismaGroupIDWhereParam,

	_startTime ScheduleWithPrismaStartTimeWhereParam,
) ScheduleEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _groupID.field())
	fields = append(fields, _startTime.field())

	return scheduleEqualsUniqueParam{
		data: builder.Field{
			Name:   "groupId_startTime",
			Fields: builder.TransformEquals(fields),
		},
	}
}

func (scheduleQuery) PracticumIDGroupID(
	_practicumID ScheduleWithPrismaPracticumIDWhereParam,

	_groupID ScheduleWithPrismaGroupIDWhereParam,
) ScheduleEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _practicumID.field())
	fields = append(fields, _groupID.field())

	return scheduleEqualsUniqueParam{
		data: builder.Field{
			Name:   "practicumId_groupId",
			Fields: builder.TransformEquals(fields),
		},
	}
}

func (scheduleQuery) PracticumIDAssistantID(
	_practicumID ScheduleWithPrismaPracticumIDWhereParam,

	_assistantID ScheduleWithPrismaAssistantIDWhereParam,
) ScheduleEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _practicumID.field())
	fields = append(fields, _assistantID.field())

	return scheduleEqualsUniqueParam{
		data: builder.Field{
			Name:   "practicumId_assistantId",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type scheduleQueryIDInt struct{}

// Set the required value of ID
func (r scheduleQueryIDInt) Set(value int) scheduleSetParam {

	return scheduleSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r scheduleQueryIDInt) SetIfPresent(value *Int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r scheduleQueryIDInt) Increment(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) IncrementIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r scheduleQueryIDInt) Decrement(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) DecrementIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r scheduleQueryIDInt) Multiply(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) MultiplyIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r scheduleQueryIDInt) Divide(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) DivideIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Divide(*value)
}

func (r scheduleQueryIDInt) Equals(value int) scheduleWithPrismaIDEqualsUniqueParam {

	return scheduleWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) EqualsIfPresent(value *int) scheduleWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return scheduleWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r scheduleQueryIDInt) Order(direction SortOrder) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r scheduleQueryIDInt) Cursor(cursor int) scheduleCursorParam {
	return scheduleCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r scheduleQueryIDInt) In(value []int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) InIfPresent(value []int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.In(value)
}

func (r scheduleQueryIDInt) NotIn(value []int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) NotInIfPresent(value []int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.NotIn(value)
}

func (r scheduleQueryIDInt) Lt(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) LtIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.Lt(*value)
}

func (r scheduleQueryIDInt) Lte(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) LteIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.Lte(*value)
}

func (r scheduleQueryIDInt) Gt(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) GtIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.Gt(*value)
}

func (r scheduleQueryIDInt) Gte(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) GteIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.Gte(*value)
}

func (r scheduleQueryIDInt) Not(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryIDInt) NotIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r scheduleQueryIDInt) LT(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r scheduleQueryIDInt) LTIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r scheduleQueryIDInt) LTE(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r scheduleQueryIDInt) LTEIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r scheduleQueryIDInt) GT(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r scheduleQueryIDInt) GTIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r scheduleQueryIDInt) GTE(value int) scheduleParamUnique {
	return scheduleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r scheduleQueryIDInt) GTEIfPresent(value *int) scheduleParamUnique {
	if value == nil {
		return scheduleParamUnique{}
	}
	return r.GTE(*value)
}

func (r scheduleQueryIDInt) Field() schedulePrismaFields {
	return scheduleFieldID
}

// base struct
type scheduleQueryPracticumIDInt struct{}

// Set the required value of PracticumID
func (r scheduleQueryPracticumIDInt) Set(value int) scheduleSetParam {

	return scheduleSetParam{
		data: builder.Field{
			Name:  "practicumId",
			Value: value,
		},
	}

}

// Set the optional value of PracticumID dynamically
func (r scheduleQueryPracticumIDInt) SetIfPresent(value *Int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of PracticumID
func (r scheduleQueryPracticumIDInt) Increment(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) IncrementIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of PracticumID
func (r scheduleQueryPracticumIDInt) Decrement(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) DecrementIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of PracticumID
func (r scheduleQueryPracticumIDInt) Multiply(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) MultiplyIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of PracticumID
func (r scheduleQueryPracticumIDInt) Divide(value int) scheduleSetParam {
	return scheduleSetParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) DivideIfPresent(value *int) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}
	return r.Divide(*value)
}

func (r scheduleQueryPracticumIDInt) Equals(value int) scheduleWithPrismaPracticumIDEqualsParam {

	return scheduleWithPrismaPracticumIDEqualsParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) EqualsIfPresent(value *int) scheduleWithPrismaPracticumIDEqualsParam {
	if value == nil {
		return scheduleWithPrismaPracticumIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r scheduleQueryPracticumIDInt) Order(direction SortOrder) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name:  "practicumId",
			Value: direction,
		},
	}
}

func (r scheduleQueryPracticumIDInt) Cursor(cursor int) scheduleCursorParam {
	return scheduleCursorParam{
		data: builder.Field{
			Name:  "practicumId",
			Value: cursor,
		},
	}
}

func (r scheduleQueryPracticumIDInt) In(value []int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) InIfPresent(value []int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.In(value)
}

func (r scheduleQueryPracticumIDInt) NotIn(value []int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) NotInIfPresent(value []int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r scheduleQueryPracticumIDInt) Lt(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) LtIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r scheduleQueryPracticumIDInt) Lte(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) LteIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r scheduleQueryPracticumIDInt) Gt(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) GtIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r scheduleQueryPracticumIDInt) Gte(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) GteIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r scheduleQueryPracticumIDInt) Not(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryPracticumIDInt) NotIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r scheduleQueryPracticumIDInt) LT(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r scheduleQueryPracticumIDInt) LTIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r scheduleQueryPracticumIDInt) LTE(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r scheduleQueryPracticumIDInt) LTEIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r scheduleQueryPracticumIDInt) GT(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r scheduleQueryPracticumIDInt) GTIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r scheduleQueryPracticumIDInt) GTE(value int) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicumId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r scheduleQueryPracticumIDInt) GTEIfPresent(value *int) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.GTE(*value)
}

func (r scheduleQueryPracticumIDInt) Field() schedulePrismaFields {
	return scheduleFieldPracticumID
}

// base struct
type scheduleQueryGroupIDString struct{}

// Set the required value of GroupID
func (r scheduleQueryGroupIDString) Set(value string) scheduleSetParam {

	return scheduleSetParam{
		data: builder.Field{
			Name:  "groupId",
			Value: value,
		},
	}

}

// Set the optional value of GroupID dynamically
func (r scheduleQueryGroupIDString) SetIfPresent(value *String) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}

	return r.Set(*value)
}

func (r scheduleQueryGroupIDString) Equals(value string) scheduleWithPrismaGroupIDEqualsParam {

	return scheduleWithPrismaGroupIDEqualsParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) EqualsIfPresent(value *string) scheduleWithPrismaGroupIDEqualsParam {
	if value == nil {
		return scheduleWithPrismaGroupIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r scheduleQueryGroupIDString) Order(direction SortOrder) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name:  "groupId",
			Value: direction,
		},
	}
}

func (r scheduleQueryGroupIDString) Cursor(cursor string) scheduleCursorParam {
	return scheduleCursorParam{
		data: builder.Field{
			Name:  "groupId",
			Value: cursor,
		},
	}
}

func (r scheduleQueryGroupIDString) In(value []string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) InIfPresent(value []string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.In(value)
}

func (r scheduleQueryGroupIDString) NotIn(value []string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) NotInIfPresent(value []string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r scheduleQueryGroupIDString) Lt(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) LtIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r scheduleQueryGroupIDString) Lte(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) LteIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r scheduleQueryGroupIDString) Gt(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) GtIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r scheduleQueryGroupIDString) Gte(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) GteIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r scheduleQueryGroupIDString) Contains(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) ContainsIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Contains(*value)
}

func (r scheduleQueryGroupIDString) StartsWith(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) StartsWithIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r scheduleQueryGroupIDString) EndsWith(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) EndsWithIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r scheduleQueryGroupIDString) Mode(value QueryMode) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) ModeIfPresent(value *QueryMode) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Mode(*value)
}

func (r scheduleQueryGroupIDString) Not(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryGroupIDString) NotIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r scheduleQueryGroupIDString) HasPrefix(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r scheduleQueryGroupIDString) HasPrefixIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r scheduleQueryGroupIDString) HasSuffix(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "groupId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r scheduleQueryGroupIDString) HasSuffixIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r scheduleQueryGroupIDString) Field() schedulePrismaFields {
	return scheduleFieldGroupID
}

// base struct
type scheduleQueryAssistantIDString struct{}

// Set the required value of AssistantID
func (r scheduleQueryAssistantIDString) Set(value string) scheduleSetParam {

	return scheduleSetParam{
		data: builder.Field{
			Name:  "assistantId",
			Value: value,
		},
	}

}

// Set the optional value of AssistantID dynamically
func (r scheduleQueryAssistantIDString) SetIfPresent(value *String) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}

	return r.Set(*value)
}

func (r scheduleQueryAssistantIDString) Equals(value string) scheduleWithPrismaAssistantIDEqualsParam {

	return scheduleWithPrismaAssistantIDEqualsParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) EqualsIfPresent(value *string) scheduleWithPrismaAssistantIDEqualsParam {
	if value == nil {
		return scheduleWithPrismaAssistantIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r scheduleQueryAssistantIDString) Order(direction SortOrder) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name:  "assistantId",
			Value: direction,
		},
	}
}

func (r scheduleQueryAssistantIDString) Cursor(cursor string) scheduleCursorParam {
	return scheduleCursorParam{
		data: builder.Field{
			Name:  "assistantId",
			Value: cursor,
		},
	}
}

func (r scheduleQueryAssistantIDString) In(value []string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) InIfPresent(value []string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.In(value)
}

func (r scheduleQueryAssistantIDString) NotIn(value []string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) NotInIfPresent(value []string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r scheduleQueryAssistantIDString) Lt(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) LtIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r scheduleQueryAssistantIDString) Lte(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) LteIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r scheduleQueryAssistantIDString) Gt(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) GtIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r scheduleQueryAssistantIDString) Gte(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) GteIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r scheduleQueryAssistantIDString) Contains(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) ContainsIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Contains(*value)
}

func (r scheduleQueryAssistantIDString) StartsWith(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) StartsWithIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r scheduleQueryAssistantIDString) EndsWith(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) EndsWithIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r scheduleQueryAssistantIDString) Mode(value QueryMode) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) ModeIfPresent(value *QueryMode) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Mode(*value)
}

func (r scheduleQueryAssistantIDString) Not(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryAssistantIDString) NotIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r scheduleQueryAssistantIDString) HasPrefix(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r scheduleQueryAssistantIDString) HasPrefixIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r scheduleQueryAssistantIDString) HasSuffix(value string) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistantId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r scheduleQueryAssistantIDString) HasSuffixIfPresent(value *string) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r scheduleQueryAssistantIDString) Field() schedulePrismaFields {
	return scheduleFieldAssistantID
}

// base struct
type scheduleQueryDateDateTime struct{}

// Set the optional value of Date
func (r scheduleQueryDateDateTime) Set(value DateTime) scheduleSetParam {

	return scheduleSetParam{
		data: builder.Field{
			Name:  "date",
			Value: value,
		},
	}

}

// Set the optional value of Date dynamically
func (r scheduleQueryDateDateTime) SetIfPresent(value *DateTime) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Date dynamically
func (r scheduleQueryDateDateTime) SetOptional(value *DateTime) scheduleSetParam {
	if value == nil {

		var v *DateTime
		return scheduleSetParam{
			data: builder.Field{
				Name:  "date",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r scheduleQueryDateDateTime) Equals(value DateTime) scheduleWithPrismaDateEqualsParam {

	return scheduleWithPrismaDateEqualsParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) EqualsIfPresent(value *DateTime) scheduleWithPrismaDateEqualsParam {
	if value == nil {
		return scheduleWithPrismaDateEqualsParam{}
	}
	return r.Equals(*value)
}

func (r scheduleQueryDateDateTime) EqualsOptional(value *DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) IsNull() scheduleDefaultParam {
	var str *string = nil
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) Order(direction SortOrder) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name:  "date",
			Value: direction,
		},
	}
}

func (r scheduleQueryDateDateTime) Cursor(cursor DateTime) scheduleCursorParam {
	return scheduleCursorParam{
		data: builder.Field{
			Name:  "date",
			Value: cursor,
		},
	}
}

func (r scheduleQueryDateDateTime) In(value []DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) InIfPresent(value []DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.In(value)
}

func (r scheduleQueryDateDateTime) NotIn(value []DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) NotInIfPresent(value []DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r scheduleQueryDateDateTime) Lt(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) LtIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r scheduleQueryDateDateTime) Lte(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) LteIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r scheduleQueryDateDateTime) Gt(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) GtIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r scheduleQueryDateDateTime) Gte(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) GteIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r scheduleQueryDateDateTime) Not(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryDateDateTime) NotIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r scheduleQueryDateDateTime) Before(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r scheduleQueryDateDateTime) BeforeIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r scheduleQueryDateDateTime) After(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r scheduleQueryDateDateTime) AfterIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r scheduleQueryDateDateTime) BeforeEquals(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r scheduleQueryDateDateTime) BeforeEqualsIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r scheduleQueryDateDateTime) AfterEquals(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r scheduleQueryDateDateTime) AfterEqualsIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r scheduleQueryDateDateTime) Field() schedulePrismaFields {
	return scheduleFieldDate
}

// base struct
type scheduleQueryStartTimeDateTime struct{}

// Set the optional value of StartTime
func (r scheduleQueryStartTimeDateTime) Set(value DateTime) scheduleSetParam {

	return scheduleSetParam{
		data: builder.Field{
			Name:  "startTime",
			Value: value,
		},
	}

}

// Set the optional value of StartTime dynamically
func (r scheduleQueryStartTimeDateTime) SetIfPresent(value *DateTime) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of StartTime dynamically
func (r scheduleQueryStartTimeDateTime) SetOptional(value *DateTime) scheduleSetParam {
	if value == nil {

		var v *DateTime
		return scheduleSetParam{
			data: builder.Field{
				Name:  "startTime",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r scheduleQueryStartTimeDateTime) Equals(value DateTime) scheduleWithPrismaStartTimeEqualsParam {

	return scheduleWithPrismaStartTimeEqualsParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) EqualsIfPresent(value *DateTime) scheduleWithPrismaStartTimeEqualsParam {
	if value == nil {
		return scheduleWithPrismaStartTimeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r scheduleQueryStartTimeDateTime) EqualsOptional(value *DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) IsNull() scheduleDefaultParam {
	var str *string = nil
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) Order(direction SortOrder) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name:  "startTime",
			Value: direction,
		},
	}
}

func (r scheduleQueryStartTimeDateTime) Cursor(cursor DateTime) scheduleCursorParam {
	return scheduleCursorParam{
		data: builder.Field{
			Name:  "startTime",
			Value: cursor,
		},
	}
}

func (r scheduleQueryStartTimeDateTime) In(value []DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) InIfPresent(value []DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.In(value)
}

func (r scheduleQueryStartTimeDateTime) NotIn(value []DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) NotInIfPresent(value []DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r scheduleQueryStartTimeDateTime) Lt(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) LtIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r scheduleQueryStartTimeDateTime) Lte(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) LteIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r scheduleQueryStartTimeDateTime) Gt(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) GtIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r scheduleQueryStartTimeDateTime) Gte(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) GteIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r scheduleQueryStartTimeDateTime) Not(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStartTimeDateTime) NotIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r scheduleQueryStartTimeDateTime) Before(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r scheduleQueryStartTimeDateTime) BeforeIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r scheduleQueryStartTimeDateTime) After(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r scheduleQueryStartTimeDateTime) AfterIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r scheduleQueryStartTimeDateTime) BeforeEquals(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r scheduleQueryStartTimeDateTime) BeforeEqualsIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r scheduleQueryStartTimeDateTime) AfterEquals(value DateTime) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "startTime",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r scheduleQueryStartTimeDateTime) AfterEqualsIfPresent(value *DateTime) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r scheduleQueryStartTimeDateTime) Field() schedulePrismaFields {
	return scheduleFieldStartTime
}

// base struct
type scheduleQueryStatusStatus struct{}

// Set the required value of Status
func (r scheduleQueryStatusStatus) Set(value Status) scheduleSetParam {

	return scheduleSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r scheduleQueryStatusStatus) SetIfPresent(value *Status) scheduleSetParam {
	if value == nil {
		return scheduleSetParam{}
	}

	return r.Set(*value)
}

func (r scheduleQueryStatusStatus) Equals(value Status) scheduleWithPrismaStatusEqualsParam {

	return scheduleWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStatusStatus) EqualsIfPresent(value *Status) scheduleWithPrismaStatusEqualsParam {
	if value == nil {
		return scheduleWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r scheduleQueryStatusStatus) Order(direction SortOrder) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r scheduleQueryStatusStatus) Cursor(cursor Status) scheduleCursorParam {
	return scheduleCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r scheduleQueryStatusStatus) In(value []Status) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStatusStatus) InIfPresent(value []Status) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.In(value)
}

func (r scheduleQueryStatusStatus) NotIn(value []Status) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStatusStatus) NotInIfPresent(value []Status) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r scheduleQueryStatusStatus) Not(value Status) scheduleDefaultParam {
	return scheduleDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r scheduleQueryStatusStatus) NotIfPresent(value *Status) scheduleDefaultParam {
	if value == nil {
		return scheduleDefaultParam{}
	}
	return r.Not(*value)
}

func (r scheduleQueryStatusStatus) Field() schedulePrismaFields {
	return scheduleFieldStatus
}

// base struct
type scheduleQueryPracticumPracticum struct{}

type scheduleQueryPracticumRelations struct{}

// Schedule -> Practicum
//
// @relation
// @required
func (scheduleQueryPracticumRelations) Where(
	params ...PracticumWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "practicum",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (scheduleQueryPracticumRelations) Fetch() scheduleToPracticumFindUnique {
	var v scheduleToPracticumFindUnique

	v.query.Operation = "query"
	v.query.Method = "practicum"
	v.query.Outputs = practicumOutput

	return v
}

func (r scheduleQueryPracticumRelations) Link(
	params PracticumWhereParam,
) scheduleWithPrismaPracticumSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return scheduleWithPrismaPracticumSetParam{}
	}

	fields = append(fields, f)

	return scheduleWithPrismaPracticumSetParam{
		data: builder.Field{
			Name: "practicum",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r scheduleQueryPracticumRelations) Unlink() scheduleWithPrismaPracticumSetParam {
	var v scheduleWithPrismaPracticumSetParam

	v = scheduleWithPrismaPracticumSetParam{
		data: builder.Field{
			Name: "practicum",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r scheduleQueryPracticumPracticum) Field() schedulePrismaFields {
	return scheduleFieldPracticum
}

// base struct
type scheduleQueryGroupGroup struct{}

type scheduleQueryGroupRelations struct{}

// Schedule -> Group
//
// @relation
// @required
func (scheduleQueryGroupRelations) Where(
	params ...GroupWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "group",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (scheduleQueryGroupRelations) Fetch() scheduleToGroupFindUnique {
	var v scheduleToGroupFindUnique

	v.query.Operation = "query"
	v.query.Method = "group"
	v.query.Outputs = groupOutput

	return v
}

func (r scheduleQueryGroupRelations) Link(
	params GroupWhereParam,
) scheduleWithPrismaGroupSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return scheduleWithPrismaGroupSetParam{}
	}

	fields = append(fields, f)

	return scheduleWithPrismaGroupSetParam{
		data: builder.Field{
			Name: "group",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r scheduleQueryGroupRelations) Unlink() scheduleWithPrismaGroupSetParam {
	var v scheduleWithPrismaGroupSetParam

	v = scheduleWithPrismaGroupSetParam{
		data: builder.Field{
			Name: "group",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r scheduleQueryGroupGroup) Field() schedulePrismaFields {
	return scheduleFieldGroup
}

// base struct
type scheduleQueryAssistantUser struct{}

type scheduleQueryAssistantRelations struct{}

// Schedule -> Assistant
//
// @relation
// @required
func (scheduleQueryAssistantRelations) Where(
	params ...UserWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "assistant",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (scheduleQueryAssistantRelations) Fetch() scheduleToAssistantFindUnique {
	var v scheduleToAssistantFindUnique

	v.query.Operation = "query"
	v.query.Method = "assistant"
	v.query.Outputs = userOutput

	return v
}

func (r scheduleQueryAssistantRelations) Link(
	params UserWhereParam,
) scheduleWithPrismaAssistantSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return scheduleWithPrismaAssistantSetParam{}
	}

	fields = append(fields, f)

	return scheduleWithPrismaAssistantSetParam{
		data: builder.Field{
			Name: "assistant",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r scheduleQueryAssistantRelations) Unlink() scheduleWithPrismaAssistantSetParam {
	var v scheduleWithPrismaAssistantSetParam

	v = scheduleWithPrismaAssistantSetParam{
		data: builder.Field{
			Name: "assistant",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r scheduleQueryAssistantUser) Field() schedulePrismaFields {
	return scheduleFieldAssistant
}

// base struct
type scheduleQueryAttendanceCodesAttendanceCode struct{}

type scheduleQueryAttendanceCodesRelations struct{}

// Schedule -> AttendanceCodes
//
// @relation
// @required
func (scheduleQueryAttendanceCodesRelations) Some(
	params ...AttendanceCodeWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "attendanceCodes",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Schedule -> AttendanceCodes
//
// @relation
// @required
func (scheduleQueryAttendanceCodesRelations) Every(
	params ...AttendanceCodeWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "attendanceCodes",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Schedule -> AttendanceCodes
//
// @relation
// @required
func (scheduleQueryAttendanceCodesRelations) None(
	params ...AttendanceCodeWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "attendanceCodes",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (scheduleQueryAttendanceCodesRelations) Fetch(

	params ...AttendanceCodeWhereParam,

) scheduleToAttendanceCodesFindMany {
	var v scheduleToAttendanceCodesFindMany

	v.query.Operation = "query"
	v.query.Method = "attendanceCodes"
	v.query.Outputs = attendanceCodeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r scheduleQueryAttendanceCodesRelations) Link(
	params ...AttendanceCodeWhereParam,
) scheduleSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleSetParam{
		data: builder.Field{
			Name: "attendanceCodes",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r scheduleQueryAttendanceCodesRelations) Unlink(
	params ...AttendanceCodeWhereParam,
) scheduleSetParam {
	var v scheduleSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = scheduleSetParam{
		data: builder.Field{
			Name: "attendanceCodes",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r scheduleQueryAttendanceCodesAttendanceCode) Field() schedulePrismaFields {
	return scheduleFieldAttendanceCodes
}

// base struct
type scheduleQueryGradesGrade struct{}

type scheduleQueryGradesRelations struct{}

// Schedule -> Grades
//
// @relation
// @required
func (scheduleQueryGradesRelations) Some(
	params ...GradeWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "grades",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Schedule -> Grades
//
// @relation
// @required
func (scheduleQueryGradesRelations) Every(
	params ...GradeWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "grades",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Schedule -> Grades
//
// @relation
// @required
func (scheduleQueryGradesRelations) None(
	params ...GradeWhereParam,
) scheduleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleDefaultParam{
		data: builder.Field{
			Name: "grades",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (scheduleQueryGradesRelations) Fetch(

	params ...GradeWhereParam,

) scheduleToGradesFindMany {
	var v scheduleToGradesFindMany

	v.query.Operation = "query"
	v.query.Method = "grades"
	v.query.Outputs = gradeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r scheduleQueryGradesRelations) Link(
	params ...GradeWhereParam,
) scheduleSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return scheduleSetParam{
		data: builder.Field{
			Name: "grades",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r scheduleQueryGradesRelations) Unlink(
	params ...GradeWhereParam,
) scheduleSetParam {
	var v scheduleSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = scheduleSetParam{
		data: builder.Field{
			Name: "grades",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r scheduleQueryGradesGrade) Field() schedulePrismaFields {
	return scheduleFieldGrades
}

// Grade acts as a namespaces to access query methods for the Grade model
var Grade = gradeQuery{}

// gradeQuery exposes query functions for the grade model
type gradeQuery struct {

	// ID
	//
	// @required
	ID gradeQueryIDInt

	// ScheduleID
	//
	// @required
	ScheduleID gradeQueryScheduleIDInt

	// UserID
	//
	// @required
	UserID gradeQueryUserIDString

	// Prelab
	//
	// @optional
	Prelab gradeQueryPrelabInt

	// Inlab
	//
	// @optional
	Inlab gradeQueryInlabInt

	// Abstract
	//
	// @optional
	Abstract gradeQueryAbstractInt

	// Introduction
	//
	// @optional
	Introduction gradeQueryIntroductionInt

	// Methodology
	//
	// @optional
	Methodology gradeQueryMethodologyInt

	// Discussion
	//
	// @optional
	Discussion gradeQueryDiscussionInt

	// Conclusion
	//
	// @optional
	Conclusion gradeQueryConclusionInt

	// Formatting
	//
	// @optional
	Formatting gradeQueryFormattingInt

	// Feedback
	//
	// @optional
	Feedback gradeQueryFeedbackString

	// GradedBy
	//
	// @required
	GradedBy gradeQueryGradedByString

	// CreatedAt
	//
	// @required
	CreatedAt gradeQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt gradeQueryUpdatedAtDateTime

	Schedule gradeQueryScheduleRelations

	User gradeQueryUserRelations

	Grader gradeQueryGraderRelations
}

func (gradeQuery) Not(params ...GradeWhereParam) gradeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return gradeDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (gradeQuery) Or(params ...GradeWhereParam) gradeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return gradeDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (gradeQuery) And(params ...GradeWhereParam) gradeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return gradeDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type gradeQueryIDInt struct{}

// Set the required value of ID
func (r gradeQueryIDInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r gradeQueryIDInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r gradeQueryIDInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r gradeQueryIDInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r gradeQueryIDInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r gradeQueryIDInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryIDInt) Equals(value int) gradeWithPrismaIDEqualsUniqueParam {

	return gradeWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) EqualsIfPresent(value *int) gradeWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return gradeWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryIDInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r gradeQueryIDInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r gradeQueryIDInt) In(value []int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) InIfPresent(value []int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.In(value)
}

func (r gradeQueryIDInt) NotIn(value []int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) NotInIfPresent(value []int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.NotIn(value)
}

func (r gradeQueryIDInt) Lt(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) LtIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.Lt(*value)
}

func (r gradeQueryIDInt) Lte(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) LteIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.Lte(*value)
}

func (r gradeQueryIDInt) Gt(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) GtIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.Gt(*value)
}

func (r gradeQueryIDInt) Gte(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) GteIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.Gte(*value)
}

func (r gradeQueryIDInt) Not(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIDInt) NotIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryIDInt) LT(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryIDInt) LTIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryIDInt) LTE(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryIDInt) LTEIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryIDInt) GT(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryIDInt) GTIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryIDInt) GTE(value int) gradeParamUnique {
	return gradeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryIDInt) GTEIfPresent(value *int) gradeParamUnique {
	if value == nil {
		return gradeParamUnique{}
	}
	return r.GTE(*value)
}

func (r gradeQueryIDInt) Field() gradePrismaFields {
	return gradeFieldID
}

// base struct
type gradeQueryScheduleIDInt struct{}

// Set the required value of ScheduleID
func (r gradeQueryScheduleIDInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "scheduleId",
			Value: value,
		},
	}

}

// Set the optional value of ScheduleID dynamically
func (r gradeQueryScheduleIDInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ScheduleID
func (r gradeQueryScheduleIDInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ScheduleID
func (r gradeQueryScheduleIDInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ScheduleID
func (r gradeQueryScheduleIDInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ScheduleID
func (r gradeQueryScheduleIDInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryScheduleIDInt) Equals(value int) gradeWithPrismaScheduleIDEqualsParam {

	return gradeWithPrismaScheduleIDEqualsParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) EqualsIfPresent(value *int) gradeWithPrismaScheduleIDEqualsParam {
	if value == nil {
		return gradeWithPrismaScheduleIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryScheduleIDInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "scheduleId",
			Value: direction,
		},
	}
}

func (r gradeQueryScheduleIDInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "scheduleId",
			Value: cursor,
		},
	}
}

func (r gradeQueryScheduleIDInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryScheduleIDInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryScheduleIDInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryScheduleIDInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryScheduleIDInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryScheduleIDInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryScheduleIDInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryScheduleIDInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryScheduleIDInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryScheduleIDInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryScheduleIDInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryScheduleIDInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryScheduleIDInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryScheduleIDInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryScheduleIDInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryScheduleIDInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryScheduleIDInt) Field() gradePrismaFields {
	return gradeFieldScheduleID
}

// base struct
type gradeQueryUserIDString struct{}

// Set the required value of UserID
func (r gradeQueryUserIDString) Set(value string) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r gradeQueryUserIDString) SetIfPresent(value *String) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

func (r gradeQueryUserIDString) Equals(value string) gradeWithPrismaUserIDEqualsParam {

	return gradeWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) EqualsIfPresent(value *string) gradeWithPrismaUserIDEqualsParam {
	if value == nil {
		return gradeWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryUserIDString) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r gradeQueryUserIDString) Cursor(cursor string) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r gradeQueryUserIDString) In(value []string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) InIfPresent(value []string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryUserIDString) NotIn(value []string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) NotInIfPresent(value []string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryUserIDString) Lt(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) LtIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryUserIDString) Lte(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) LteIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryUserIDString) Gt(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) GtIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryUserIDString) Gte(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) GteIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryUserIDString) Contains(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) ContainsIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Contains(*value)
}

func (r gradeQueryUserIDString) StartsWith(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) StartsWithIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r gradeQueryUserIDString) EndsWith(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) EndsWithIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r gradeQueryUserIDString) Mode(value QueryMode) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) ModeIfPresent(value *QueryMode) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Mode(*value)
}

func (r gradeQueryUserIDString) Not(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUserIDString) NotIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r gradeQueryUserIDString) HasPrefix(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r gradeQueryUserIDString) HasPrefixIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r gradeQueryUserIDString) HasSuffix(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r gradeQueryUserIDString) HasSuffixIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r gradeQueryUserIDString) Field() gradePrismaFields {
	return gradeFieldUserID
}

// base struct
type gradeQueryPrelabInt struct{}

// Set the optional value of Prelab
func (r gradeQueryPrelabInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "prelab",
			Value: value,
		},
	}

}

// Set the optional value of Prelab dynamically
func (r gradeQueryPrelabInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Prelab dynamically
func (r gradeQueryPrelabInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "prelab",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Prelab
func (r gradeQueryPrelabInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Prelab
func (r gradeQueryPrelabInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Prelab
func (r gradeQueryPrelabInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Prelab
func (r gradeQueryPrelabInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryPrelabInt) Equals(value int) gradeWithPrismaPrelabEqualsParam {

	return gradeWithPrismaPrelabEqualsParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) EqualsIfPresent(value *int) gradeWithPrismaPrelabEqualsParam {
	if value == nil {
		return gradeWithPrismaPrelabEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryPrelabInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "prelab",
			Value: direction,
		},
	}
}

func (r gradeQueryPrelabInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "prelab",
			Value: cursor,
		},
	}
}

func (r gradeQueryPrelabInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryPrelabInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryPrelabInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryPrelabInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryPrelabInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryPrelabInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryPrelabInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryPrelabInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryPrelabInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryPrelabInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryPrelabInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryPrelabInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryPrelabInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryPrelabInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryPrelabInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "prelab",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryPrelabInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryPrelabInt) Field() gradePrismaFields {
	return gradeFieldPrelab
}

// base struct
type gradeQueryInlabInt struct{}

// Set the optional value of Inlab
func (r gradeQueryInlabInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "inlab",
			Value: value,
		},
	}

}

// Set the optional value of Inlab dynamically
func (r gradeQueryInlabInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Inlab dynamically
func (r gradeQueryInlabInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "inlab",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Inlab
func (r gradeQueryInlabInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Inlab
func (r gradeQueryInlabInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Inlab
func (r gradeQueryInlabInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Inlab
func (r gradeQueryInlabInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryInlabInt) Equals(value int) gradeWithPrismaInlabEqualsParam {

	return gradeWithPrismaInlabEqualsParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) EqualsIfPresent(value *int) gradeWithPrismaInlabEqualsParam {
	if value == nil {
		return gradeWithPrismaInlabEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryInlabInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "inlab",
			Value: direction,
		},
	}
}

func (r gradeQueryInlabInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "inlab",
			Value: cursor,
		},
	}
}

func (r gradeQueryInlabInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryInlabInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryInlabInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryInlabInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryInlabInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryInlabInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryInlabInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryInlabInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryInlabInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryInlabInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryInlabInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryInlabInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryInlabInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryInlabInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryInlabInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "inlab",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryInlabInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryInlabInt) Field() gradePrismaFields {
	return gradeFieldInlab
}

// base struct
type gradeQueryAbstractInt struct{}

// Set the optional value of Abstract
func (r gradeQueryAbstractInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "abstract",
			Value: value,
		},
	}

}

// Set the optional value of Abstract dynamically
func (r gradeQueryAbstractInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Abstract dynamically
func (r gradeQueryAbstractInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "abstract",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Abstract
func (r gradeQueryAbstractInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Abstract
func (r gradeQueryAbstractInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Abstract
func (r gradeQueryAbstractInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Abstract
func (r gradeQueryAbstractInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryAbstractInt) Equals(value int) gradeWithPrismaAbstractEqualsParam {

	return gradeWithPrismaAbstractEqualsParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) EqualsIfPresent(value *int) gradeWithPrismaAbstractEqualsParam {
	if value == nil {
		return gradeWithPrismaAbstractEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryAbstractInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "abstract",
			Value: direction,
		},
	}
}

func (r gradeQueryAbstractInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "abstract",
			Value: cursor,
		},
	}
}

func (r gradeQueryAbstractInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryAbstractInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryAbstractInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryAbstractInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryAbstractInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryAbstractInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryAbstractInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryAbstractInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryAbstractInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryAbstractInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryAbstractInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryAbstractInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryAbstractInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryAbstractInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryAbstractInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "abstract",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryAbstractInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryAbstractInt) Field() gradePrismaFields {
	return gradeFieldAbstract
}

// base struct
type gradeQueryIntroductionInt struct{}

// Set the optional value of Introduction
func (r gradeQueryIntroductionInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "introduction",
			Value: value,
		},
	}

}

// Set the optional value of Introduction dynamically
func (r gradeQueryIntroductionInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Introduction dynamically
func (r gradeQueryIntroductionInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "introduction",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Introduction
func (r gradeQueryIntroductionInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Introduction
func (r gradeQueryIntroductionInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Introduction
func (r gradeQueryIntroductionInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Introduction
func (r gradeQueryIntroductionInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryIntroductionInt) Equals(value int) gradeWithPrismaIntroductionEqualsParam {

	return gradeWithPrismaIntroductionEqualsParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) EqualsIfPresent(value *int) gradeWithPrismaIntroductionEqualsParam {
	if value == nil {
		return gradeWithPrismaIntroductionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryIntroductionInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "introduction",
			Value: direction,
		},
	}
}

func (r gradeQueryIntroductionInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "introduction",
			Value: cursor,
		},
	}
}

func (r gradeQueryIntroductionInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryIntroductionInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryIntroductionInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryIntroductionInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryIntroductionInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryIntroductionInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryIntroductionInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryIntroductionInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryIntroductionInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryIntroductionInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryIntroductionInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryIntroductionInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryIntroductionInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryIntroductionInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryIntroductionInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "introduction",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryIntroductionInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryIntroductionInt) Field() gradePrismaFields {
	return gradeFieldIntroduction
}

// base struct
type gradeQueryMethodologyInt struct{}

// Set the optional value of Methodology
func (r gradeQueryMethodologyInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "methodology",
			Value: value,
		},
	}

}

// Set the optional value of Methodology dynamically
func (r gradeQueryMethodologyInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Methodology dynamically
func (r gradeQueryMethodologyInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "methodology",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Methodology
func (r gradeQueryMethodologyInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Methodology
func (r gradeQueryMethodologyInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Methodology
func (r gradeQueryMethodologyInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Methodology
func (r gradeQueryMethodologyInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryMethodologyInt) Equals(value int) gradeWithPrismaMethodologyEqualsParam {

	return gradeWithPrismaMethodologyEqualsParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) EqualsIfPresent(value *int) gradeWithPrismaMethodologyEqualsParam {
	if value == nil {
		return gradeWithPrismaMethodologyEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryMethodologyInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "methodology",
			Value: direction,
		},
	}
}

func (r gradeQueryMethodologyInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "methodology",
			Value: cursor,
		},
	}
}

func (r gradeQueryMethodologyInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryMethodologyInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryMethodologyInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryMethodologyInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryMethodologyInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryMethodologyInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryMethodologyInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryMethodologyInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryMethodologyInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryMethodologyInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryMethodologyInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryMethodologyInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryMethodologyInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryMethodologyInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryMethodologyInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "methodology",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryMethodologyInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryMethodologyInt) Field() gradePrismaFields {
	return gradeFieldMethodology
}

// base struct
type gradeQueryDiscussionInt struct{}

// Set the optional value of Discussion
func (r gradeQueryDiscussionInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "discussion",
			Value: value,
		},
	}

}

// Set the optional value of Discussion dynamically
func (r gradeQueryDiscussionInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Discussion dynamically
func (r gradeQueryDiscussionInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "discussion",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Discussion
func (r gradeQueryDiscussionInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Discussion
func (r gradeQueryDiscussionInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Discussion
func (r gradeQueryDiscussionInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Discussion
func (r gradeQueryDiscussionInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryDiscussionInt) Equals(value int) gradeWithPrismaDiscussionEqualsParam {

	return gradeWithPrismaDiscussionEqualsParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) EqualsIfPresent(value *int) gradeWithPrismaDiscussionEqualsParam {
	if value == nil {
		return gradeWithPrismaDiscussionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryDiscussionInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "discussion",
			Value: direction,
		},
	}
}

func (r gradeQueryDiscussionInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "discussion",
			Value: cursor,
		},
	}
}

func (r gradeQueryDiscussionInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryDiscussionInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryDiscussionInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryDiscussionInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryDiscussionInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryDiscussionInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryDiscussionInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryDiscussionInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryDiscussionInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryDiscussionInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryDiscussionInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryDiscussionInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryDiscussionInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryDiscussionInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryDiscussionInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "discussion",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryDiscussionInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryDiscussionInt) Field() gradePrismaFields {
	return gradeFieldDiscussion
}

// base struct
type gradeQueryConclusionInt struct{}

// Set the optional value of Conclusion
func (r gradeQueryConclusionInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "conclusion",
			Value: value,
		},
	}

}

// Set the optional value of Conclusion dynamically
func (r gradeQueryConclusionInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Conclusion dynamically
func (r gradeQueryConclusionInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "conclusion",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Conclusion
func (r gradeQueryConclusionInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Conclusion
func (r gradeQueryConclusionInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Conclusion
func (r gradeQueryConclusionInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Conclusion
func (r gradeQueryConclusionInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryConclusionInt) Equals(value int) gradeWithPrismaConclusionEqualsParam {

	return gradeWithPrismaConclusionEqualsParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) EqualsIfPresent(value *int) gradeWithPrismaConclusionEqualsParam {
	if value == nil {
		return gradeWithPrismaConclusionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryConclusionInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "conclusion",
			Value: direction,
		},
	}
}

func (r gradeQueryConclusionInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "conclusion",
			Value: cursor,
		},
	}
}

func (r gradeQueryConclusionInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryConclusionInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryConclusionInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryConclusionInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryConclusionInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryConclusionInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryConclusionInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryConclusionInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryConclusionInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryConclusionInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryConclusionInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryConclusionInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryConclusionInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryConclusionInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryConclusionInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "conclusion",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryConclusionInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryConclusionInt) Field() gradePrismaFields {
	return gradeFieldConclusion
}

// base struct
type gradeQueryFormattingInt struct{}

// Set the optional value of Formatting
func (r gradeQueryFormattingInt) Set(value int) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "formatting",
			Value: value,
		},
	}

}

// Set the optional value of Formatting dynamically
func (r gradeQueryFormattingInt) SetIfPresent(value *Int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Formatting dynamically
func (r gradeQueryFormattingInt) SetOptional(value *Int) gradeSetParam {
	if value == nil {

		var v *int
		return gradeSetParam{
			data: builder.Field{
				Name:  "formatting",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

// Increment the optional value of Formatting
func (r gradeQueryFormattingInt) Increment(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) IncrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the optional value of Formatting
func (r gradeQueryFormattingInt) Decrement(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) DecrementIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the optional value of Formatting
func (r gradeQueryFormattingInt) Multiply(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) MultiplyIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the optional value of Formatting
func (r gradeQueryFormattingInt) Divide(value int) gradeSetParam {
	return gradeSetParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) DivideIfPresent(value *int) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}
	return r.Divide(*value)
}

func (r gradeQueryFormattingInt) Equals(value int) gradeWithPrismaFormattingEqualsParam {

	return gradeWithPrismaFormattingEqualsParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) EqualsIfPresent(value *int) gradeWithPrismaFormattingEqualsParam {
	if value == nil {
		return gradeWithPrismaFormattingEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryFormattingInt) EqualsOptional(value *Int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "formatting",
			Value: direction,
		},
	}
}

func (r gradeQueryFormattingInt) Cursor(cursor int) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "formatting",
			Value: cursor,
		},
	}
}

func (r gradeQueryFormattingInt) In(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) InIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryFormattingInt) NotIn(value []int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) NotInIfPresent(value []int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryFormattingInt) Lt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) LtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryFormattingInt) Lte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) LteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryFormattingInt) Gt(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) GtIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryFormattingInt) Gte(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) GteIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryFormattingInt) Not(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFormattingInt) NotIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryFormattingInt) LT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryFormattingInt) LTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryFormattingInt) LTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryFormattingInt) LTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryFormattingInt) GT(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryFormattingInt) GTIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryFormattingInt) GTE(value int) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "formatting",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryFormattingInt) GTEIfPresent(value *int) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r gradeQueryFormattingInt) Field() gradePrismaFields {
	return gradeFieldFormatting
}

// base struct
type gradeQueryFeedbackString struct{}

// Set the optional value of Feedback
func (r gradeQueryFeedbackString) Set(value string) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "feedback",
			Value: value,
		},
	}

}

// Set the optional value of Feedback dynamically
func (r gradeQueryFeedbackString) SetIfPresent(value *String) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Feedback dynamically
func (r gradeQueryFeedbackString) SetOptional(value *String) gradeSetParam {
	if value == nil {

		var v *string
		return gradeSetParam{
			data: builder.Field{
				Name:  "feedback",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r gradeQueryFeedbackString) Equals(value string) gradeWithPrismaFeedbackEqualsParam {

	return gradeWithPrismaFeedbackEqualsParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) EqualsIfPresent(value *string) gradeWithPrismaFeedbackEqualsParam {
	if value == nil {
		return gradeWithPrismaFeedbackEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryFeedbackString) EqualsOptional(value *String) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) IsNull() gradeDefaultParam {
	var str *string = nil
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "feedback",
			Value: direction,
		},
	}
}

func (r gradeQueryFeedbackString) Cursor(cursor string) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "feedback",
			Value: cursor,
		},
	}
}

func (r gradeQueryFeedbackString) In(value []string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) InIfPresent(value []string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryFeedbackString) NotIn(value []string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) NotInIfPresent(value []string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryFeedbackString) Lt(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) LtIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryFeedbackString) Lte(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) LteIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryFeedbackString) Gt(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) GtIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryFeedbackString) Gte(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) GteIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryFeedbackString) Contains(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) ContainsIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Contains(*value)
}

func (r gradeQueryFeedbackString) StartsWith(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) StartsWithIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r gradeQueryFeedbackString) EndsWith(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) EndsWithIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r gradeQueryFeedbackString) Mode(value QueryMode) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) ModeIfPresent(value *QueryMode) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Mode(*value)
}

func (r gradeQueryFeedbackString) Not(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryFeedbackString) NotIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r gradeQueryFeedbackString) HasPrefix(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r gradeQueryFeedbackString) HasPrefixIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r gradeQueryFeedbackString) HasSuffix(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "feedback",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r gradeQueryFeedbackString) HasSuffixIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r gradeQueryFeedbackString) Field() gradePrismaFields {
	return gradeFieldFeedback
}

// base struct
type gradeQueryGradedByString struct{}

// Set the required value of GradedBy
func (r gradeQueryGradedByString) Set(value string) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "gradedBy",
			Value: value,
		},
	}

}

// Set the optional value of GradedBy dynamically
func (r gradeQueryGradedByString) SetIfPresent(value *String) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

func (r gradeQueryGradedByString) Equals(value string) gradeWithPrismaGradedByEqualsParam {

	return gradeWithPrismaGradedByEqualsParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) EqualsIfPresent(value *string) gradeWithPrismaGradedByEqualsParam {
	if value == nil {
		return gradeWithPrismaGradedByEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryGradedByString) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "gradedBy",
			Value: direction,
		},
	}
}

func (r gradeQueryGradedByString) Cursor(cursor string) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "gradedBy",
			Value: cursor,
		},
	}
}

func (r gradeQueryGradedByString) In(value []string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) InIfPresent(value []string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryGradedByString) NotIn(value []string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) NotInIfPresent(value []string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryGradedByString) Lt(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) LtIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryGradedByString) Lte(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) LteIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryGradedByString) Gt(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) GtIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryGradedByString) Gte(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) GteIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryGradedByString) Contains(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) ContainsIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Contains(*value)
}

func (r gradeQueryGradedByString) StartsWith(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) StartsWithIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r gradeQueryGradedByString) EndsWith(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) EndsWithIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r gradeQueryGradedByString) Mode(value QueryMode) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) ModeIfPresent(value *QueryMode) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Mode(*value)
}

func (r gradeQueryGradedByString) Not(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryGradedByString) NotIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r gradeQueryGradedByString) HasPrefix(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r gradeQueryGradedByString) HasPrefixIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r gradeQueryGradedByString) HasSuffix(value string) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "gradedBy",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r gradeQueryGradedByString) HasSuffixIfPresent(value *string) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r gradeQueryGradedByString) Field() gradePrismaFields {
	return gradeFieldGradedBy
}

// base struct
type gradeQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r gradeQueryCreatedAtDateTime) Set(value DateTime) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r gradeQueryCreatedAtDateTime) SetIfPresent(value *DateTime) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

func (r gradeQueryCreatedAtDateTime) Equals(value DateTime) gradeWithPrismaCreatedAtEqualsParam {

	return gradeWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) gradeWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return gradeWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryCreatedAtDateTime) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r gradeQueryCreatedAtDateTime) Cursor(cursor DateTime) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r gradeQueryCreatedAtDateTime) In(value []DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) InIfPresent(value []DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryCreatedAtDateTime) NotIn(value []DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryCreatedAtDateTime) Lt(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) LtIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryCreatedAtDateTime) Lte(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) LteIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryCreatedAtDateTime) Gt(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) GtIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryCreatedAtDateTime) Gte(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) GteIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryCreatedAtDateTime) Not(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryCreatedAtDateTime) NotIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryCreatedAtDateTime) Before(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryCreatedAtDateTime) After(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryCreatedAtDateTime) BeforeEquals(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryCreatedAtDateTime) AfterEquals(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r gradeQueryCreatedAtDateTime) Field() gradePrismaFields {
	return gradeFieldCreatedAt
}

// base struct
type gradeQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r gradeQueryUpdatedAtDateTime) Set(value DateTime) gradeSetParam {

	return gradeSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r gradeQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) gradeSetParam {
	if value == nil {
		return gradeSetParam{}
	}

	return r.Set(*value)
}

func (r gradeQueryUpdatedAtDateTime) Equals(value DateTime) gradeWithPrismaUpdatedAtEqualsParam {

	return gradeWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) gradeWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return gradeWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r gradeQueryUpdatedAtDateTime) Order(direction SortOrder) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) Cursor(cursor DateTime) gradeCursorParam {
	return gradeCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) In(value []DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) InIfPresent(value []DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.In(value)
}

func (r gradeQueryUpdatedAtDateTime) NotIn(value []DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r gradeQueryUpdatedAtDateTime) Lt(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r gradeQueryUpdatedAtDateTime) Lte(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r gradeQueryUpdatedAtDateTime) Gt(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r gradeQueryUpdatedAtDateTime) Gte(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r gradeQueryUpdatedAtDateTime) Not(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r gradeQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r gradeQueryUpdatedAtDateTime) Before(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r gradeQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r gradeQueryUpdatedAtDateTime) After(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r gradeQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r gradeQueryUpdatedAtDateTime) BeforeEquals(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r gradeQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r gradeQueryUpdatedAtDateTime) AfterEquals(value DateTime) gradeDefaultParam {
	return gradeDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r gradeQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) gradeDefaultParam {
	if value == nil {
		return gradeDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r gradeQueryUpdatedAtDateTime) Field() gradePrismaFields {
	return gradeFieldUpdatedAt
}

// base struct
type gradeQueryScheduleSchedule struct{}

type gradeQueryScheduleRelations struct{}

// Grade -> Schedule
//
// @relation
// @required
func (gradeQueryScheduleRelations) Where(
	params ...ScheduleWhereParam,
) gradeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return gradeDefaultParam{
		data: builder.Field{
			Name: "schedule",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (gradeQueryScheduleRelations) Fetch() gradeToScheduleFindUnique {
	var v gradeToScheduleFindUnique

	v.query.Operation = "query"
	v.query.Method = "schedule"
	v.query.Outputs = scheduleOutput

	return v
}

func (r gradeQueryScheduleRelations) Link(
	params ScheduleWhereParam,
) gradeWithPrismaScheduleSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return gradeWithPrismaScheduleSetParam{}
	}

	fields = append(fields, f)

	return gradeWithPrismaScheduleSetParam{
		data: builder.Field{
			Name: "schedule",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r gradeQueryScheduleRelations) Unlink() gradeWithPrismaScheduleSetParam {
	var v gradeWithPrismaScheduleSetParam

	v = gradeWithPrismaScheduleSetParam{
		data: builder.Field{
			Name: "schedule",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r gradeQueryScheduleSchedule) Field() gradePrismaFields {
	return gradeFieldSchedule
}

// base struct
type gradeQueryUserUser struct{}

type gradeQueryUserRelations struct{}

// Grade -> User
//
// @relation
// @required
func (gradeQueryUserRelations) Where(
	params ...UserWhereParam,
) gradeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return gradeDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (gradeQueryUserRelations) Fetch() gradeToUserFindUnique {
	var v gradeToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r gradeQueryUserRelations) Link(
	params UserWhereParam,
) gradeWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return gradeWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return gradeWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r gradeQueryUserRelations) Unlink() gradeWithPrismaUserSetParam {
	var v gradeWithPrismaUserSetParam

	v = gradeWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r gradeQueryUserUser) Field() gradePrismaFields {
	return gradeFieldUser
}

// base struct
type gradeQueryGraderUser struct{}

type gradeQueryGraderRelations struct{}

// Grade -> Grader
//
// @relation
// @required
func (gradeQueryGraderRelations) Where(
	params ...UserWhereParam,
) gradeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return gradeDefaultParam{
		data: builder.Field{
			Name: "grader",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (gradeQueryGraderRelations) Fetch() gradeToGraderFindUnique {
	var v gradeToGraderFindUnique

	v.query.Operation = "query"
	v.query.Method = "grader"
	v.query.Outputs = userOutput

	return v
}

func (r gradeQueryGraderRelations) Link(
	params UserWhereParam,
) gradeWithPrismaGraderSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return gradeWithPrismaGraderSetParam{}
	}

	fields = append(fields, f)

	return gradeWithPrismaGraderSetParam{
		data: builder.Field{
			Name: "grader",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r gradeQueryGraderRelations) Unlink() gradeWithPrismaGraderSetParam {
	var v gradeWithPrismaGraderSetParam

	v = gradeWithPrismaGraderSetParam{
		data: builder.Field{
			Name: "grader",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r gradeQueryGraderUser) Field() gradePrismaFields {
	return gradeFieldGrader
}

// Announcement acts as a namespaces to access query methods for the Announcement model
var Announcement = announcementQuery{}

// announcementQuery exposes query functions for the announcement model
type announcementQuery struct {

	// ID
	//
	// @required
	ID announcementQueryIDInt

	// Title
	//
	// @required
	Title announcementQueryTitleString

	// Content
	//
	// @required
	Content announcementQueryContentString

	// CreatedAt
	//
	// @required
	CreatedAt announcementQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt announcementQueryUpdatedAtDateTime

	// AuthorID
	//
	// @required
	AuthorID announcementQueryAuthorIDString

	Author announcementQueryAuthorRelations
}

func (announcementQuery) Not(params ...AnnouncementWhereParam) announcementDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return announcementDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (announcementQuery) Or(params ...AnnouncementWhereParam) announcementDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return announcementDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (announcementQuery) And(params ...AnnouncementWhereParam) announcementDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return announcementDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type announcementQueryIDInt struct{}

// Set the required value of ID
func (r announcementQueryIDInt) Set(value int) announcementSetParam {

	return announcementSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r announcementQueryIDInt) SetIfPresent(value *Int) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r announcementQueryIDInt) Increment(value int) announcementSetParam {
	return announcementSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) IncrementIfPresent(value *int) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r announcementQueryIDInt) Decrement(value int) announcementSetParam {
	return announcementSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) DecrementIfPresent(value *int) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r announcementQueryIDInt) Multiply(value int) announcementSetParam {
	return announcementSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) MultiplyIfPresent(value *int) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r announcementQueryIDInt) Divide(value int) announcementSetParam {
	return announcementSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) DivideIfPresent(value *int) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}
	return r.Divide(*value)
}

func (r announcementQueryIDInt) Equals(value int) announcementWithPrismaIDEqualsUniqueParam {

	return announcementWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) EqualsIfPresent(value *int) announcementWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return announcementWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r announcementQueryIDInt) Order(direction SortOrder) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r announcementQueryIDInt) Cursor(cursor int) announcementCursorParam {
	return announcementCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r announcementQueryIDInt) In(value []int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) InIfPresent(value []int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.In(value)
}

func (r announcementQueryIDInt) NotIn(value []int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) NotInIfPresent(value []int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.NotIn(value)
}

func (r announcementQueryIDInt) Lt(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) LtIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.Lt(*value)
}

func (r announcementQueryIDInt) Lte(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) LteIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.Lte(*value)
}

func (r announcementQueryIDInt) Gt(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) GtIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.Gt(*value)
}

func (r announcementQueryIDInt) Gte(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) GteIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.Gte(*value)
}

func (r announcementQueryIDInt) Not(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryIDInt) NotIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r announcementQueryIDInt) LT(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r announcementQueryIDInt) LTIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r announcementQueryIDInt) LTE(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r announcementQueryIDInt) LTEIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r announcementQueryIDInt) GT(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r announcementQueryIDInt) GTIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r announcementQueryIDInt) GTE(value int) announcementParamUnique {
	return announcementParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r announcementQueryIDInt) GTEIfPresent(value *int) announcementParamUnique {
	if value == nil {
		return announcementParamUnique{}
	}
	return r.GTE(*value)
}

func (r announcementQueryIDInt) Field() announcementPrismaFields {
	return announcementFieldID
}

// base struct
type announcementQueryTitleString struct{}

// Set the required value of Title
func (r announcementQueryTitleString) Set(value string) announcementWithPrismaTitleSetParam {

	return announcementWithPrismaTitleSetParam{
		data: builder.Field{
			Name:  "title",
			Value: value,
		},
	}

}

// Set the optional value of Title dynamically
func (r announcementQueryTitleString) SetIfPresent(value *String) announcementWithPrismaTitleSetParam {
	if value == nil {
		return announcementWithPrismaTitleSetParam{}
	}

	return r.Set(*value)
}

func (r announcementQueryTitleString) Equals(value string) announcementWithPrismaTitleEqualsParam {

	return announcementWithPrismaTitleEqualsParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) EqualsIfPresent(value *string) announcementWithPrismaTitleEqualsParam {
	if value == nil {
		return announcementWithPrismaTitleEqualsParam{}
	}
	return r.Equals(*value)
}

func (r announcementQueryTitleString) Order(direction SortOrder) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name:  "title",
			Value: direction,
		},
	}
}

func (r announcementQueryTitleString) Cursor(cursor string) announcementCursorParam {
	return announcementCursorParam{
		data: builder.Field{
			Name:  "title",
			Value: cursor,
		},
	}
}

func (r announcementQueryTitleString) In(value []string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) InIfPresent(value []string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.In(value)
}

func (r announcementQueryTitleString) NotIn(value []string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) NotInIfPresent(value []string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.NotIn(value)
}

func (r announcementQueryTitleString) Lt(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) LtIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lt(*value)
}

func (r announcementQueryTitleString) Lte(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) LteIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lte(*value)
}

func (r announcementQueryTitleString) Gt(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) GtIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gt(*value)
}

func (r announcementQueryTitleString) Gte(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) GteIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gte(*value)
}

func (r announcementQueryTitleString) Contains(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) ContainsIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Contains(*value)
}

func (r announcementQueryTitleString) StartsWith(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) StartsWithIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r announcementQueryTitleString) EndsWith(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) EndsWithIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r announcementQueryTitleString) Mode(value QueryMode) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) ModeIfPresent(value *QueryMode) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Mode(*value)
}

func (r announcementQueryTitleString) Not(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryTitleString) NotIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r announcementQueryTitleString) HasPrefix(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r announcementQueryTitleString) HasPrefixIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r announcementQueryTitleString) HasSuffix(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r announcementQueryTitleString) HasSuffixIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r announcementQueryTitleString) Field() announcementPrismaFields {
	return announcementFieldTitle
}

// base struct
type announcementQueryContentString struct{}

// Set the required value of Content
func (r announcementQueryContentString) Set(value string) announcementWithPrismaContentSetParam {

	return announcementWithPrismaContentSetParam{
		data: builder.Field{
			Name:  "content",
			Value: value,
		},
	}

}

// Set the optional value of Content dynamically
func (r announcementQueryContentString) SetIfPresent(value *String) announcementWithPrismaContentSetParam {
	if value == nil {
		return announcementWithPrismaContentSetParam{}
	}

	return r.Set(*value)
}

func (r announcementQueryContentString) Equals(value string) announcementWithPrismaContentEqualsParam {

	return announcementWithPrismaContentEqualsParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) EqualsIfPresent(value *string) announcementWithPrismaContentEqualsParam {
	if value == nil {
		return announcementWithPrismaContentEqualsParam{}
	}
	return r.Equals(*value)
}

func (r announcementQueryContentString) Order(direction SortOrder) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name:  "content",
			Value: direction,
		},
	}
}

func (r announcementQueryContentString) Cursor(cursor string) announcementCursorParam {
	return announcementCursorParam{
		data: builder.Field{
			Name:  "content",
			Value: cursor,
		},
	}
}

func (r announcementQueryContentString) In(value []string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) InIfPresent(value []string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.In(value)
}

func (r announcementQueryContentString) NotIn(value []string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) NotInIfPresent(value []string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.NotIn(value)
}

func (r announcementQueryContentString) Lt(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) LtIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lt(*value)
}

func (r announcementQueryContentString) Lte(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) LteIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lte(*value)
}

func (r announcementQueryContentString) Gt(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) GtIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gt(*value)
}

func (r announcementQueryContentString) Gte(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) GteIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gte(*value)
}

func (r announcementQueryContentString) Contains(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) ContainsIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Contains(*value)
}

func (r announcementQueryContentString) StartsWith(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) StartsWithIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r announcementQueryContentString) EndsWith(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) EndsWithIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r announcementQueryContentString) Mode(value QueryMode) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) ModeIfPresent(value *QueryMode) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Mode(*value)
}

func (r announcementQueryContentString) Not(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryContentString) NotIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r announcementQueryContentString) HasPrefix(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r announcementQueryContentString) HasPrefixIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r announcementQueryContentString) HasSuffix(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "content",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r announcementQueryContentString) HasSuffixIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r announcementQueryContentString) Field() announcementPrismaFields {
	return announcementFieldContent
}

// base struct
type announcementQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r announcementQueryCreatedAtDateTime) Set(value DateTime) announcementSetParam {

	return announcementSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r announcementQueryCreatedAtDateTime) SetIfPresent(value *DateTime) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}

	return r.Set(*value)
}

func (r announcementQueryCreatedAtDateTime) Equals(value DateTime) announcementWithPrismaCreatedAtEqualsParam {

	return announcementWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) announcementWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return announcementWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r announcementQueryCreatedAtDateTime) Order(direction SortOrder) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r announcementQueryCreatedAtDateTime) Cursor(cursor DateTime) announcementCursorParam {
	return announcementCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r announcementQueryCreatedAtDateTime) In(value []DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) InIfPresent(value []DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.In(value)
}

func (r announcementQueryCreatedAtDateTime) NotIn(value []DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.NotIn(value)
}

func (r announcementQueryCreatedAtDateTime) Lt(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) LtIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lt(*value)
}

func (r announcementQueryCreatedAtDateTime) Lte(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) LteIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lte(*value)
}

func (r announcementQueryCreatedAtDateTime) Gt(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) GtIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gt(*value)
}

func (r announcementQueryCreatedAtDateTime) Gte(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) GteIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gte(*value)
}

func (r announcementQueryCreatedAtDateTime) Not(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryCreatedAtDateTime) NotIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r announcementQueryCreatedAtDateTime) Before(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r announcementQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r announcementQueryCreatedAtDateTime) After(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r announcementQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r announcementQueryCreatedAtDateTime) BeforeEquals(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r announcementQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r announcementQueryCreatedAtDateTime) AfterEquals(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r announcementQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r announcementQueryCreatedAtDateTime) Field() announcementPrismaFields {
	return announcementFieldCreatedAt
}

// base struct
type announcementQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r announcementQueryUpdatedAtDateTime) Set(value DateTime) announcementSetParam {

	return announcementSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r announcementQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}

	return r.Set(*value)
}

func (r announcementQueryUpdatedAtDateTime) Equals(value DateTime) announcementWithPrismaUpdatedAtEqualsParam {

	return announcementWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) announcementWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return announcementWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r announcementQueryUpdatedAtDateTime) Order(direction SortOrder) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) Cursor(cursor DateTime) announcementCursorParam {
	return announcementCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) In(value []DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) InIfPresent(value []DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.In(value)
}

func (r announcementQueryUpdatedAtDateTime) NotIn(value []DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.NotIn(value)
}

func (r announcementQueryUpdatedAtDateTime) Lt(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lt(*value)
}

func (r announcementQueryUpdatedAtDateTime) Lte(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lte(*value)
}

func (r announcementQueryUpdatedAtDateTime) Gt(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gt(*value)
}

func (r announcementQueryUpdatedAtDateTime) Gte(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gte(*value)
}

func (r announcementQueryUpdatedAtDateTime) Not(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r announcementQueryUpdatedAtDateTime) Before(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r announcementQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r announcementQueryUpdatedAtDateTime) After(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r announcementQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r announcementQueryUpdatedAtDateTime) BeforeEquals(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r announcementQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r announcementQueryUpdatedAtDateTime) AfterEquals(value DateTime) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r announcementQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r announcementQueryUpdatedAtDateTime) Field() announcementPrismaFields {
	return announcementFieldUpdatedAt
}

// base struct
type announcementQueryAuthorIDString struct{}

// Set the required value of AuthorID
func (r announcementQueryAuthorIDString) Set(value string) announcementSetParam {

	return announcementSetParam{
		data: builder.Field{
			Name:  "authorId",
			Value: value,
		},
	}

}

// Set the optional value of AuthorID dynamically
func (r announcementQueryAuthorIDString) SetIfPresent(value *String) announcementSetParam {
	if value == nil {
		return announcementSetParam{}
	}

	return r.Set(*value)
}

func (r announcementQueryAuthorIDString) Equals(value string) announcementWithPrismaAuthorIDEqualsParam {

	return announcementWithPrismaAuthorIDEqualsParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) EqualsIfPresent(value *string) announcementWithPrismaAuthorIDEqualsParam {
	if value == nil {
		return announcementWithPrismaAuthorIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r announcementQueryAuthorIDString) Order(direction SortOrder) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name:  "authorId",
			Value: direction,
		},
	}
}

func (r announcementQueryAuthorIDString) Cursor(cursor string) announcementCursorParam {
	return announcementCursorParam{
		data: builder.Field{
			Name:  "authorId",
			Value: cursor,
		},
	}
}

func (r announcementQueryAuthorIDString) In(value []string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) InIfPresent(value []string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.In(value)
}

func (r announcementQueryAuthorIDString) NotIn(value []string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) NotInIfPresent(value []string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.NotIn(value)
}

func (r announcementQueryAuthorIDString) Lt(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) LtIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lt(*value)
}

func (r announcementQueryAuthorIDString) Lte(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) LteIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Lte(*value)
}

func (r announcementQueryAuthorIDString) Gt(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) GtIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gt(*value)
}

func (r announcementQueryAuthorIDString) Gte(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) GteIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Gte(*value)
}

func (r announcementQueryAuthorIDString) Contains(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) ContainsIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Contains(*value)
}

func (r announcementQueryAuthorIDString) StartsWith(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) StartsWithIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r announcementQueryAuthorIDString) EndsWith(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) EndsWithIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r announcementQueryAuthorIDString) Mode(value QueryMode) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) ModeIfPresent(value *QueryMode) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Mode(*value)
}

func (r announcementQueryAuthorIDString) Not(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r announcementQueryAuthorIDString) NotIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r announcementQueryAuthorIDString) HasPrefix(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r announcementQueryAuthorIDString) HasPrefixIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r announcementQueryAuthorIDString) HasSuffix(value string) announcementDefaultParam {
	return announcementDefaultParam{
		data: builder.Field{
			Name: "authorId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r announcementQueryAuthorIDString) HasSuffixIfPresent(value *string) announcementDefaultParam {
	if value == nil {
		return announcementDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r announcementQueryAuthorIDString) Field() announcementPrismaFields {
	return announcementFieldAuthorID
}

// base struct
type announcementQueryAuthorUser struct{}

type announcementQueryAuthorRelations struct{}

// Announcement -> Author
//
// @relation
// @required
func (announcementQueryAuthorRelations) Where(
	params ...UserWhereParam,
) announcementDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return announcementDefaultParam{
		data: builder.Field{
			Name: "author",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (announcementQueryAuthorRelations) Fetch() announcementToAuthorFindUnique {
	var v announcementToAuthorFindUnique

	v.query.Operation = "query"
	v.query.Method = "author"
	v.query.Outputs = userOutput

	return v
}

func (r announcementQueryAuthorRelations) Link(
	params UserWhereParam,
) announcementWithPrismaAuthorSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return announcementWithPrismaAuthorSetParam{}
	}

	fields = append(fields, f)

	return announcementWithPrismaAuthorSetParam{
		data: builder.Field{
			Name: "author",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r announcementQueryAuthorRelations) Unlink() announcementWithPrismaAuthorSetParam {
	var v announcementWithPrismaAuthorSetParam

	v = announcementWithPrismaAuthorSetParam{
		data: builder.Field{
			Name: "author",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r announcementQueryAuthorUser) Field() announcementPrismaFields {
	return announcementFieldAuthor
}

// AttendanceCode acts as a namespaces to access query methods for the AttendanceCode model
var AttendanceCode = attendanceCodeQuery{}

// attendanceCodeQuery exposes query functions for the attendanceCode model
type attendanceCodeQuery struct {

	// ID
	//
	// @required
	ID attendanceCodeQueryIDInt

	// ScheduleID
	//
	// @required
	ScheduleID attendanceCodeQueryScheduleIDInt

	// Code
	//
	// @required
	// @unique
	Code attendanceCodeQueryCodeString

	// ExpiredAt
	//
	// @required
	ExpiredAt attendanceCodeQueryExpiredAtDateTime

	// CreatedAt
	//
	// @required
	CreatedAt attendanceCodeQueryCreatedAtDateTime

	Schedule attendanceCodeQueryScheduleRelations

	Attendances attendanceCodeQueryAttendancesRelations
}

func (attendanceCodeQuery) Not(params ...AttendanceCodeWhereParam) attendanceCodeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (attendanceCodeQuery) Or(params ...AttendanceCodeWhereParam) attendanceCodeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (attendanceCodeQuery) And(params ...AttendanceCodeWhereParam) attendanceCodeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (attendanceCodeQuery) ScheduleIDExpiredAt(
	_scheduleID AttendanceCodeWithPrismaScheduleIDWhereParam,

	_expiredAt AttendanceCodeWithPrismaExpiredAtWhereParam,
) AttendanceCodeEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _scheduleID.field())
	fields = append(fields, _expiredAt.field())

	return attendanceCodeEqualsUniqueParam{
		data: builder.Field{
			Name:   "scheduleId_expiredAt",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type attendanceCodeQueryIDInt struct{}

// Set the required value of ID
func (r attendanceCodeQueryIDInt) Set(value int) attendanceCodeSetParam {

	return attendanceCodeSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r attendanceCodeQueryIDInt) SetIfPresent(value *Int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r attendanceCodeQueryIDInt) Increment(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) IncrementIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r attendanceCodeQueryIDInt) Decrement(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) DecrementIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r attendanceCodeQueryIDInt) Multiply(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) MultiplyIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r attendanceCodeQueryIDInt) Divide(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) DivideIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Divide(*value)
}

func (r attendanceCodeQueryIDInt) Equals(value int) attendanceCodeWithPrismaIDEqualsUniqueParam {

	return attendanceCodeWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) EqualsIfPresent(value *int) attendanceCodeWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return attendanceCodeWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r attendanceCodeQueryIDInt) Order(direction SortOrder) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r attendanceCodeQueryIDInt) Cursor(cursor int) attendanceCodeCursorParam {
	return attendanceCodeCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r attendanceCodeQueryIDInt) In(value []int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) InIfPresent(value []int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.In(value)
}

func (r attendanceCodeQueryIDInt) NotIn(value []int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) NotInIfPresent(value []int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.NotIn(value)
}

func (r attendanceCodeQueryIDInt) Lt(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) LtIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Lt(*value)
}

func (r attendanceCodeQueryIDInt) Lte(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) LteIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Lte(*value)
}

func (r attendanceCodeQueryIDInt) Gt(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) GtIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Gt(*value)
}

func (r attendanceCodeQueryIDInt) Gte(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) GteIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Gte(*value)
}

func (r attendanceCodeQueryIDInt) Not(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryIDInt) NotIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r attendanceCodeQueryIDInt) LT(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r attendanceCodeQueryIDInt) LTIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r attendanceCodeQueryIDInt) LTE(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r attendanceCodeQueryIDInt) LTEIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r attendanceCodeQueryIDInt) GT(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r attendanceCodeQueryIDInt) GTIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r attendanceCodeQueryIDInt) GTE(value int) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r attendanceCodeQueryIDInt) GTEIfPresent(value *int) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.GTE(*value)
}

func (r attendanceCodeQueryIDInt) Field() attendanceCodePrismaFields {
	return attendanceCodeFieldID
}

// base struct
type attendanceCodeQueryScheduleIDInt struct{}

// Set the required value of ScheduleID
func (r attendanceCodeQueryScheduleIDInt) Set(value int) attendanceCodeSetParam {

	return attendanceCodeSetParam{
		data: builder.Field{
			Name:  "scheduleId",
			Value: value,
		},
	}

}

// Set the optional value of ScheduleID dynamically
func (r attendanceCodeQueryScheduleIDInt) SetIfPresent(value *Int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ScheduleID
func (r attendanceCodeQueryScheduleIDInt) Increment(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) IncrementIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ScheduleID
func (r attendanceCodeQueryScheduleIDInt) Decrement(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) DecrementIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ScheduleID
func (r attendanceCodeQueryScheduleIDInt) Multiply(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) MultiplyIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ScheduleID
func (r attendanceCodeQueryScheduleIDInt) Divide(value int) attendanceCodeSetParam {
	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) DivideIfPresent(value *int) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}
	return r.Divide(*value)
}

func (r attendanceCodeQueryScheduleIDInt) Equals(value int) attendanceCodeWithPrismaScheduleIDEqualsParam {

	return attendanceCodeWithPrismaScheduleIDEqualsParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) EqualsIfPresent(value *int) attendanceCodeWithPrismaScheduleIDEqualsParam {
	if value == nil {
		return attendanceCodeWithPrismaScheduleIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r attendanceCodeQueryScheduleIDInt) Order(direction SortOrder) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:  "scheduleId",
			Value: direction,
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) Cursor(cursor int) attendanceCodeCursorParam {
	return attendanceCodeCursorParam{
		data: builder.Field{
			Name:  "scheduleId",
			Value: cursor,
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) In(value []int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) InIfPresent(value []int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.In(value)
}

func (r attendanceCodeQueryScheduleIDInt) NotIn(value []int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) NotInIfPresent(value []int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r attendanceCodeQueryScheduleIDInt) Lt(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) LtIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r attendanceCodeQueryScheduleIDInt) Lte(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) LteIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r attendanceCodeQueryScheduleIDInt) Gt(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) GtIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r attendanceCodeQueryScheduleIDInt) Gte(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) GteIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r attendanceCodeQueryScheduleIDInt) Not(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleIDInt) NotIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r attendanceCodeQueryScheduleIDInt) LT(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r attendanceCodeQueryScheduleIDInt) LTIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r attendanceCodeQueryScheduleIDInt) LTE(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r attendanceCodeQueryScheduleIDInt) LTEIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r attendanceCodeQueryScheduleIDInt) GT(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r attendanceCodeQueryScheduleIDInt) GTIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r attendanceCodeQueryScheduleIDInt) GTE(value int) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "scheduleId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r attendanceCodeQueryScheduleIDInt) GTEIfPresent(value *int) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.GTE(*value)
}

func (r attendanceCodeQueryScheduleIDInt) Field() attendanceCodePrismaFields {
	return attendanceCodeFieldScheduleID
}

// base struct
type attendanceCodeQueryCodeString struct{}

// Set the required value of Code
func (r attendanceCodeQueryCodeString) Set(value string) attendanceCodeWithPrismaCodeSetParam {

	return attendanceCodeWithPrismaCodeSetParam{
		data: builder.Field{
			Name:  "code",
			Value: value,
		},
	}

}

// Set the optional value of Code dynamically
func (r attendanceCodeQueryCodeString) SetIfPresent(value *String) attendanceCodeWithPrismaCodeSetParam {
	if value == nil {
		return attendanceCodeWithPrismaCodeSetParam{}
	}

	return r.Set(*value)
}

func (r attendanceCodeQueryCodeString) Equals(value string) attendanceCodeWithPrismaCodeEqualsUniqueParam {

	return attendanceCodeWithPrismaCodeEqualsUniqueParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) EqualsIfPresent(value *string) attendanceCodeWithPrismaCodeEqualsUniqueParam {
	if value == nil {
		return attendanceCodeWithPrismaCodeEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r attendanceCodeQueryCodeString) Order(direction SortOrder) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:  "code",
			Value: direction,
		},
	}
}

func (r attendanceCodeQueryCodeString) Cursor(cursor string) attendanceCodeCursorParam {
	return attendanceCodeCursorParam{
		data: builder.Field{
			Name:  "code",
			Value: cursor,
		},
	}
}

func (r attendanceCodeQueryCodeString) In(value []string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) InIfPresent(value []string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.In(value)
}

func (r attendanceCodeQueryCodeString) NotIn(value []string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) NotInIfPresent(value []string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.NotIn(value)
}

func (r attendanceCodeQueryCodeString) Lt(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) LtIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Lt(*value)
}

func (r attendanceCodeQueryCodeString) Lte(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) LteIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Lte(*value)
}

func (r attendanceCodeQueryCodeString) Gt(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) GtIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Gt(*value)
}

func (r attendanceCodeQueryCodeString) Gte(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) GteIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Gte(*value)
}

func (r attendanceCodeQueryCodeString) Contains(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) ContainsIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Contains(*value)
}

func (r attendanceCodeQueryCodeString) StartsWith(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) StartsWithIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r attendanceCodeQueryCodeString) EndsWith(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) EndsWithIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r attendanceCodeQueryCodeString) Mode(value QueryMode) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) ModeIfPresent(value *QueryMode) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Mode(*value)
}

func (r attendanceCodeQueryCodeString) Not(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCodeString) NotIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r attendanceCodeQueryCodeString) HasPrefix(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r attendanceCodeQueryCodeString) HasPrefixIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r attendanceCodeQueryCodeString) HasSuffix(value string) attendanceCodeParamUnique {
	return attendanceCodeParamUnique{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r attendanceCodeQueryCodeString) HasSuffixIfPresent(value *string) attendanceCodeParamUnique {
	if value == nil {
		return attendanceCodeParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r attendanceCodeQueryCodeString) Field() attendanceCodePrismaFields {
	return attendanceCodeFieldCode
}

// base struct
type attendanceCodeQueryExpiredAtDateTime struct{}

// Set the required value of ExpiredAt
func (r attendanceCodeQueryExpiredAtDateTime) Set(value DateTime) attendanceCodeWithPrismaExpiredAtSetParam {

	return attendanceCodeWithPrismaExpiredAtSetParam{
		data: builder.Field{
			Name:  "expiredAt",
			Value: value,
		},
	}

}

// Set the optional value of ExpiredAt dynamically
func (r attendanceCodeQueryExpiredAtDateTime) SetIfPresent(value *DateTime) attendanceCodeWithPrismaExpiredAtSetParam {
	if value == nil {
		return attendanceCodeWithPrismaExpiredAtSetParam{}
	}

	return r.Set(*value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Equals(value DateTime) attendanceCodeWithPrismaExpiredAtEqualsParam {

	return attendanceCodeWithPrismaExpiredAtEqualsParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) EqualsIfPresent(value *DateTime) attendanceCodeWithPrismaExpiredAtEqualsParam {
	if value == nil {
		return attendanceCodeWithPrismaExpiredAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Order(direction SortOrder) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:  "expiredAt",
			Value: direction,
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) Cursor(cursor DateTime) attendanceCodeCursorParam {
	return attendanceCodeCursorParam{
		data: builder.Field{
			Name:  "expiredAt",
			Value: cursor,
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) In(value []DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) InIfPresent(value []DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.In(value)
}

func (r attendanceCodeQueryExpiredAtDateTime) NotIn(value []DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) NotInIfPresent(value []DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Lt(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) LtIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Lte(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) LteIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Gt(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) GtIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Gte(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) GteIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Not(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryExpiredAtDateTime) NotIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r attendanceCodeQueryExpiredAtDateTime) Before(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r attendanceCodeQueryExpiredAtDateTime) BeforeIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r attendanceCodeQueryExpiredAtDateTime) After(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r attendanceCodeQueryExpiredAtDateTime) AfterIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r attendanceCodeQueryExpiredAtDateTime) BeforeEquals(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r attendanceCodeQueryExpiredAtDateTime) BeforeEqualsIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r attendanceCodeQueryExpiredAtDateTime) AfterEquals(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "expiredAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r attendanceCodeQueryExpiredAtDateTime) AfterEqualsIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r attendanceCodeQueryExpiredAtDateTime) Field() attendanceCodePrismaFields {
	return attendanceCodeFieldExpiredAt
}

// base struct
type attendanceCodeQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r attendanceCodeQueryCreatedAtDateTime) Set(value DateTime) attendanceCodeSetParam {

	return attendanceCodeSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r attendanceCodeQueryCreatedAtDateTime) SetIfPresent(value *DateTime) attendanceCodeSetParam {
	if value == nil {
		return attendanceCodeSetParam{}
	}

	return r.Set(*value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Equals(value DateTime) attendanceCodeWithPrismaCreatedAtEqualsParam {

	return attendanceCodeWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) attendanceCodeWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return attendanceCodeWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Order(direction SortOrder) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) Cursor(cursor DateTime) attendanceCodeCursorParam {
	return attendanceCodeCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) In(value []DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) InIfPresent(value []DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.In(value)
}

func (r attendanceCodeQueryCreatedAtDateTime) NotIn(value []DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.NotIn(value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Lt(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) LtIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Lt(*value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Lte(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) LteIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Lte(*value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Gt(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) GtIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Gt(*value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Gte(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) GteIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Gte(*value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Not(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceCodeQueryCreatedAtDateTime) NotIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r attendanceCodeQueryCreatedAtDateTime) Before(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r attendanceCodeQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r attendanceCodeQueryCreatedAtDateTime) After(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r attendanceCodeQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r attendanceCodeQueryCreatedAtDateTime) BeforeEquals(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r attendanceCodeQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r attendanceCodeQueryCreatedAtDateTime) AfterEquals(value DateTime) attendanceCodeDefaultParam {
	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r attendanceCodeQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) attendanceCodeDefaultParam {
	if value == nil {
		return attendanceCodeDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r attendanceCodeQueryCreatedAtDateTime) Field() attendanceCodePrismaFields {
	return attendanceCodeFieldCreatedAt
}

// base struct
type attendanceCodeQueryScheduleSchedule struct{}

type attendanceCodeQueryScheduleRelations struct{}

// AttendanceCode -> Schedule
//
// @relation
// @required
func (attendanceCodeQueryScheduleRelations) Where(
	params ...ScheduleWhereParam,
) attendanceCodeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "schedule",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (attendanceCodeQueryScheduleRelations) Fetch() attendanceCodeToScheduleFindUnique {
	var v attendanceCodeToScheduleFindUnique

	v.query.Operation = "query"
	v.query.Method = "schedule"
	v.query.Outputs = scheduleOutput

	return v
}

func (r attendanceCodeQueryScheduleRelations) Link(
	params ScheduleWhereParam,
) attendanceCodeWithPrismaScheduleSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return attendanceCodeWithPrismaScheduleSetParam{}
	}

	fields = append(fields, f)

	return attendanceCodeWithPrismaScheduleSetParam{
		data: builder.Field{
			Name: "schedule",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r attendanceCodeQueryScheduleRelations) Unlink() attendanceCodeWithPrismaScheduleSetParam {
	var v attendanceCodeWithPrismaScheduleSetParam

	v = attendanceCodeWithPrismaScheduleSetParam{
		data: builder.Field{
			Name: "schedule",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r attendanceCodeQueryScheduleSchedule) Field() attendanceCodePrismaFields {
	return attendanceCodeFieldSchedule
}

// base struct
type attendanceCodeQueryAttendancesAttendance struct{}

type attendanceCodeQueryAttendancesRelations struct{}

// AttendanceCode -> Attendances
//
// @relation
// @required
func (attendanceCodeQueryAttendancesRelations) Some(
	params ...AttendanceWhereParam,
) attendanceCodeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// AttendanceCode -> Attendances
//
// @relation
// @required
func (attendanceCodeQueryAttendancesRelations) Every(
	params ...AttendanceWhereParam,
) attendanceCodeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// AttendanceCode -> Attendances
//
// @relation
// @required
func (attendanceCodeQueryAttendancesRelations) None(
	params ...AttendanceWhereParam,
) attendanceCodeDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeDefaultParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (attendanceCodeQueryAttendancesRelations) Fetch(

	params ...AttendanceWhereParam,

) attendanceCodeToAttendancesFindMany {
	var v attendanceCodeToAttendancesFindMany

	v.query.Operation = "query"
	v.query.Method = "attendances"
	v.query.Outputs = attendanceOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r attendanceCodeQueryAttendancesRelations) Link(
	params ...AttendanceWhereParam,
) attendanceCodeSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceCodeSetParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r attendanceCodeQueryAttendancesRelations) Unlink(
	params ...AttendanceWhereParam,
) attendanceCodeSetParam {
	var v attendanceCodeSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = attendanceCodeSetParam{
		data: builder.Field{
			Name: "attendances",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r attendanceCodeQueryAttendancesAttendance) Field() attendanceCodePrismaFields {
	return attendanceCodeFieldAttendances
}

// Attendance acts as a namespaces to access query methods for the Attendance model
var Attendance = attendanceQuery{}

// attendanceQuery exposes query functions for the attendance model
type attendanceQuery struct {

	// ID
	//
	// @required
	ID attendanceQueryIDInt

	// CodeID
	//
	// @required
	CodeID attendanceQueryCodeIDInt

	// UserID
	//
	// @required
	UserID attendanceQueryUserIDString

	// Status
	//
	// @required
	Status attendanceQueryStatusAttendanceStatus

	// CreatedAt
	//
	// @required
	CreatedAt attendanceQueryCreatedAtDateTime

	Code attendanceQueryCodeRelations

	User attendanceQueryUserRelations
}

func (attendanceQuery) Not(params ...AttendanceWhereParam) attendanceDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (attendanceQuery) Or(params ...AttendanceWhereParam) attendanceDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (attendanceQuery) And(params ...AttendanceWhereParam) attendanceDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (attendanceQuery) CodeIDUserID(
	_codeID AttendanceWithPrismaCodeIDWhereParam,

	_userID AttendanceWithPrismaUserIDWhereParam,
) AttendanceEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _codeID.field())
	fields = append(fields, _userID.field())

	return attendanceEqualsUniqueParam{
		data: builder.Field{
			Name:   "codeId_userId",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type attendanceQueryIDInt struct{}

// Set the required value of ID
func (r attendanceQueryIDInt) Set(value int) attendanceSetParam {

	return attendanceSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r attendanceQueryIDInt) SetIfPresent(value *Int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of ID
func (r attendanceQueryIDInt) Increment(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) IncrementIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of ID
func (r attendanceQueryIDInt) Decrement(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) DecrementIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of ID
func (r attendanceQueryIDInt) Multiply(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) MultiplyIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of ID
func (r attendanceQueryIDInt) Divide(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) DivideIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Divide(*value)
}

func (r attendanceQueryIDInt) Equals(value int) attendanceWithPrismaIDEqualsUniqueParam {

	return attendanceWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) EqualsIfPresent(value *int) attendanceWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return attendanceWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r attendanceQueryIDInt) Order(direction SortOrder) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r attendanceQueryIDInt) Cursor(cursor int) attendanceCursorParam {
	return attendanceCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r attendanceQueryIDInt) In(value []int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) InIfPresent(value []int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.In(value)
}

func (r attendanceQueryIDInt) NotIn(value []int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) NotInIfPresent(value []int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.NotIn(value)
}

func (r attendanceQueryIDInt) Lt(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) LtIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.Lt(*value)
}

func (r attendanceQueryIDInt) Lte(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) LteIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.Lte(*value)
}

func (r attendanceQueryIDInt) Gt(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) GtIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.Gt(*value)
}

func (r attendanceQueryIDInt) Gte(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) GteIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.Gte(*value)
}

func (r attendanceQueryIDInt) Not(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryIDInt) NotIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r attendanceQueryIDInt) LT(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r attendanceQueryIDInt) LTIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r attendanceQueryIDInt) LTE(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r attendanceQueryIDInt) LTEIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r attendanceQueryIDInt) GT(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r attendanceQueryIDInt) GTIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r attendanceQueryIDInt) GTE(value int) attendanceParamUnique {
	return attendanceParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r attendanceQueryIDInt) GTEIfPresent(value *int) attendanceParamUnique {
	if value == nil {
		return attendanceParamUnique{}
	}
	return r.GTE(*value)
}

func (r attendanceQueryIDInt) Field() attendancePrismaFields {
	return attendanceFieldID
}

// base struct
type attendanceQueryCodeIDInt struct{}

// Set the required value of CodeID
func (r attendanceQueryCodeIDInt) Set(value int) attendanceSetParam {

	return attendanceSetParam{
		data: builder.Field{
			Name:  "codeId",
			Value: value,
		},
	}

}

// Set the optional value of CodeID dynamically
func (r attendanceQueryCodeIDInt) SetIfPresent(value *Int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}

	return r.Set(*value)
}

// Increment the required value of CodeID
func (r attendanceQueryCodeIDInt) Increment(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "increment",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) IncrementIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Increment(*value)
}

// Decrement the required value of CodeID
func (r attendanceQueryCodeIDInt) Decrement(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "decrement",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) DecrementIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Decrement(*value)
}

// Multiply the required value of CodeID
func (r attendanceQueryCodeIDInt) Multiply(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "multiply",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) MultiplyIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Multiply(*value)
}

// Divide the required value of CodeID
func (r attendanceQueryCodeIDInt) Divide(value int) attendanceSetParam {
	return attendanceSetParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				builder.Field{
					Name:  "divide",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) DivideIfPresent(value *int) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}
	return r.Divide(*value)
}

func (r attendanceQueryCodeIDInt) Equals(value int) attendanceWithPrismaCodeIDEqualsParam {

	return attendanceWithPrismaCodeIDEqualsParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) EqualsIfPresent(value *int) attendanceWithPrismaCodeIDEqualsParam {
	if value == nil {
		return attendanceWithPrismaCodeIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r attendanceQueryCodeIDInt) Order(direction SortOrder) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name:  "codeId",
			Value: direction,
		},
	}
}

func (r attendanceQueryCodeIDInt) Cursor(cursor int) attendanceCursorParam {
	return attendanceCursorParam{
		data: builder.Field{
			Name:  "codeId",
			Value: cursor,
		},
	}
}

func (r attendanceQueryCodeIDInt) In(value []int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) InIfPresent(value []int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.In(value)
}

func (r attendanceQueryCodeIDInt) NotIn(value []int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) NotInIfPresent(value []int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.NotIn(value)
}

func (r attendanceQueryCodeIDInt) Lt(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) LtIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Lt(*value)
}

func (r attendanceQueryCodeIDInt) Lte(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) LteIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Lte(*value)
}

func (r attendanceQueryCodeIDInt) Gt(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) GtIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Gt(*value)
}

func (r attendanceQueryCodeIDInt) Gte(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) GteIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Gte(*value)
}

func (r attendanceQueryCodeIDInt) Not(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCodeIDInt) NotIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r attendanceQueryCodeIDInt) LT(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r attendanceQueryCodeIDInt) LTIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.LT(*value)
}

// deprecated: Use Lte instead.

func (r attendanceQueryCodeIDInt) LTE(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r attendanceQueryCodeIDInt) LTEIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.LTE(*value)
}

// deprecated: Use Gt instead.

func (r attendanceQueryCodeIDInt) GT(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r attendanceQueryCodeIDInt) GTIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.GT(*value)
}

// deprecated: Use Gte instead.

func (r attendanceQueryCodeIDInt) GTE(value int) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "codeId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r attendanceQueryCodeIDInt) GTEIfPresent(value *int) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.GTE(*value)
}

func (r attendanceQueryCodeIDInt) Field() attendancePrismaFields {
	return attendanceFieldCodeID
}

// base struct
type attendanceQueryUserIDString struct{}

// Set the required value of UserID
func (r attendanceQueryUserIDString) Set(value string) attendanceSetParam {

	return attendanceSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r attendanceQueryUserIDString) SetIfPresent(value *String) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}

	return r.Set(*value)
}

func (r attendanceQueryUserIDString) Equals(value string) attendanceWithPrismaUserIDEqualsParam {

	return attendanceWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) EqualsIfPresent(value *string) attendanceWithPrismaUserIDEqualsParam {
	if value == nil {
		return attendanceWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r attendanceQueryUserIDString) Order(direction SortOrder) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r attendanceQueryUserIDString) Cursor(cursor string) attendanceCursorParam {
	return attendanceCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r attendanceQueryUserIDString) In(value []string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) InIfPresent(value []string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.In(value)
}

func (r attendanceQueryUserIDString) NotIn(value []string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) NotInIfPresent(value []string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.NotIn(value)
}

func (r attendanceQueryUserIDString) Lt(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) LtIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Lt(*value)
}

func (r attendanceQueryUserIDString) Lte(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) LteIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Lte(*value)
}

func (r attendanceQueryUserIDString) Gt(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) GtIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Gt(*value)
}

func (r attendanceQueryUserIDString) Gte(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) GteIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Gte(*value)
}

func (r attendanceQueryUserIDString) Contains(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) ContainsIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Contains(*value)
}

func (r attendanceQueryUserIDString) StartsWith(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) StartsWithIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r attendanceQueryUserIDString) EndsWith(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) EndsWithIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r attendanceQueryUserIDString) Mode(value QueryMode) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) ModeIfPresent(value *QueryMode) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Mode(*value)
}

func (r attendanceQueryUserIDString) Not(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryUserIDString) NotIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r attendanceQueryUserIDString) HasPrefix(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r attendanceQueryUserIDString) HasPrefixIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r attendanceQueryUserIDString) HasSuffix(value string) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r attendanceQueryUserIDString) HasSuffixIfPresent(value *string) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r attendanceQueryUserIDString) Field() attendancePrismaFields {
	return attendanceFieldUserID
}

// base struct
type attendanceQueryStatusAttendanceStatus struct{}

// Set the required value of Status
func (r attendanceQueryStatusAttendanceStatus) Set(value AttendanceStatus) attendanceSetParam {

	return attendanceSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r attendanceQueryStatusAttendanceStatus) SetIfPresent(value *AttendanceStatus) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}

	return r.Set(*value)
}

func (r attendanceQueryStatusAttendanceStatus) Equals(value AttendanceStatus) attendanceWithPrismaStatusEqualsParam {

	return attendanceWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryStatusAttendanceStatus) EqualsIfPresent(value *AttendanceStatus) attendanceWithPrismaStatusEqualsParam {
	if value == nil {
		return attendanceWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r attendanceQueryStatusAttendanceStatus) Order(direction SortOrder) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r attendanceQueryStatusAttendanceStatus) Cursor(cursor AttendanceStatus) attendanceCursorParam {
	return attendanceCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r attendanceQueryStatusAttendanceStatus) In(value []AttendanceStatus) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryStatusAttendanceStatus) InIfPresent(value []AttendanceStatus) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.In(value)
}

func (r attendanceQueryStatusAttendanceStatus) NotIn(value []AttendanceStatus) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryStatusAttendanceStatus) NotInIfPresent(value []AttendanceStatus) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.NotIn(value)
}

func (r attendanceQueryStatusAttendanceStatus) Not(value AttendanceStatus) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryStatusAttendanceStatus) NotIfPresent(value *AttendanceStatus) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Not(*value)
}

func (r attendanceQueryStatusAttendanceStatus) Field() attendancePrismaFields {
	return attendanceFieldStatus
}

// base struct
type attendanceQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r attendanceQueryCreatedAtDateTime) Set(value DateTime) attendanceSetParam {

	return attendanceSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r attendanceQueryCreatedAtDateTime) SetIfPresent(value *DateTime) attendanceSetParam {
	if value == nil {
		return attendanceSetParam{}
	}

	return r.Set(*value)
}

func (r attendanceQueryCreatedAtDateTime) Equals(value DateTime) attendanceWithPrismaCreatedAtEqualsParam {

	return attendanceWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) attendanceWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return attendanceWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r attendanceQueryCreatedAtDateTime) Order(direction SortOrder) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) Cursor(cursor DateTime) attendanceCursorParam {
	return attendanceCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) In(value []DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) InIfPresent(value []DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.In(value)
}

func (r attendanceQueryCreatedAtDateTime) NotIn(value []DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.NotIn(value)
}

func (r attendanceQueryCreatedAtDateTime) Lt(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) LtIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Lt(*value)
}

func (r attendanceQueryCreatedAtDateTime) Lte(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) LteIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Lte(*value)
}

func (r attendanceQueryCreatedAtDateTime) Gt(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) GtIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Gt(*value)
}

func (r attendanceQueryCreatedAtDateTime) Gte(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) GteIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Gte(*value)
}

func (r attendanceQueryCreatedAtDateTime) Not(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r attendanceQueryCreatedAtDateTime) NotIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r attendanceQueryCreatedAtDateTime) Before(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r attendanceQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r attendanceQueryCreatedAtDateTime) After(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r attendanceQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r attendanceQueryCreatedAtDateTime) BeforeEquals(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r attendanceQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r attendanceQueryCreatedAtDateTime) AfterEquals(value DateTime) attendanceDefaultParam {
	return attendanceDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r attendanceQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) attendanceDefaultParam {
	if value == nil {
		return attendanceDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r attendanceQueryCreatedAtDateTime) Field() attendancePrismaFields {
	return attendanceFieldCreatedAt
}

// base struct
type attendanceQueryCodeAttendanceCode struct{}

type attendanceQueryCodeRelations struct{}

// Attendance -> Code
//
// @relation
// @required
func (attendanceQueryCodeRelations) Where(
	params ...AttendanceCodeWhereParam,
) attendanceDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (attendanceQueryCodeRelations) Fetch() attendanceToCodeFindUnique {
	var v attendanceToCodeFindUnique

	v.query.Operation = "query"
	v.query.Method = "code"
	v.query.Outputs = attendanceCodeOutput

	return v
}

func (r attendanceQueryCodeRelations) Link(
	params AttendanceCodeWhereParam,
) attendanceWithPrismaCodeSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return attendanceWithPrismaCodeSetParam{}
	}

	fields = append(fields, f)

	return attendanceWithPrismaCodeSetParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r attendanceQueryCodeRelations) Unlink() attendanceWithPrismaCodeSetParam {
	var v attendanceWithPrismaCodeSetParam

	v = attendanceWithPrismaCodeSetParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r attendanceQueryCodeAttendanceCode) Field() attendancePrismaFields {
	return attendanceFieldCode
}

// base struct
type attendanceQueryUserUser struct{}

type attendanceQueryUserRelations struct{}

// Attendance -> User
//
// @relation
// @required
func (attendanceQueryUserRelations) Where(
	params ...UserWhereParam,
) attendanceDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return attendanceDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (attendanceQueryUserRelations) Fetch() attendanceToUserFindUnique {
	var v attendanceToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r attendanceQueryUserRelations) Link(
	params UserWhereParam,
) attendanceWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return attendanceWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return attendanceWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r attendanceQueryUserRelations) Unlink() attendanceWithPrismaUserSetParam {
	var v attendanceWithPrismaUserSetParam

	v = attendanceWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r attendanceQueryUserUser) Field() attendancePrismaFields {
	return attendanceFieldUser
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "nrp"},
	{Name: "name"},
	{Name: "about"},
	{Name: "email"},
	{Name: "phone"},
	{Name: "password"},
	{Name: "role"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaNrpEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	nrpField()
}

type UserWithPrismaNrpSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nrpField()
}

type userWithPrismaNrpSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNrpSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNrpSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNrpSetParam) userModel() {}

func (p userWithPrismaNrpSetParam) nrpField() {}

type UserWithPrismaNrpWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nrpField()
}

type userWithPrismaNrpEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNrpEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNrpEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNrpEqualsParam) userModel() {}

func (p userWithPrismaNrpEqualsParam) nrpField() {}

func (userWithPrismaNrpSetParam) settable()  {}
func (userWithPrismaNrpEqualsParam) equals() {}

type userWithPrismaNrpEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNrpEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNrpEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNrpEqualsUniqueParam) userModel() {}
func (p userWithPrismaNrpEqualsUniqueParam) nrpField()  {}

func (userWithPrismaNrpEqualsUniqueParam) unique() {}
func (userWithPrismaNrpEqualsUniqueParam) equals() {}

type UserWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	nameField()
}

type UserWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nameField()
}

type userWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameSetParam) userModel() {}

func (p userWithPrismaNameSetParam) nameField() {}

type UserWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nameField()
}

type userWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameEqualsParam) userModel() {}

func (p userWithPrismaNameEqualsParam) nameField() {}

func (userWithPrismaNameSetParam) settable()  {}
func (userWithPrismaNameEqualsParam) equals() {}

type userWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameEqualsUniqueParam) userModel() {}
func (p userWithPrismaNameEqualsUniqueParam) nameField() {}

func (userWithPrismaNameEqualsUniqueParam) unique() {}
func (userWithPrismaNameEqualsUniqueParam) equals() {}

type UserWithPrismaAboutEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	aboutField()
}

type UserWithPrismaAboutSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	aboutField()
}

type userWithPrismaAboutSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAboutSetParam) phoneField() {
	//TODO implement me
	panic("implement me")
}

func (p userWithPrismaAboutSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAboutSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAboutSetParam) userModel() {}

func (p userWithPrismaAboutSetParam) aboutField() {}

type UserWithPrismaAboutWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	aboutField()
}

type userWithPrismaAboutEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAboutEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAboutEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAboutEqualsParam) userModel() {}

func (p userWithPrismaAboutEqualsParam) aboutField() {}

func (userWithPrismaAboutSetParam) settable()  {}
func (userWithPrismaAboutEqualsParam) equals() {}

type userWithPrismaAboutEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAboutEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAboutEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAboutEqualsUniqueParam) userModel()  {}
func (p userWithPrismaAboutEqualsUniqueParam) aboutField() {}

func (userWithPrismaAboutEqualsUniqueParam) unique() {}
func (userWithPrismaAboutEqualsUniqueParam) equals() {}

type UserWithPrismaEmailEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	emailField()
}

type UserWithPrismaEmailSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailSetParam) aboutField() {
	//TODO implement me
	panic("implement me")
}

func (p userWithPrismaEmailSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailSetParam) userModel() {}

func (p userWithPrismaEmailSetParam) emailField() {}

type UserWithPrismaEmailWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParam) userModel() {}

func (p userWithPrismaEmailEqualsParam) emailField() {}

func (userWithPrismaEmailSetParam) settable()  {}
func (userWithPrismaEmailEqualsParam) equals() {}

type userWithPrismaEmailEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsUniqueParam) userModel()  {}
func (p userWithPrismaEmailEqualsUniqueParam) emailField() {}

func (userWithPrismaEmailEqualsUniqueParam) unique() {}
func (userWithPrismaEmailEqualsUniqueParam) equals() {}

type UserWithPrismaPhoneEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	phoneField()
}

type UserWithPrismaPhoneSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	phoneField()
}

type userWithPrismaPhoneSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPhoneSetParam) emailField() {
	//TODO implement me
	panic("implement me")
}

func (p userWithPrismaPhoneSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPhoneSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPhoneSetParam) userModel() {}

func (p userWithPrismaPhoneSetParam) phoneField() {}

type UserWithPrismaPhoneWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	phoneField()
}

type userWithPrismaPhoneEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPhoneEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPhoneEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPhoneEqualsParam) userModel() {}

func (p userWithPrismaPhoneEqualsParam) phoneField() {}

func (userWithPrismaPhoneSetParam) settable()  {}
func (userWithPrismaPhoneEqualsParam) equals() {}

type userWithPrismaPhoneEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPhoneEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPhoneEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPhoneEqualsUniqueParam) userModel()  {}
func (p userWithPrismaPhoneEqualsUniqueParam) phoneField() {}

func (userWithPrismaPhoneEqualsUniqueParam) unique() {}
func (userWithPrismaPhoneEqualsUniqueParam) equals() {}

type UserWithPrismaPasswordEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	passwordField()
}

type UserWithPrismaPasswordSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordSetParam) userModel() {}

func (p userWithPrismaPasswordSetParam) passwordField() {}

type UserWithPrismaPasswordWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsParam) userModel() {}

func (p userWithPrismaPasswordEqualsParam) passwordField() {}

func (userWithPrismaPasswordSetParam) settable()  {}
func (userWithPrismaPasswordEqualsParam) equals() {}

type userWithPrismaPasswordEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsUniqueParam) userModel()     {}
func (p userWithPrismaPasswordEqualsUniqueParam) passwordField() {}

func (userWithPrismaPasswordEqualsUniqueParam) unique() {}
func (userWithPrismaPasswordEqualsUniqueParam) equals() {}

type UserWithPrismaRoleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	roleField()
}

type UserWithPrismaRoleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	roleField()
}

type userWithPrismaRoleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRoleSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRoleSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRoleSetParam) userModel() {}

func (p userWithPrismaRoleSetParam) roleField() {}

type UserWithPrismaRoleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	roleField()
}

type userWithPrismaRoleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRoleEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRoleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRoleEqualsParam) userModel() {}

func (p userWithPrismaRoleEqualsParam) roleField() {}

func (userWithPrismaRoleSetParam) settable()  {}
func (userWithPrismaRoleEqualsParam) equals() {}

type userWithPrismaRoleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRoleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRoleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRoleEqualsUniqueParam) userModel() {}
func (p userWithPrismaRoleEqualsUniqueParam) roleField() {}

func (userWithPrismaRoleEqualsUniqueParam) unique() {}
func (userWithPrismaRoleEqualsUniqueParam) equals() {}

type UserWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type UserWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParam) userModel() {}

func (p userWithPrismaCreatedAtSetParam) createdAtField() {}

type UserWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParam) userModel() {}

func (p userWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userWithPrismaCreatedAtSetParam) settable()  {}
func (userWithPrismaCreatedAtEqualsParam) equals() {}

type userWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (userWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedAtField()
}

type UserWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtSetParam) userModel() {}

func (p userWithPrismaUpdatedAtSetParam) updatedAtField() {}

type UserWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParam) userModel() {}

func (p userWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (userWithPrismaUpdatedAtSetParam) settable()  {}
func (userWithPrismaUpdatedAtEqualsParam) equals() {}

type userWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (userWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaMemberGroupsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	memberGroupsField()
}

type UserWithPrismaMemberGroupsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	memberGroupsField()
}

type userWithPrismaMemberGroupsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaMemberGroupsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaMemberGroupsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaMemberGroupsSetParam) userModel() {}

func (p userWithPrismaMemberGroupsSetParam) memberGroupsField() {}

type UserWithPrismaMemberGroupsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	memberGroupsField()
}

type userWithPrismaMemberGroupsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaMemberGroupsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaMemberGroupsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaMemberGroupsEqualsParam) userModel() {}

func (p userWithPrismaMemberGroupsEqualsParam) memberGroupsField() {}

func (userWithPrismaMemberGroupsSetParam) settable()  {}
func (userWithPrismaMemberGroupsEqualsParam) equals() {}

type userWithPrismaMemberGroupsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaMemberGroupsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaMemberGroupsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaMemberGroupsEqualsUniqueParam) userModel()         {}
func (p userWithPrismaMemberGroupsEqualsUniqueParam) memberGroupsField() {}

func (userWithPrismaMemberGroupsEqualsUniqueParam) unique() {}
func (userWithPrismaMemberGroupsEqualsUniqueParam) equals() {}

type UserWithPrismaAttendancesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	attendancesField()
}

type UserWithPrismaAttendancesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	attendancesField()
}

type userWithPrismaAttendancesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAttendancesSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAttendancesSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAttendancesSetParam) userModel() {}

func (p userWithPrismaAttendancesSetParam) attendancesField() {}

type UserWithPrismaAttendancesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	attendancesField()
}

type userWithPrismaAttendancesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAttendancesEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAttendancesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAttendancesEqualsParam) userModel() {}

func (p userWithPrismaAttendancesEqualsParam) attendancesField() {}

func (userWithPrismaAttendancesSetParam) settable()  {}
func (userWithPrismaAttendancesEqualsParam) equals() {}

type userWithPrismaAttendancesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAttendancesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAttendancesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAttendancesEqualsUniqueParam) userModel()        {}
func (p userWithPrismaAttendancesEqualsUniqueParam) attendancesField() {}

func (userWithPrismaAttendancesEqualsUniqueParam) unique() {}
func (userWithPrismaAttendancesEqualsUniqueParam) equals() {}

type UserWithPrismaAssistantSchedulesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	assistantSchedulesField()
}

type UserWithPrismaAssistantSchedulesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	assistantSchedulesField()
}

type userWithPrismaAssistantSchedulesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAssistantSchedulesSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAssistantSchedulesSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAssistantSchedulesSetParam) userModel() {}

func (p userWithPrismaAssistantSchedulesSetParam) assistantSchedulesField() {}

type UserWithPrismaAssistantSchedulesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	assistantSchedulesField()
}

type userWithPrismaAssistantSchedulesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAssistantSchedulesEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAssistantSchedulesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAssistantSchedulesEqualsParam) userModel() {}

func (p userWithPrismaAssistantSchedulesEqualsParam) assistantSchedulesField() {}

func (userWithPrismaAssistantSchedulesSetParam) settable()  {}
func (userWithPrismaAssistantSchedulesEqualsParam) equals() {}

type userWithPrismaAssistantSchedulesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAssistantSchedulesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAssistantSchedulesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAssistantSchedulesEqualsUniqueParam) userModel()               {}
func (p userWithPrismaAssistantSchedulesEqualsUniqueParam) assistantSchedulesField() {}

func (userWithPrismaAssistantSchedulesEqualsUniqueParam) unique() {}
func (userWithPrismaAssistantSchedulesEqualsUniqueParam) equals() {}

type UserWithPrismaGradedGradesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	gradedGradesField()
}

type UserWithPrismaGradedGradesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	gradedGradesField()
}

type userWithPrismaGradedGradesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaGradedGradesSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaGradedGradesSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaGradedGradesSetParam) userModel() {}

func (p userWithPrismaGradedGradesSetParam) gradedGradesField() {}

type UserWithPrismaGradedGradesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	gradedGradesField()
}

type userWithPrismaGradedGradesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaGradedGradesEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaGradedGradesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaGradedGradesEqualsParam) userModel() {}

func (p userWithPrismaGradedGradesEqualsParam) gradedGradesField() {}

func (userWithPrismaGradedGradesSetParam) settable()  {}
func (userWithPrismaGradedGradesEqualsParam) equals() {}

type userWithPrismaGradedGradesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaGradedGradesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaGradedGradesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaGradedGradesEqualsUniqueParam) userModel()         {}
func (p userWithPrismaGradedGradesEqualsUniqueParam) gradedGradesField() {}

func (userWithPrismaGradedGradesEqualsUniqueParam) unique() {}
func (userWithPrismaGradedGradesEqualsUniqueParam) equals() {}

type UserWithPrismaUserGradesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	userGradesField()
}

type UserWithPrismaUserGradesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userGradesField()
}

type userWithPrismaUserGradesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserGradesSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserGradesSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserGradesSetParam) userModel() {}

func (p userWithPrismaUserGradesSetParam) userGradesField() {}

type UserWithPrismaUserGradesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	userGradesField()
}

type userWithPrismaUserGradesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserGradesEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserGradesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserGradesEqualsParam) userModel() {}

func (p userWithPrismaUserGradesEqualsParam) userGradesField() {}

func (userWithPrismaUserGradesSetParam) settable()  {}
func (userWithPrismaUserGradesEqualsParam) equals() {}

type userWithPrismaUserGradesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUserGradesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUserGradesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUserGradesEqualsUniqueParam) userModel()       {}
func (p userWithPrismaUserGradesEqualsUniqueParam) userGradesField() {}

func (userWithPrismaUserGradesEqualsUniqueParam) unique() {}
func (userWithPrismaUserGradesEqualsUniqueParam) equals() {}

type UserWithPrismaAnnouncementsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	announcementsField()
}

type UserWithPrismaAnnouncementsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	announcementsField()
}

type userWithPrismaAnnouncementsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAnnouncementsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAnnouncementsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAnnouncementsSetParam) userModel() {}

func (p userWithPrismaAnnouncementsSetParam) announcementsField() {}

type UserWithPrismaAnnouncementsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	announcementsField()
}

type userWithPrismaAnnouncementsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAnnouncementsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAnnouncementsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAnnouncementsEqualsParam) userModel() {}

func (p userWithPrismaAnnouncementsEqualsParam) announcementsField() {}

func (userWithPrismaAnnouncementsSetParam) settable()  {}
func (userWithPrismaAnnouncementsEqualsParam) equals() {}

type userWithPrismaAnnouncementsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAnnouncementsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAnnouncementsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAnnouncementsEqualsUniqueParam) userModel()          {}
func (p userWithPrismaAnnouncementsEqualsUniqueParam) announcementsField() {}

func (userWithPrismaAnnouncementsEqualsUniqueParam) unique() {}
func (userWithPrismaAnnouncementsEqualsUniqueParam) equals() {}

type groupActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var groupOutput = []builder.Output{
	{Name: "id"},
	{Name: "name"},
}

type GroupRelationWith interface {
	getQuery() builder.Query
	with()
	groupRelation()
}

type GroupWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
}

type groupDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupDefaultParam) field() builder.Field {
	return p.data
}

func (p groupDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p groupDefaultParam) groupModel() {}

type GroupOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
}

type groupOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupOrderByParam) field() builder.Field {
	return p.data
}

func (p groupOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p groupOrderByParam) groupModel() {}

type GroupCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	isCursor()
}

type groupCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupCursorParam) field() builder.Field {
	return p.data
}

func (p groupCursorParam) isCursor() {}

func (p groupCursorParam) getQuery() builder.Query {
	return p.query
}

func (p groupCursorParam) groupModel() {}

type GroupParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	groupModel()
}

type groupParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p groupParamUnique) groupModel() {}

func (groupParamUnique) unique() {}

func (p groupParamUnique) field() builder.Field {
	return p.data
}

func (p groupParamUnique) getQuery() builder.Query {
	return p.query
}

type GroupEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	groupModel()
}

type groupEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupEqualsParam) groupModel() {}

func (groupEqualsParam) equals() {}

func (p groupEqualsParam) field() builder.Field {
	return p.data
}

func (p groupEqualsParam) getQuery() builder.Query {
	return p.query
}

type GroupEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	groupModel()
}

type groupEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupEqualsUniqueParam) groupModel() {}

func (groupEqualsUniqueParam) unique() {}
func (groupEqualsUniqueParam) equals() {}

func (p groupEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p groupEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type GroupSetParam interface {
	field() builder.Field
	settable()
	groupModel()
}

type groupSetParam struct {
	data builder.Field
}

func (groupSetParam) settable() {}

func (p groupSetParam) field() builder.Field {
	return p.data
}

func (p groupSetParam) groupModel() {}

type GroupWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	groupModel()
	idField()
}

type GroupWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	idField()
}

type groupWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaIDSetParam) groupModel() {}

func (p groupWithPrismaIDSetParam) idField() {}

type GroupWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	idField()
}

type groupWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaIDEqualsParam) groupModel() {}

func (p groupWithPrismaIDEqualsParam) idField() {}

func (groupWithPrismaIDSetParam) settable()  {}
func (groupWithPrismaIDEqualsParam) equals() {}

type groupWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaIDEqualsUniqueParam) groupModel() {}
func (p groupWithPrismaIDEqualsUniqueParam) idField()    {}

func (groupWithPrismaIDEqualsUniqueParam) unique() {}
func (groupWithPrismaIDEqualsUniqueParam) equals() {}

type GroupWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	groupModel()
	nameField()
}

type GroupWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	nameField()
}

type groupWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaNameSetParam) groupModel() {}

func (p groupWithPrismaNameSetParam) nameField() {}

type GroupWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	nameField()
}

type groupWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaNameEqualsParam) groupModel() {}

func (p groupWithPrismaNameEqualsParam) nameField() {}

func (groupWithPrismaNameSetParam) settable()  {}
func (groupWithPrismaNameEqualsParam) equals() {}

type groupWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaNameEqualsUniqueParam) groupModel() {}
func (p groupWithPrismaNameEqualsUniqueParam) nameField()  {}

func (groupWithPrismaNameEqualsUniqueParam) unique() {}
func (groupWithPrismaNameEqualsUniqueParam) equals() {}

type GroupWithPrismaMembersEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	groupModel()
	membersField()
}

type GroupWithPrismaMembersSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	membersField()
}

type groupWithPrismaMembersSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaMembersSetParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaMembersSetParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaMembersSetParam) groupModel() {}

func (p groupWithPrismaMembersSetParam) membersField() {}

type GroupWithPrismaMembersWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	membersField()
}

type groupWithPrismaMembersEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaMembersEqualsParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaMembersEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaMembersEqualsParam) groupModel() {}

func (p groupWithPrismaMembersEqualsParam) membersField() {}

func (groupWithPrismaMembersSetParam) settable()  {}
func (groupWithPrismaMembersEqualsParam) equals() {}

type groupWithPrismaMembersEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaMembersEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaMembersEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaMembersEqualsUniqueParam) groupModel()   {}
func (p groupWithPrismaMembersEqualsUniqueParam) membersField() {}

func (groupWithPrismaMembersEqualsUniqueParam) unique() {}
func (groupWithPrismaMembersEqualsUniqueParam) equals() {}

type GroupWithPrismaSchedulesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	groupModel()
	schedulesField()
}

type GroupWithPrismaSchedulesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	schedulesField()
}

type groupWithPrismaSchedulesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaSchedulesSetParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaSchedulesSetParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaSchedulesSetParam) groupModel() {}

func (p groupWithPrismaSchedulesSetParam) schedulesField() {}

type GroupWithPrismaSchedulesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	groupModel()
	schedulesField()
}

type groupWithPrismaSchedulesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaSchedulesEqualsParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaSchedulesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaSchedulesEqualsParam) groupModel() {}

func (p groupWithPrismaSchedulesEqualsParam) schedulesField() {}

func (groupWithPrismaSchedulesSetParam) settable()  {}
func (groupWithPrismaSchedulesEqualsParam) equals() {}

type groupWithPrismaSchedulesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p groupWithPrismaSchedulesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p groupWithPrismaSchedulesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p groupWithPrismaSchedulesEqualsUniqueParam) groupModel()     {}
func (p groupWithPrismaSchedulesEqualsUniqueParam) schedulesField() {}

func (groupWithPrismaSchedulesEqualsUniqueParam) unique() {}
func (groupWithPrismaSchedulesEqualsUniqueParam) equals() {}

type practicumActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var practicumOutput = []builder.Output{
	{Name: "id"},
	{Name: "title"},
	{Name: "description"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type PracticumRelationWith interface {
	getQuery() builder.Query
	with()
	practicumRelation()
}

type PracticumWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
}

type practicumDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumDefaultParam) field() builder.Field {
	return p.data
}

func (p practicumDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p practicumDefaultParam) practicumModel() {}

type PracticumOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
}

type practicumOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumOrderByParam) field() builder.Field {
	return p.data
}

func (p practicumOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p practicumOrderByParam) practicumModel() {}

type PracticumCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	isCursor()
}

type practicumCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumCursorParam) field() builder.Field {
	return p.data
}

func (p practicumCursorParam) isCursor() {}

func (p practicumCursorParam) getQuery() builder.Query {
	return p.query
}

func (p practicumCursorParam) practicumModel() {}

type PracticumParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	practicumModel()
}

type practicumParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p practicumParamUnique) practicumModel() {}

func (practicumParamUnique) unique() {}

func (p practicumParamUnique) field() builder.Field {
	return p.data
}

func (p practicumParamUnique) getQuery() builder.Query {
	return p.query
}

type PracticumEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	practicumModel()
}

type practicumEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumEqualsParam) practicumModel() {}

func (practicumEqualsParam) equals() {}

func (p practicumEqualsParam) field() builder.Field {
	return p.data
}

func (p practicumEqualsParam) getQuery() builder.Query {
	return p.query
}

type PracticumEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	practicumModel()
}

type practicumEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumEqualsUniqueParam) practicumModel() {}

func (practicumEqualsUniqueParam) unique() {}
func (practicumEqualsUniqueParam) equals() {}

func (p practicumEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p practicumEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PracticumSetParam interface {
	field() builder.Field
	settable()
	practicumModel()
}

type practicumSetParam struct {
	data builder.Field
}

func (practicumSetParam) settable() {}

func (p practicumSetParam) field() builder.Field {
	return p.data
}

func (p practicumSetParam) practicumModel() {}

type PracticumWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	practicumModel()
	idField()
}

type PracticumWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	idField()
}

type practicumWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaIDSetParam) practicumModel() {}

func (p practicumWithPrismaIDSetParam) idField() {}

type PracticumWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	idField()
}

type practicumWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaIDEqualsParam) practicumModel() {}

func (p practicumWithPrismaIDEqualsParam) idField() {}

func (practicumWithPrismaIDSetParam) settable()  {}
func (practicumWithPrismaIDEqualsParam) equals() {}

type practicumWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaIDEqualsUniqueParam) practicumModel() {}
func (p practicumWithPrismaIDEqualsUniqueParam) idField()        {}

func (practicumWithPrismaIDEqualsUniqueParam) unique() {}
func (practicumWithPrismaIDEqualsUniqueParam) equals() {}

type PracticumWithPrismaTitleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	practicumModel()
	titleField()
}

type PracticumWithPrismaTitleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	titleField()
}

type practicumWithPrismaTitleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaTitleSetParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaTitleSetParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaTitleSetParam) practicumModel() {}

func (p practicumWithPrismaTitleSetParam) titleField() {}

type PracticumWithPrismaTitleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	titleField()
}

type practicumWithPrismaTitleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaTitleEqualsParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaTitleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaTitleEqualsParam) practicumModel() {}

func (p practicumWithPrismaTitleEqualsParam) titleField() {}

func (practicumWithPrismaTitleSetParam) settable()  {}
func (practicumWithPrismaTitleEqualsParam) equals() {}

type practicumWithPrismaTitleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaTitleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaTitleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaTitleEqualsUniqueParam) practicumModel() {}
func (p practicumWithPrismaTitleEqualsUniqueParam) titleField()     {}

func (practicumWithPrismaTitleEqualsUniqueParam) unique() {}
func (practicumWithPrismaTitleEqualsUniqueParam) equals() {}

type PracticumWithPrismaDescriptionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	practicumModel()
	descriptionField()
}

type PracticumWithPrismaDescriptionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	descriptionField()
}

type practicumWithPrismaDescriptionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaDescriptionSetParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaDescriptionSetParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaDescriptionSetParam) practicumModel() {}

func (p practicumWithPrismaDescriptionSetParam) descriptionField() {}

type PracticumWithPrismaDescriptionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	descriptionField()
}

type practicumWithPrismaDescriptionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaDescriptionEqualsParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaDescriptionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaDescriptionEqualsParam) practicumModel() {}

func (p practicumWithPrismaDescriptionEqualsParam) descriptionField() {}

func (practicumWithPrismaDescriptionSetParam) settable()  {}
func (practicumWithPrismaDescriptionEqualsParam) equals() {}

type practicumWithPrismaDescriptionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaDescriptionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaDescriptionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaDescriptionEqualsUniqueParam) practicumModel()   {}
func (p practicumWithPrismaDescriptionEqualsUniqueParam) descriptionField() {}

func (practicumWithPrismaDescriptionEqualsUniqueParam) unique() {}
func (practicumWithPrismaDescriptionEqualsUniqueParam) equals() {}

type PracticumWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	practicumModel()
	createdAtField()
}

type PracticumWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	createdAtField()
}

type practicumWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaCreatedAtSetParam) practicumModel() {}

func (p practicumWithPrismaCreatedAtSetParam) createdAtField() {}

type PracticumWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	createdAtField()
}

type practicumWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaCreatedAtEqualsParam) practicumModel() {}

func (p practicumWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (practicumWithPrismaCreatedAtSetParam) settable()  {}
func (practicumWithPrismaCreatedAtEqualsParam) equals() {}

type practicumWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaCreatedAtEqualsUniqueParam) practicumModel() {}
func (p practicumWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (practicumWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (practicumWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type PracticumWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	practicumModel()
	updatedAtField()
}

type PracticumWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	updatedAtField()
}

type practicumWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaUpdatedAtSetParam) practicumModel() {}

func (p practicumWithPrismaUpdatedAtSetParam) updatedAtField() {}

type PracticumWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	updatedAtField()
}

type practicumWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaUpdatedAtEqualsParam) practicumModel() {}

func (p practicumWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (practicumWithPrismaUpdatedAtSetParam) settable()  {}
func (practicumWithPrismaUpdatedAtEqualsParam) equals() {}

type practicumWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaUpdatedAtEqualsUniqueParam) practicumModel() {}
func (p practicumWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (practicumWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (practicumWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type PracticumWithPrismaSchedulesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	practicumModel()
	schedulesField()
}

type PracticumWithPrismaSchedulesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	schedulesField()
}

type practicumWithPrismaSchedulesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaSchedulesSetParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaSchedulesSetParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaSchedulesSetParam) practicumModel() {}

func (p practicumWithPrismaSchedulesSetParam) schedulesField() {}

type PracticumWithPrismaSchedulesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	practicumModel()
	schedulesField()
}

type practicumWithPrismaSchedulesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaSchedulesEqualsParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaSchedulesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaSchedulesEqualsParam) practicumModel() {}

func (p practicumWithPrismaSchedulesEqualsParam) schedulesField() {}

func (practicumWithPrismaSchedulesSetParam) settable()  {}
func (practicumWithPrismaSchedulesEqualsParam) equals() {}

type practicumWithPrismaSchedulesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p practicumWithPrismaSchedulesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p practicumWithPrismaSchedulesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p practicumWithPrismaSchedulesEqualsUniqueParam) practicumModel() {}
func (p practicumWithPrismaSchedulesEqualsUniqueParam) schedulesField() {}

func (practicumWithPrismaSchedulesEqualsUniqueParam) unique() {}
func (practicumWithPrismaSchedulesEqualsUniqueParam) equals() {}

type scheduleActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var scheduleOutput = []builder.Output{
	{Name: "id"},
	{Name: "practicumId"},
	{Name: "groupId"},
	{Name: "assistantId"},
	{Name: "date"},
	{Name: "startTime"},
	{Name: "status"},
}

type ScheduleRelationWith interface {
	getQuery() builder.Query
	with()
	scheduleRelation()
}

type ScheduleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
}

type scheduleDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleDefaultParam) field() builder.Field {
	return p.data
}

func (p scheduleDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleDefaultParam) scheduleModel() {}

type ScheduleOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
}

type scheduleOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleOrderByParam) field() builder.Field {
	return p.data
}

func (p scheduleOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleOrderByParam) scheduleModel() {}

type ScheduleCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	isCursor()
}

type scheduleCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleCursorParam) field() builder.Field {
	return p.data
}

func (p scheduleCursorParam) isCursor() {}

func (p scheduleCursorParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleCursorParam) scheduleModel() {}

type ScheduleParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	scheduleModel()
}

type scheduleParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleParamUnique) scheduleModel() {}

func (scheduleParamUnique) unique() {}

func (p scheduleParamUnique) field() builder.Field {
	return p.data
}

func (p scheduleParamUnique) getQuery() builder.Query {
	return p.query
}

type ScheduleEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
}

type scheduleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleEqualsParam) scheduleModel() {}

func (scheduleEqualsParam) equals() {}

func (p scheduleEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleEqualsParam) getQuery() builder.Query {
	return p.query
}

type ScheduleEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	scheduleModel()
}

type scheduleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleEqualsUniqueParam) scheduleModel() {}

func (scheduleEqualsUniqueParam) unique() {}
func (scheduleEqualsUniqueParam) equals() {}

func (p scheduleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type ScheduleSetParam interface {
	field() builder.Field
	settable()
	scheduleModel()
}

type scheduleSetParam struct {
	data builder.Field
}

func (p scheduleSetParam) assistantField() {
	//TODO implement me
	panic("implement me")
}

func (p scheduleSetParam) groupField() {
	//TODO implement me
	panic("implement me")
}

func (p scheduleSetParam) getQuery() builder.Query {
	//TODO implement me
	panic("implement me")
}

func (p scheduleSetParam) practicumField() {
	//TODO implement me
	panic("implement me")
}

func (scheduleSetParam) settable() {}

func (p scheduleSetParam) field() builder.Field {
	return p.data
}

func (p scheduleSetParam) scheduleModel() {}

type ScheduleWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	idField()
}

type ScheduleWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	idField()
}

type scheduleWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaIDSetParam) scheduleModel() {}

func (p scheduleWithPrismaIDSetParam) idField() {}

type ScheduleWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	idField()
}

type scheduleWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaIDEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaIDEqualsParam) idField() {}

func (scheduleWithPrismaIDSetParam) settable()  {}
func (scheduleWithPrismaIDEqualsParam) equals() {}

type scheduleWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaIDEqualsUniqueParam) scheduleModel() {}
func (p scheduleWithPrismaIDEqualsUniqueParam) idField()       {}

func (scheduleWithPrismaIDEqualsUniqueParam) unique() {}
func (scheduleWithPrismaIDEqualsUniqueParam) equals() {}

type ScheduleWithPrismaPracticumIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	practicumIDField()
}

type ScheduleWithPrismaPracticumIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	practicumIDField()
}

type scheduleWithPrismaPracticumIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaPracticumIDSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaPracticumIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaPracticumIDSetParam) scheduleModel() {}

func (p scheduleWithPrismaPracticumIDSetParam) practicumIDField() {}

type ScheduleWithPrismaPracticumIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	practicumIDField()
}

type scheduleWithPrismaPracticumIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaPracticumIDEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaPracticumIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaPracticumIDEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaPracticumIDEqualsParam) practicumIDField() {}

func (scheduleWithPrismaPracticumIDSetParam) settable()  {}
func (scheduleWithPrismaPracticumIDEqualsParam) equals() {}

type scheduleWithPrismaPracticumIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaPracticumIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaPracticumIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaPracticumIDEqualsUniqueParam) scheduleModel()    {}
func (p scheduleWithPrismaPracticumIDEqualsUniqueParam) practicumIDField() {}

func (scheduleWithPrismaPracticumIDEqualsUniqueParam) unique() {}
func (scheduleWithPrismaPracticumIDEqualsUniqueParam) equals() {}

type ScheduleWithPrismaGroupIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	groupIDField()
}

type ScheduleWithPrismaGroupIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	groupIDField()
}

type scheduleWithPrismaGroupIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGroupIDSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGroupIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGroupIDSetParam) scheduleModel() {}

func (p scheduleWithPrismaGroupIDSetParam) groupIDField() {}

type ScheduleWithPrismaGroupIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	groupIDField()
}

type scheduleWithPrismaGroupIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGroupIDEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGroupIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGroupIDEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaGroupIDEqualsParam) groupIDField() {}

func (scheduleWithPrismaGroupIDSetParam) settable()  {}
func (scheduleWithPrismaGroupIDEqualsParam) equals() {}

type scheduleWithPrismaGroupIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGroupIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGroupIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGroupIDEqualsUniqueParam) scheduleModel() {}
func (p scheduleWithPrismaGroupIDEqualsUniqueParam) groupIDField()  {}

func (scheduleWithPrismaGroupIDEqualsUniqueParam) unique() {}
func (scheduleWithPrismaGroupIDEqualsUniqueParam) equals() {}

type ScheduleWithPrismaAssistantIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	assistantIDField()
}

type ScheduleWithPrismaAssistantIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	assistantIDField()
}

type scheduleWithPrismaAssistantIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAssistantIDSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAssistantIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAssistantIDSetParam) scheduleModel() {}

func (p scheduleWithPrismaAssistantIDSetParam) assistantIDField() {}

type ScheduleWithPrismaAssistantIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	assistantIDField()
}

type scheduleWithPrismaAssistantIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAssistantIDEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAssistantIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAssistantIDEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaAssistantIDEqualsParam) assistantIDField() {}

func (scheduleWithPrismaAssistantIDSetParam) settable()  {}
func (scheduleWithPrismaAssistantIDEqualsParam) equals() {}

type scheduleWithPrismaAssistantIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAssistantIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAssistantIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAssistantIDEqualsUniqueParam) scheduleModel()    {}
func (p scheduleWithPrismaAssistantIDEqualsUniqueParam) assistantIDField() {}

func (scheduleWithPrismaAssistantIDEqualsUniqueParam) unique() {}
func (scheduleWithPrismaAssistantIDEqualsUniqueParam) equals() {}

type ScheduleWithPrismaDateEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	dateField()
}

type ScheduleWithPrismaDateSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	dateField()
}

type scheduleWithPrismaDateSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaDateSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaDateSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaDateSetParam) scheduleModel() {}

func (p scheduleWithPrismaDateSetParam) dateField() {}

type ScheduleWithPrismaDateWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	dateField()
}

type scheduleWithPrismaDateEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaDateEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaDateEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaDateEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaDateEqualsParam) dateField() {}

func (scheduleWithPrismaDateSetParam) settable()  {}
func (scheduleWithPrismaDateEqualsParam) equals() {}

type scheduleWithPrismaDateEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaDateEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaDateEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaDateEqualsUniqueParam) scheduleModel() {}
func (p scheduleWithPrismaDateEqualsUniqueParam) dateField()     {}

func (scheduleWithPrismaDateEqualsUniqueParam) unique() {}
func (scheduleWithPrismaDateEqualsUniqueParam) equals() {}

type ScheduleWithPrismaStartTimeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	startTimeField()
}

type ScheduleWithPrismaStartTimeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	startTimeField()
}

type scheduleWithPrismaStartTimeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaStartTimeSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaStartTimeSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaStartTimeSetParam) scheduleModel() {}

func (p scheduleWithPrismaStartTimeSetParam) startTimeField() {}

type ScheduleWithPrismaStartTimeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	startTimeField()
}

type scheduleWithPrismaStartTimeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaStartTimeEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaStartTimeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaStartTimeEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaStartTimeEqualsParam) startTimeField() {}

func (scheduleWithPrismaStartTimeSetParam) settable()  {}
func (scheduleWithPrismaStartTimeEqualsParam) equals() {}

type scheduleWithPrismaStartTimeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaStartTimeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaStartTimeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaStartTimeEqualsUniqueParam) scheduleModel()  {}
func (p scheduleWithPrismaStartTimeEqualsUniqueParam) startTimeField() {}

func (scheduleWithPrismaStartTimeEqualsUniqueParam) unique() {}
func (scheduleWithPrismaStartTimeEqualsUniqueParam) equals() {}

type ScheduleWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	statusField()
}

type ScheduleWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	statusField()
}

type scheduleWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaStatusSetParam) scheduleModel() {}

func (p scheduleWithPrismaStatusSetParam) statusField() {}

type ScheduleWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	statusField()
}

type scheduleWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaStatusEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaStatusEqualsParam) statusField() {}

func (scheduleWithPrismaStatusSetParam) settable()  {}
func (scheduleWithPrismaStatusEqualsParam) equals() {}

type scheduleWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaStatusEqualsUniqueParam) scheduleModel() {}
func (p scheduleWithPrismaStatusEqualsUniqueParam) statusField()   {}

func (scheduleWithPrismaStatusEqualsUniqueParam) unique() {}
func (scheduleWithPrismaStatusEqualsUniqueParam) equals() {}

type ScheduleWithPrismaPracticumEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	practicumField()
}

type ScheduleWithPrismaPracticumSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	practicumField()
}

type scheduleWithPrismaPracticumSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaPracticumSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaPracticumSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaPracticumSetParam) scheduleModel() {}

func (p scheduleWithPrismaPracticumSetParam) practicumField() {}

type ScheduleWithPrismaPracticumWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	practicumField()
}

type scheduleWithPrismaPracticumEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaPracticumEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaPracticumEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaPracticumEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaPracticumEqualsParam) practicumField() {}

func (scheduleWithPrismaPracticumSetParam) settable()  {}
func (scheduleWithPrismaPracticumEqualsParam) equals() {}

type scheduleWithPrismaPracticumEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaPracticumEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaPracticumEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaPracticumEqualsUniqueParam) scheduleModel()  {}
func (p scheduleWithPrismaPracticumEqualsUniqueParam) practicumField() {}

func (scheduleWithPrismaPracticumEqualsUniqueParam) unique() {}
func (scheduleWithPrismaPracticumEqualsUniqueParam) equals() {}

type ScheduleWithPrismaGroupEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	groupField()
}

type ScheduleWithPrismaGroupSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	groupField()
}

type scheduleWithPrismaGroupSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGroupSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGroupSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGroupSetParam) scheduleModel() {}

func (p scheduleWithPrismaGroupSetParam) groupField() {}

type ScheduleWithPrismaGroupWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	groupField()
}

type scheduleWithPrismaGroupEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGroupEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGroupEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGroupEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaGroupEqualsParam) groupField() {}

func (scheduleWithPrismaGroupSetParam) settable()  {}
func (scheduleWithPrismaGroupEqualsParam) equals() {}

type scheduleWithPrismaGroupEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGroupEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGroupEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGroupEqualsUniqueParam) scheduleModel() {}
func (p scheduleWithPrismaGroupEqualsUniqueParam) groupField()    {}

func (scheduleWithPrismaGroupEqualsUniqueParam) unique() {}
func (scheduleWithPrismaGroupEqualsUniqueParam) equals() {}

type ScheduleWithPrismaAssistantEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	assistantField()
}

type ScheduleWithPrismaAssistantSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	assistantField()
}

type scheduleWithPrismaAssistantSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAssistantSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAssistantSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAssistantSetParam) scheduleModel() {}

func (p scheduleWithPrismaAssistantSetParam) assistantField() {}

type ScheduleWithPrismaAssistantWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	assistantField()
}

type scheduleWithPrismaAssistantEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAssistantEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAssistantEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAssistantEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaAssistantEqualsParam) assistantField() {}

func (scheduleWithPrismaAssistantSetParam) settable()  {}
func (scheduleWithPrismaAssistantEqualsParam) equals() {}

type scheduleWithPrismaAssistantEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAssistantEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAssistantEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAssistantEqualsUniqueParam) scheduleModel()  {}
func (p scheduleWithPrismaAssistantEqualsUniqueParam) assistantField() {}

func (scheduleWithPrismaAssistantEqualsUniqueParam) unique() {}
func (scheduleWithPrismaAssistantEqualsUniqueParam) equals() {}

type ScheduleWithPrismaAttendanceCodesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	attendanceCodesField()
}

type ScheduleWithPrismaAttendanceCodesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	attendanceCodesField()
}

type scheduleWithPrismaAttendanceCodesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAttendanceCodesSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAttendanceCodesSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAttendanceCodesSetParam) scheduleModel() {}

func (p scheduleWithPrismaAttendanceCodesSetParam) attendanceCodesField() {}

type ScheduleWithPrismaAttendanceCodesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	attendanceCodesField()
}

type scheduleWithPrismaAttendanceCodesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAttendanceCodesEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAttendanceCodesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAttendanceCodesEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaAttendanceCodesEqualsParam) attendanceCodesField() {}

func (scheduleWithPrismaAttendanceCodesSetParam) settable()  {}
func (scheduleWithPrismaAttendanceCodesEqualsParam) equals() {}

type scheduleWithPrismaAttendanceCodesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaAttendanceCodesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaAttendanceCodesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaAttendanceCodesEqualsUniqueParam) scheduleModel()        {}
func (p scheduleWithPrismaAttendanceCodesEqualsUniqueParam) attendanceCodesField() {}

func (scheduleWithPrismaAttendanceCodesEqualsUniqueParam) unique() {}
func (scheduleWithPrismaAttendanceCodesEqualsUniqueParam) equals() {}

type ScheduleWithPrismaGradesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	scheduleModel()
	gradesField()
}

type ScheduleWithPrismaGradesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	gradesField()
}

type scheduleWithPrismaGradesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGradesSetParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGradesSetParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGradesSetParam) scheduleModel() {}

func (p scheduleWithPrismaGradesSetParam) gradesField() {}

type ScheduleWithPrismaGradesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	scheduleModel()
	gradesField()
}

type scheduleWithPrismaGradesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGradesEqualsParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGradesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGradesEqualsParam) scheduleModel() {}

func (p scheduleWithPrismaGradesEqualsParam) gradesField() {}

func (scheduleWithPrismaGradesSetParam) settable()  {}
func (scheduleWithPrismaGradesEqualsParam) equals() {}

type scheduleWithPrismaGradesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p scheduleWithPrismaGradesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p scheduleWithPrismaGradesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p scheduleWithPrismaGradesEqualsUniqueParam) scheduleModel() {}
func (p scheduleWithPrismaGradesEqualsUniqueParam) gradesField()   {}

func (scheduleWithPrismaGradesEqualsUniqueParam) unique() {}
func (scheduleWithPrismaGradesEqualsUniqueParam) equals() {}

type gradeActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var gradeOutput = []builder.Output{
	{Name: "id"},
	{Name: "scheduleId"},
	{Name: "userId"},
	{Name: "prelab"},
	{Name: "inlab"},
	{Name: "abstract"},
	{Name: "introduction"},
	{Name: "methodology"},
	{Name: "discussion"},
	{Name: "conclusion"},
	{Name: "formatting"},
	{Name: "feedback"},
	{Name: "gradedBy"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type GradeRelationWith interface {
	getQuery() builder.Query
	with()
	gradeRelation()
}

type GradeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
}

type gradeDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeDefaultParam) field() builder.Field {
	return p.data
}

func (p gradeDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p gradeDefaultParam) gradeModel() {}

type GradeOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
}

type gradeOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeOrderByParam) field() builder.Field {
	return p.data
}

func (p gradeOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p gradeOrderByParam) gradeModel() {}

type GradeCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	isCursor()
}

type gradeCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeCursorParam) field() builder.Field {
	return p.data
}

func (p gradeCursorParam) isCursor() {}

func (p gradeCursorParam) getQuery() builder.Query {
	return p.query
}

func (p gradeCursorParam) gradeModel() {}

type GradeParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	gradeModel()
}

type gradeParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p gradeParamUnique) gradeModel() {}

func (gradeParamUnique) unique() {}

func (p gradeParamUnique) field() builder.Field {
	return p.data
}

func (p gradeParamUnique) getQuery() builder.Query {
	return p.query
}

type GradeEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
}

type gradeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeEqualsParam) gradeModel() {}

func (gradeEqualsParam) equals() {}

func (p gradeEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeEqualsParam) getQuery() builder.Query {
	return p.query
}

type GradeEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	gradeModel()
}

type gradeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeEqualsUniqueParam) gradeModel() {}

func (gradeEqualsUniqueParam) unique() {}
func (gradeEqualsUniqueParam) equals() {}

func (p gradeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type GradeSetParam interface {
	field() builder.Field
	settable()
	gradeModel()
}

type gradeSetParam struct {
	data builder.Field
}

func (gradeSetParam) settable() {}

func (p gradeSetParam) field() builder.Field {
	return p.data
}

func (p gradeSetParam) gradeModel() {}

type GradeWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	idField()
}

type GradeWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	idField()
}

type gradeWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaIDSetParam) gradeModel() {}

func (p gradeWithPrismaIDSetParam) idField() {}

type GradeWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	idField()
}

type gradeWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaIDEqualsParam) gradeModel() {}

func (p gradeWithPrismaIDEqualsParam) idField() {}

func (gradeWithPrismaIDSetParam) settable()  {}
func (gradeWithPrismaIDEqualsParam) equals() {}

type gradeWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaIDEqualsUniqueParam) gradeModel() {}
func (p gradeWithPrismaIDEqualsUniqueParam) idField()    {}

func (gradeWithPrismaIDEqualsUniqueParam) unique() {}
func (gradeWithPrismaIDEqualsUniqueParam) equals() {}

type GradeWithPrismaScheduleIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	scheduleIDField()
}

type GradeWithPrismaScheduleIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	scheduleIDField()
}

type gradeWithPrismaScheduleIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaScheduleIDSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaScheduleIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaScheduleIDSetParam) gradeModel() {}

func (p gradeWithPrismaScheduleIDSetParam) scheduleIDField() {}

type GradeWithPrismaScheduleIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	scheduleIDField()
}

type gradeWithPrismaScheduleIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaScheduleIDEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaScheduleIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaScheduleIDEqualsParam) gradeModel() {}

func (p gradeWithPrismaScheduleIDEqualsParam) scheduleIDField() {}

func (gradeWithPrismaScheduleIDSetParam) settable()  {}
func (gradeWithPrismaScheduleIDEqualsParam) equals() {}

type gradeWithPrismaScheduleIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaScheduleIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaScheduleIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaScheduleIDEqualsUniqueParam) gradeModel()      {}
func (p gradeWithPrismaScheduleIDEqualsUniqueParam) scheduleIDField() {}

func (gradeWithPrismaScheduleIDEqualsUniqueParam) unique() {}
func (gradeWithPrismaScheduleIDEqualsUniqueParam) equals() {}

type GradeWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	userIDField()
}

type GradeWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	userIDField()
}

type gradeWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUserIDSetParam) gradeModel() {}

func (p gradeWithPrismaUserIDSetParam) userIDField() {}

type GradeWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	userIDField()
}

type gradeWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUserIDEqualsParam) gradeModel() {}

func (p gradeWithPrismaUserIDEqualsParam) userIDField() {}

func (gradeWithPrismaUserIDSetParam) settable()  {}
func (gradeWithPrismaUserIDEqualsParam) equals() {}

type gradeWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUserIDEqualsUniqueParam) gradeModel()  {}
func (p gradeWithPrismaUserIDEqualsUniqueParam) userIDField() {}

func (gradeWithPrismaUserIDEqualsUniqueParam) unique() {}
func (gradeWithPrismaUserIDEqualsUniqueParam) equals() {}

type GradeWithPrismaPrelabEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	prelabField()
}

type GradeWithPrismaPrelabSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	prelabField()
}

type gradeWithPrismaPrelabSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaPrelabSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaPrelabSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaPrelabSetParam) gradeModel() {}

func (p gradeWithPrismaPrelabSetParam) prelabField() {}

type GradeWithPrismaPrelabWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	prelabField()
}

type gradeWithPrismaPrelabEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaPrelabEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaPrelabEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaPrelabEqualsParam) gradeModel() {}

func (p gradeWithPrismaPrelabEqualsParam) prelabField() {}

func (gradeWithPrismaPrelabSetParam) settable()  {}
func (gradeWithPrismaPrelabEqualsParam) equals() {}

type gradeWithPrismaPrelabEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaPrelabEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaPrelabEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaPrelabEqualsUniqueParam) gradeModel()  {}
func (p gradeWithPrismaPrelabEqualsUniqueParam) prelabField() {}

func (gradeWithPrismaPrelabEqualsUniqueParam) unique() {}
func (gradeWithPrismaPrelabEqualsUniqueParam) equals() {}

type GradeWithPrismaInlabEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	inlabField()
}

type GradeWithPrismaInlabSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	inlabField()
}

type gradeWithPrismaInlabSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaInlabSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaInlabSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaInlabSetParam) gradeModel() {}

func (p gradeWithPrismaInlabSetParam) inlabField() {}

type GradeWithPrismaInlabWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	inlabField()
}

type gradeWithPrismaInlabEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaInlabEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaInlabEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaInlabEqualsParam) gradeModel() {}

func (p gradeWithPrismaInlabEqualsParam) inlabField() {}

func (gradeWithPrismaInlabSetParam) settable()  {}
func (gradeWithPrismaInlabEqualsParam) equals() {}

type gradeWithPrismaInlabEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaInlabEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaInlabEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaInlabEqualsUniqueParam) gradeModel() {}
func (p gradeWithPrismaInlabEqualsUniqueParam) inlabField() {}

func (gradeWithPrismaInlabEqualsUniqueParam) unique() {}
func (gradeWithPrismaInlabEqualsUniqueParam) equals() {}

type GradeWithPrismaAbstractEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	abstractField()
}

type GradeWithPrismaAbstractSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	abstractField()
}

type gradeWithPrismaAbstractSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaAbstractSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaAbstractSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaAbstractSetParam) gradeModel() {}

func (p gradeWithPrismaAbstractSetParam) abstractField() {}

type GradeWithPrismaAbstractWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	abstractField()
}

type gradeWithPrismaAbstractEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaAbstractEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaAbstractEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaAbstractEqualsParam) gradeModel() {}

func (p gradeWithPrismaAbstractEqualsParam) abstractField() {}

func (gradeWithPrismaAbstractSetParam) settable()  {}
func (gradeWithPrismaAbstractEqualsParam) equals() {}

type gradeWithPrismaAbstractEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaAbstractEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaAbstractEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaAbstractEqualsUniqueParam) gradeModel()    {}
func (p gradeWithPrismaAbstractEqualsUniqueParam) abstractField() {}

func (gradeWithPrismaAbstractEqualsUniqueParam) unique() {}
func (gradeWithPrismaAbstractEqualsUniqueParam) equals() {}

type GradeWithPrismaIntroductionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	introductionField()
}

type GradeWithPrismaIntroductionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	introductionField()
}

type gradeWithPrismaIntroductionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaIntroductionSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaIntroductionSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaIntroductionSetParam) gradeModel() {}

func (p gradeWithPrismaIntroductionSetParam) introductionField() {}

type GradeWithPrismaIntroductionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	introductionField()
}

type gradeWithPrismaIntroductionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaIntroductionEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaIntroductionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaIntroductionEqualsParam) gradeModel() {}

func (p gradeWithPrismaIntroductionEqualsParam) introductionField() {}

func (gradeWithPrismaIntroductionSetParam) settable()  {}
func (gradeWithPrismaIntroductionEqualsParam) equals() {}

type gradeWithPrismaIntroductionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaIntroductionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaIntroductionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaIntroductionEqualsUniqueParam) gradeModel()        {}
func (p gradeWithPrismaIntroductionEqualsUniqueParam) introductionField() {}

func (gradeWithPrismaIntroductionEqualsUniqueParam) unique() {}
func (gradeWithPrismaIntroductionEqualsUniqueParam) equals() {}

type GradeWithPrismaMethodologyEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	methodologyField()
}

type GradeWithPrismaMethodologySetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	methodologyField()
}

type gradeWithPrismaMethodologySetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaMethodologySetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaMethodologySetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaMethodologySetParam) gradeModel() {}

func (p gradeWithPrismaMethodologySetParam) methodologyField() {}

type GradeWithPrismaMethodologyWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	methodologyField()
}

type gradeWithPrismaMethodologyEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaMethodologyEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaMethodologyEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaMethodologyEqualsParam) gradeModel() {}

func (p gradeWithPrismaMethodologyEqualsParam) methodologyField() {}

func (gradeWithPrismaMethodologySetParam) settable()  {}
func (gradeWithPrismaMethodologyEqualsParam) equals() {}

type gradeWithPrismaMethodologyEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaMethodologyEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaMethodologyEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaMethodologyEqualsUniqueParam) gradeModel()       {}
func (p gradeWithPrismaMethodologyEqualsUniqueParam) methodologyField() {}

func (gradeWithPrismaMethodologyEqualsUniqueParam) unique() {}
func (gradeWithPrismaMethodologyEqualsUniqueParam) equals() {}

type GradeWithPrismaDiscussionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	discussionField()
}

type GradeWithPrismaDiscussionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	discussionField()
}

type gradeWithPrismaDiscussionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaDiscussionSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaDiscussionSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaDiscussionSetParam) gradeModel() {}

func (p gradeWithPrismaDiscussionSetParam) discussionField() {}

type GradeWithPrismaDiscussionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	discussionField()
}

type gradeWithPrismaDiscussionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaDiscussionEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaDiscussionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaDiscussionEqualsParam) gradeModel() {}

func (p gradeWithPrismaDiscussionEqualsParam) discussionField() {}

func (gradeWithPrismaDiscussionSetParam) settable()  {}
func (gradeWithPrismaDiscussionEqualsParam) equals() {}

type gradeWithPrismaDiscussionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaDiscussionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaDiscussionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaDiscussionEqualsUniqueParam) gradeModel()      {}
func (p gradeWithPrismaDiscussionEqualsUniqueParam) discussionField() {}

func (gradeWithPrismaDiscussionEqualsUniqueParam) unique() {}
func (gradeWithPrismaDiscussionEqualsUniqueParam) equals() {}

type GradeWithPrismaConclusionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	conclusionField()
}

type GradeWithPrismaConclusionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	conclusionField()
}

type gradeWithPrismaConclusionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaConclusionSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaConclusionSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaConclusionSetParam) gradeModel() {}

func (p gradeWithPrismaConclusionSetParam) conclusionField() {}

type GradeWithPrismaConclusionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	conclusionField()
}

type gradeWithPrismaConclusionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaConclusionEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaConclusionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaConclusionEqualsParam) gradeModel() {}

func (p gradeWithPrismaConclusionEqualsParam) conclusionField() {}

func (gradeWithPrismaConclusionSetParam) settable()  {}
func (gradeWithPrismaConclusionEqualsParam) equals() {}

type gradeWithPrismaConclusionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaConclusionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaConclusionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaConclusionEqualsUniqueParam) gradeModel()      {}
func (p gradeWithPrismaConclusionEqualsUniqueParam) conclusionField() {}

func (gradeWithPrismaConclusionEqualsUniqueParam) unique() {}
func (gradeWithPrismaConclusionEqualsUniqueParam) equals() {}

type GradeWithPrismaFormattingEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	formattingField()
}

type GradeWithPrismaFormattingSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	formattingField()
}

type gradeWithPrismaFormattingSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaFormattingSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaFormattingSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaFormattingSetParam) gradeModel() {}

func (p gradeWithPrismaFormattingSetParam) formattingField() {}

type GradeWithPrismaFormattingWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	formattingField()
}

type gradeWithPrismaFormattingEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaFormattingEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaFormattingEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaFormattingEqualsParam) gradeModel() {}

func (p gradeWithPrismaFormattingEqualsParam) formattingField() {}

func (gradeWithPrismaFormattingSetParam) settable()  {}
func (gradeWithPrismaFormattingEqualsParam) equals() {}

type gradeWithPrismaFormattingEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaFormattingEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaFormattingEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaFormattingEqualsUniqueParam) gradeModel()      {}
func (p gradeWithPrismaFormattingEqualsUniqueParam) formattingField() {}

func (gradeWithPrismaFormattingEqualsUniqueParam) unique() {}
func (gradeWithPrismaFormattingEqualsUniqueParam) equals() {}

type GradeWithPrismaFeedbackEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	feedbackField()
}

type GradeWithPrismaFeedbackSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	feedbackField()
}

type gradeWithPrismaFeedbackSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaFeedbackSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaFeedbackSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaFeedbackSetParam) gradeModel() {}

func (p gradeWithPrismaFeedbackSetParam) feedbackField() {}

type GradeWithPrismaFeedbackWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	feedbackField()
}

type gradeWithPrismaFeedbackEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaFeedbackEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaFeedbackEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaFeedbackEqualsParam) gradeModel() {}

func (p gradeWithPrismaFeedbackEqualsParam) feedbackField() {}

func (gradeWithPrismaFeedbackSetParam) settable()  {}
func (gradeWithPrismaFeedbackEqualsParam) equals() {}

type gradeWithPrismaFeedbackEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaFeedbackEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaFeedbackEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaFeedbackEqualsUniqueParam) gradeModel()    {}
func (p gradeWithPrismaFeedbackEqualsUniqueParam) feedbackField() {}

func (gradeWithPrismaFeedbackEqualsUniqueParam) unique() {}
func (gradeWithPrismaFeedbackEqualsUniqueParam) equals() {}

type GradeWithPrismaGradedByEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	gradedByField()
}

type GradeWithPrismaGradedBySetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	gradedByField()
}

type gradeWithPrismaGradedBySetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaGradedBySetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaGradedBySetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaGradedBySetParam) gradeModel() {}

func (p gradeWithPrismaGradedBySetParam) gradedByField() {}

type GradeWithPrismaGradedByWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	gradedByField()
}

type gradeWithPrismaGradedByEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaGradedByEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaGradedByEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaGradedByEqualsParam) gradeModel() {}

func (p gradeWithPrismaGradedByEqualsParam) gradedByField() {}

func (gradeWithPrismaGradedBySetParam) settable()  {}
func (gradeWithPrismaGradedByEqualsParam) equals() {}

type gradeWithPrismaGradedByEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaGradedByEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaGradedByEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaGradedByEqualsUniqueParam) gradeModel()    {}
func (p gradeWithPrismaGradedByEqualsUniqueParam) gradedByField() {}

func (gradeWithPrismaGradedByEqualsUniqueParam) unique() {}
func (gradeWithPrismaGradedByEqualsUniqueParam) equals() {}

type GradeWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	createdAtField()
}

type GradeWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	createdAtField()
}

type gradeWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaCreatedAtSetParam) gradeModel() {}

func (p gradeWithPrismaCreatedAtSetParam) createdAtField() {}

type GradeWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	createdAtField()
}

type gradeWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaCreatedAtEqualsParam) gradeModel() {}

func (p gradeWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (gradeWithPrismaCreatedAtSetParam) settable()  {}
func (gradeWithPrismaCreatedAtEqualsParam) equals() {}

type gradeWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaCreatedAtEqualsUniqueParam) gradeModel()     {}
func (p gradeWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (gradeWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (gradeWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type GradeWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	updatedAtField()
}

type GradeWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	updatedAtField()
}

type gradeWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUpdatedAtSetParam) gradeModel() {}

func (p gradeWithPrismaUpdatedAtSetParam) updatedAtField() {}

type GradeWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	updatedAtField()
}

type gradeWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUpdatedAtEqualsParam) gradeModel() {}

func (p gradeWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (gradeWithPrismaUpdatedAtSetParam) settable()  {}
func (gradeWithPrismaUpdatedAtEqualsParam) equals() {}

type gradeWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUpdatedAtEqualsUniqueParam) gradeModel()     {}
func (p gradeWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (gradeWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (gradeWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type GradeWithPrismaScheduleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	scheduleField()
}

type GradeWithPrismaScheduleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	scheduleField()
}

type gradeWithPrismaScheduleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaScheduleSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaScheduleSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaScheduleSetParam) gradeModel() {}

func (p gradeWithPrismaScheduleSetParam) scheduleField() {}

type GradeWithPrismaScheduleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	scheduleField()
}

type gradeWithPrismaScheduleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaScheduleEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaScheduleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaScheduleEqualsParam) gradeModel() {}

func (p gradeWithPrismaScheduleEqualsParam) scheduleField() {}

func (gradeWithPrismaScheduleSetParam) settable()  {}
func (gradeWithPrismaScheduleEqualsParam) equals() {}

type gradeWithPrismaScheduleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaScheduleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaScheduleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaScheduleEqualsUniqueParam) gradeModel()    {}
func (p gradeWithPrismaScheduleEqualsUniqueParam) scheduleField() {}

func (gradeWithPrismaScheduleEqualsUniqueParam) unique() {}
func (gradeWithPrismaScheduleEqualsUniqueParam) equals() {}

type GradeWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	userField()
}

type GradeWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	userField()
}

type gradeWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUserSetParam) gradeModel() {}

func (p gradeWithPrismaUserSetParam) userField() {}

type GradeWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	userField()
}

type gradeWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUserEqualsParam) gradeModel() {}

func (p gradeWithPrismaUserEqualsParam) userField() {}

func (gradeWithPrismaUserSetParam) settable()  {}
func (gradeWithPrismaUserEqualsParam) equals() {}

type gradeWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaUserEqualsUniqueParam) gradeModel() {}
func (p gradeWithPrismaUserEqualsUniqueParam) userField()  {}

func (gradeWithPrismaUserEqualsUniqueParam) unique() {}
func (gradeWithPrismaUserEqualsUniqueParam) equals() {}

type GradeWithPrismaGraderEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	gradeModel()
	graderField()
}

type GradeWithPrismaGraderSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	graderField()
}

type gradeWithPrismaGraderSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaGraderSetParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaGraderSetParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaGraderSetParam) gradeModel() {}

func (p gradeWithPrismaGraderSetParam) graderField() {}

type GradeWithPrismaGraderWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	gradeModel()
	graderField()
}

type gradeWithPrismaGraderEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaGraderEqualsParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaGraderEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaGraderEqualsParam) gradeModel() {}

func (p gradeWithPrismaGraderEqualsParam) graderField() {}

func (gradeWithPrismaGraderSetParam) settable()  {}
func (gradeWithPrismaGraderEqualsParam) equals() {}

type gradeWithPrismaGraderEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p gradeWithPrismaGraderEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p gradeWithPrismaGraderEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p gradeWithPrismaGraderEqualsUniqueParam) gradeModel()  {}
func (p gradeWithPrismaGraderEqualsUniqueParam) graderField() {}

func (gradeWithPrismaGraderEqualsUniqueParam) unique() {}
func (gradeWithPrismaGraderEqualsUniqueParam) equals() {}

type announcementActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var announcementOutput = []builder.Output{
	{Name: "id"},
	{Name: "title"},
	{Name: "content"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "authorId"},
}

type AnnouncementRelationWith interface {
	getQuery() builder.Query
	with()
	announcementRelation()
}

type AnnouncementWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
}

type announcementDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementDefaultParam) field() builder.Field {
	return p.data
}

func (p announcementDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p announcementDefaultParam) announcementModel() {}

type AnnouncementOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
}

type announcementOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementOrderByParam) field() builder.Field {
	return p.data
}

func (p announcementOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p announcementOrderByParam) announcementModel() {}

type AnnouncementCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	isCursor()
}

type announcementCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementCursorParam) field() builder.Field {
	return p.data
}

func (p announcementCursorParam) isCursor() {}

func (p announcementCursorParam) getQuery() builder.Query {
	return p.query
}

func (p announcementCursorParam) announcementModel() {}

type AnnouncementParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	announcementModel()
}

type announcementParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p announcementParamUnique) announcementModel() {}

func (announcementParamUnique) unique() {}

func (p announcementParamUnique) field() builder.Field {
	return p.data
}

func (p announcementParamUnique) getQuery() builder.Query {
	return p.query
}

type AnnouncementEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
}

type announcementEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementEqualsParam) announcementModel() {}

func (announcementEqualsParam) equals() {}

func (p announcementEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementEqualsParam) getQuery() builder.Query {
	return p.query
}

type AnnouncementEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	announcementModel()
}

type announcementEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementEqualsUniqueParam) announcementModel() {}

func (announcementEqualsUniqueParam) unique() {}
func (announcementEqualsUniqueParam) equals() {}

func (p announcementEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type AnnouncementSetParam interface {
	field() builder.Field
	settable()
	announcementModel()
}

type announcementSetParam struct {
	data builder.Field
}

func (announcementSetParam) settable() {}

func (p announcementSetParam) field() builder.Field {
	return p.data
}

func (p announcementSetParam) announcementModel() {}

type AnnouncementWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
	idField()
}

type AnnouncementWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	idField()
}

type announcementWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaIDSetParam) announcementModel() {}

func (p announcementWithPrismaIDSetParam) idField() {}

type AnnouncementWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	idField()
}

type announcementWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaIDEqualsParam) announcementModel() {}

func (p announcementWithPrismaIDEqualsParam) idField() {}

func (announcementWithPrismaIDSetParam) settable()  {}
func (announcementWithPrismaIDEqualsParam) equals() {}

type announcementWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaIDEqualsUniqueParam) announcementModel() {}
func (p announcementWithPrismaIDEqualsUniqueParam) idField()           {}

func (announcementWithPrismaIDEqualsUniqueParam) unique() {}
func (announcementWithPrismaIDEqualsUniqueParam) equals() {}

type AnnouncementWithPrismaTitleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
	titleField()
}

type AnnouncementWithPrismaTitleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	titleField()
}

type announcementWithPrismaTitleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaTitleSetParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaTitleSetParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaTitleSetParam) announcementModel() {}

func (p announcementWithPrismaTitleSetParam) titleField() {}

type AnnouncementWithPrismaTitleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	titleField()
}

type announcementWithPrismaTitleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaTitleEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaTitleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaTitleEqualsParam) announcementModel() {}

func (p announcementWithPrismaTitleEqualsParam) titleField() {}

func (announcementWithPrismaTitleSetParam) settable()  {}
func (announcementWithPrismaTitleEqualsParam) equals() {}

type announcementWithPrismaTitleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaTitleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaTitleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaTitleEqualsUniqueParam) announcementModel() {}
func (p announcementWithPrismaTitleEqualsUniqueParam) titleField()        {}

func (announcementWithPrismaTitleEqualsUniqueParam) unique() {}
func (announcementWithPrismaTitleEqualsUniqueParam) equals() {}

type AnnouncementWithPrismaContentEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
	contentField()
}

type AnnouncementWithPrismaContentSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	contentField()
}

type announcementWithPrismaContentSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaContentSetParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaContentSetParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaContentSetParam) announcementModel() {}

func (p announcementWithPrismaContentSetParam) contentField() {}

type AnnouncementWithPrismaContentWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	contentField()
}

type announcementWithPrismaContentEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaContentEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaContentEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaContentEqualsParam) announcementModel() {}

func (p announcementWithPrismaContentEqualsParam) contentField() {}

func (announcementWithPrismaContentSetParam) settable()  {}
func (announcementWithPrismaContentEqualsParam) equals() {}

type announcementWithPrismaContentEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaContentEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaContentEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaContentEqualsUniqueParam) announcementModel() {}
func (p announcementWithPrismaContentEqualsUniqueParam) contentField()      {}

func (announcementWithPrismaContentEqualsUniqueParam) unique() {}
func (announcementWithPrismaContentEqualsUniqueParam) equals() {}

type AnnouncementWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
	createdAtField()
}

type AnnouncementWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	createdAtField()
}

type announcementWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaCreatedAtSetParam) announcementModel() {}

func (p announcementWithPrismaCreatedAtSetParam) createdAtField() {}

type AnnouncementWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	createdAtField()
}

type announcementWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaCreatedAtEqualsParam) announcementModel() {}

func (p announcementWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (announcementWithPrismaCreatedAtSetParam) settable()  {}
func (announcementWithPrismaCreatedAtEqualsParam) equals() {}

type announcementWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaCreatedAtEqualsUniqueParam) announcementModel() {}
func (p announcementWithPrismaCreatedAtEqualsUniqueParam) createdAtField()    {}

func (announcementWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (announcementWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type AnnouncementWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
	updatedAtField()
}

type AnnouncementWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	updatedAtField()
}

type announcementWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaUpdatedAtSetParam) announcementModel() {}

func (p announcementWithPrismaUpdatedAtSetParam) updatedAtField() {}

type AnnouncementWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	updatedAtField()
}

type announcementWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaUpdatedAtEqualsParam) announcementModel() {}

func (p announcementWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (announcementWithPrismaUpdatedAtSetParam) settable()  {}
func (announcementWithPrismaUpdatedAtEqualsParam) equals() {}

type announcementWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaUpdatedAtEqualsUniqueParam) announcementModel() {}
func (p announcementWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField()    {}

func (announcementWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (announcementWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type AnnouncementWithPrismaAuthorIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
	authorIDField()
}

type AnnouncementWithPrismaAuthorIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	authorIDField()
}

type announcementWithPrismaAuthorIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaAuthorIDSetParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaAuthorIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaAuthorIDSetParam) announcementModel() {}

func (p announcementWithPrismaAuthorIDSetParam) authorIDField() {}

type AnnouncementWithPrismaAuthorIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	authorIDField()
}

type announcementWithPrismaAuthorIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaAuthorIDEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaAuthorIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaAuthorIDEqualsParam) announcementModel() {}

func (p announcementWithPrismaAuthorIDEqualsParam) authorIDField() {}

func (announcementWithPrismaAuthorIDSetParam) settable()  {}
func (announcementWithPrismaAuthorIDEqualsParam) equals() {}

type announcementWithPrismaAuthorIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaAuthorIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaAuthorIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaAuthorIDEqualsUniqueParam) announcementModel() {}
func (p announcementWithPrismaAuthorIDEqualsUniqueParam) authorIDField()     {}

func (announcementWithPrismaAuthorIDEqualsUniqueParam) unique() {}
func (announcementWithPrismaAuthorIDEqualsUniqueParam) equals() {}

type AnnouncementWithPrismaAuthorEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	announcementModel()
	authorField()
}

type AnnouncementWithPrismaAuthorSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	authorField()
}

type announcementWithPrismaAuthorSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaAuthorSetParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaAuthorSetParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaAuthorSetParam) announcementModel() {}

func (p announcementWithPrismaAuthorSetParam) authorField() {}

type AnnouncementWithPrismaAuthorWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	announcementModel()
	authorField()
}

type announcementWithPrismaAuthorEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaAuthorEqualsParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaAuthorEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaAuthorEqualsParam) announcementModel() {}

func (p announcementWithPrismaAuthorEqualsParam) authorField() {}

func (announcementWithPrismaAuthorSetParam) settable()  {}
func (announcementWithPrismaAuthorEqualsParam) equals() {}

type announcementWithPrismaAuthorEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p announcementWithPrismaAuthorEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p announcementWithPrismaAuthorEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p announcementWithPrismaAuthorEqualsUniqueParam) announcementModel() {}
func (p announcementWithPrismaAuthorEqualsUniqueParam) authorField()       {}

func (announcementWithPrismaAuthorEqualsUniqueParam) unique() {}
func (announcementWithPrismaAuthorEqualsUniqueParam) equals() {}

type attendanceCodeActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var attendanceCodeOutput = []builder.Output{
	{Name: "id"},
	{Name: "scheduleId"},
	{Name: "code"},
	{Name: "expiredAt"},
	{Name: "createdAt"},
}

type AttendanceCodeRelationWith interface {
	getQuery() builder.Query
	with()
	attendanceCodeRelation()
}

type AttendanceCodeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
}

type attendanceCodeDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeDefaultParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeDefaultParam) attendanceCodeModel() {}

type AttendanceCodeOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
}

type attendanceCodeOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeOrderByParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeOrderByParam) attendanceCodeModel() {}

type AttendanceCodeCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	isCursor()
}

type attendanceCodeCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeCursorParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeCursorParam) isCursor() {}

func (p attendanceCodeCursorParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeCursorParam) attendanceCodeModel() {}

type AttendanceCodeParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	attendanceCodeModel()
}

type attendanceCodeParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeParamUnique) attendanceCodeModel() {}

func (attendanceCodeParamUnique) unique() {}

func (p attendanceCodeParamUnique) field() builder.Field {
	return p.data
}

func (p attendanceCodeParamUnique) getQuery() builder.Query {
	return p.query
}

type AttendanceCodeEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
}

type attendanceCodeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeEqualsParam) attendanceCodeModel() {}

func (attendanceCodeEqualsParam) equals() {}

func (p attendanceCodeEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeEqualsParam) getQuery() builder.Query {
	return p.query
}

type AttendanceCodeEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	attendanceCodeModel()
}

type attendanceCodeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeEqualsUniqueParam) attendanceCodeModel() {}

func (attendanceCodeEqualsUniqueParam) unique() {}
func (attendanceCodeEqualsUniqueParam) equals() {}

func (p attendanceCodeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type AttendanceCodeSetParam interface {
	field() builder.Field
	settable()
	attendanceCodeModel()
}

type attendanceCodeSetParam struct {
	data builder.Field
}

func (attendanceCodeSetParam) settable() {}

func (p attendanceCodeSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeSetParam) attendanceCodeModel() {}

type AttendanceCodeWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
	idField()
}

type AttendanceCodeWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	idField()
}

type attendanceCodeWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaIDSetParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaIDSetParam) idField() {}

type AttendanceCodeWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	idField()
}

type attendanceCodeWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaIDEqualsParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaIDEqualsParam) idField() {}

func (attendanceCodeWithPrismaIDSetParam) settable()  {}
func (attendanceCodeWithPrismaIDEqualsParam) equals() {}

type attendanceCodeWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaIDEqualsUniqueParam) attendanceCodeModel() {}
func (p attendanceCodeWithPrismaIDEqualsUniqueParam) idField()             {}

func (attendanceCodeWithPrismaIDEqualsUniqueParam) unique() {}
func (attendanceCodeWithPrismaIDEqualsUniqueParam) equals() {}

type AttendanceCodeWithPrismaScheduleIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
	scheduleIDField()
}

type AttendanceCodeWithPrismaScheduleIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	scheduleIDField()
}

type attendanceCodeWithPrismaScheduleIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaScheduleIDSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaScheduleIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaScheduleIDSetParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaScheduleIDSetParam) scheduleIDField() {}

type AttendanceCodeWithPrismaScheduleIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	scheduleIDField()
}

type attendanceCodeWithPrismaScheduleIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaScheduleIDEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaScheduleIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaScheduleIDEqualsParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaScheduleIDEqualsParam) scheduleIDField() {}

func (attendanceCodeWithPrismaScheduleIDSetParam) settable()  {}
func (attendanceCodeWithPrismaScheduleIDEqualsParam) equals() {}

type attendanceCodeWithPrismaScheduleIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaScheduleIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaScheduleIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaScheduleIDEqualsUniqueParam) attendanceCodeModel() {}
func (p attendanceCodeWithPrismaScheduleIDEqualsUniqueParam) scheduleIDField()     {}

func (attendanceCodeWithPrismaScheduleIDEqualsUniqueParam) unique() {}
func (attendanceCodeWithPrismaScheduleIDEqualsUniqueParam) equals() {}

type AttendanceCodeWithPrismaCodeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
	codeField()
}

type AttendanceCodeWithPrismaCodeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	codeField()
}

type attendanceCodeWithPrismaCodeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaCodeSetParam) expiredAtField() {
	//TODO implement me
	panic("implement me")
}

func (p attendanceCodeWithPrismaCodeSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaCodeSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaCodeSetParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaCodeSetParam) codeField() {}

type AttendanceCodeWithPrismaCodeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	codeField()
}

type attendanceCodeWithPrismaCodeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaCodeEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaCodeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaCodeEqualsParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaCodeEqualsParam) codeField() {}

func (attendanceCodeWithPrismaCodeSetParam) settable()  {}
func (attendanceCodeWithPrismaCodeEqualsParam) equals() {}

type attendanceCodeWithPrismaCodeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaCodeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaCodeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaCodeEqualsUniqueParam) attendanceCodeModel() {}
func (p attendanceCodeWithPrismaCodeEqualsUniqueParam) codeField()           {}

func (attendanceCodeWithPrismaCodeEqualsUniqueParam) unique() {}
func (attendanceCodeWithPrismaCodeEqualsUniqueParam) equals() {}

type AttendanceCodeWithPrismaExpiredAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
	expiredAtField()
}

type AttendanceCodeWithPrismaExpiredAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	expiredAtField()
}

type attendanceCodeWithPrismaExpiredAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaExpiredAtSetParam) scheduleField() {
	//TODO implement me
	panic("implement me")
}

func (p attendanceCodeWithPrismaExpiredAtSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaExpiredAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaExpiredAtSetParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaExpiredAtSetParam) expiredAtField() {}

type AttendanceCodeWithPrismaExpiredAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	expiredAtField()
}

type attendanceCodeWithPrismaExpiredAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaExpiredAtEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaExpiredAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaExpiredAtEqualsParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaExpiredAtEqualsParam) expiredAtField() {}

func (attendanceCodeWithPrismaExpiredAtSetParam) settable()  {}
func (attendanceCodeWithPrismaExpiredAtEqualsParam) equals() {}

type attendanceCodeWithPrismaExpiredAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaExpiredAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaExpiredAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaExpiredAtEqualsUniqueParam) attendanceCodeModel() {}
func (p attendanceCodeWithPrismaExpiredAtEqualsUniqueParam) expiredAtField()      {}

func (attendanceCodeWithPrismaExpiredAtEqualsUniqueParam) unique() {}
func (attendanceCodeWithPrismaExpiredAtEqualsUniqueParam) equals() {}

type AttendanceCodeWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
	createdAtField()
}

type AttendanceCodeWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	createdAtField()
}

type attendanceCodeWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaCreatedAtSetParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaCreatedAtSetParam) createdAtField() {}

type AttendanceCodeWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	createdAtField()
}

type attendanceCodeWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaCreatedAtEqualsParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (attendanceCodeWithPrismaCreatedAtSetParam) settable()  {}
func (attendanceCodeWithPrismaCreatedAtEqualsParam) equals() {}

type attendanceCodeWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaCreatedAtEqualsUniqueParam) attendanceCodeModel() {}
func (p attendanceCodeWithPrismaCreatedAtEqualsUniqueParam) createdAtField()      {}

func (attendanceCodeWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (attendanceCodeWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type AttendanceCodeWithPrismaScheduleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
	scheduleField()
}

type AttendanceCodeWithPrismaScheduleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	scheduleField()
}

type attendanceCodeWithPrismaScheduleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaScheduleSetParam) codeField() {
	//TODO implement me
	panic("implement me")
}

func (p attendanceCodeWithPrismaScheduleSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaScheduleSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaScheduleSetParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaScheduleSetParam) scheduleField() {}

type AttendanceCodeWithPrismaScheduleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	scheduleField()
}

type attendanceCodeWithPrismaScheduleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaScheduleEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaScheduleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaScheduleEqualsParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaScheduleEqualsParam) scheduleField() {}

func (attendanceCodeWithPrismaScheduleSetParam) settable()  {}
func (attendanceCodeWithPrismaScheduleEqualsParam) equals() {}

type attendanceCodeWithPrismaScheduleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaScheduleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaScheduleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaScheduleEqualsUniqueParam) attendanceCodeModel() {}
func (p attendanceCodeWithPrismaScheduleEqualsUniqueParam) scheduleField()       {}

func (attendanceCodeWithPrismaScheduleEqualsUniqueParam) unique() {}
func (attendanceCodeWithPrismaScheduleEqualsUniqueParam) equals() {}

type AttendanceCodeWithPrismaAttendancesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceCodeModel()
	attendancesField()
}

type AttendanceCodeWithPrismaAttendancesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	attendancesField()
}

type attendanceCodeWithPrismaAttendancesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaAttendancesSetParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaAttendancesSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaAttendancesSetParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaAttendancesSetParam) attendancesField() {}

type AttendanceCodeWithPrismaAttendancesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceCodeModel()
	attendancesField()
}

type attendanceCodeWithPrismaAttendancesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaAttendancesEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaAttendancesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaAttendancesEqualsParam) attendanceCodeModel() {}

func (p attendanceCodeWithPrismaAttendancesEqualsParam) attendancesField() {}

func (attendanceCodeWithPrismaAttendancesSetParam) settable()  {}
func (attendanceCodeWithPrismaAttendancesEqualsParam) equals() {}

type attendanceCodeWithPrismaAttendancesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCodeWithPrismaAttendancesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceCodeWithPrismaAttendancesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCodeWithPrismaAttendancesEqualsUniqueParam) attendanceCodeModel() {}
func (p attendanceCodeWithPrismaAttendancesEqualsUniqueParam) attendancesField()    {}

func (attendanceCodeWithPrismaAttendancesEqualsUniqueParam) unique() {}
func (attendanceCodeWithPrismaAttendancesEqualsUniqueParam) equals() {}

type attendanceActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var attendanceOutput = []builder.Output{
	{Name: "id"},
	{Name: "codeId"},
	{Name: "userId"},
	{Name: "status"},
	{Name: "createdAt"},
}

type AttendanceRelationWith interface {
	getQuery() builder.Query
	with()
	attendanceRelation()
}

type AttendanceWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
}

type attendanceDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceDefaultParam) field() builder.Field {
	return p.data
}

func (p attendanceDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceDefaultParam) attendanceModel() {}

type AttendanceOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
}

type attendanceOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceOrderByParam) field() builder.Field {
	return p.data
}

func (p attendanceOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceOrderByParam) attendanceModel() {}

type AttendanceCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	isCursor()
}

type attendanceCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceCursorParam) field() builder.Field {
	return p.data
}

func (p attendanceCursorParam) isCursor() {}

func (p attendanceCursorParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceCursorParam) attendanceModel() {}

type AttendanceParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	attendanceModel()
}

type attendanceParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceParamUnique) attendanceModel() {}

func (attendanceParamUnique) unique() {}

func (p attendanceParamUnique) field() builder.Field {
	return p.data
}

func (p attendanceParamUnique) getQuery() builder.Query {
	return p.query
}

type AttendanceEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
}

type attendanceEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceEqualsParam) attendanceModel() {}

func (attendanceEqualsParam) equals() {}

func (p attendanceEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceEqualsParam) getQuery() builder.Query {
	return p.query
}

type AttendanceEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	attendanceModel()
}

type attendanceEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceEqualsUniqueParam) attendanceModel() {}

func (attendanceEqualsUniqueParam) unique() {}
func (attendanceEqualsUniqueParam) equals() {}

func (p attendanceEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type AttendanceSetParam interface {
	field() builder.Field
	settable()
	attendanceModel()
}

type attendanceSetParam struct {
	data builder.Field
}

func (attendanceSetParam) settable() {}

func (p attendanceSetParam) field() builder.Field {
	return p.data
}

func (p attendanceSetParam) attendanceModel() {}

type AttendanceWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
	idField()
}

type AttendanceWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	idField()
}

type attendanceWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaIDSetParam) attendanceModel() {}

func (p attendanceWithPrismaIDSetParam) idField() {}

type AttendanceWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	idField()
}

type attendanceWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaIDEqualsParam) attendanceModel() {}

func (p attendanceWithPrismaIDEqualsParam) idField() {}

func (attendanceWithPrismaIDSetParam) settable()  {}
func (attendanceWithPrismaIDEqualsParam) equals() {}

type attendanceWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaIDEqualsUniqueParam) attendanceModel() {}
func (p attendanceWithPrismaIDEqualsUniqueParam) idField()         {}

func (attendanceWithPrismaIDEqualsUniqueParam) unique() {}
func (attendanceWithPrismaIDEqualsUniqueParam) equals() {}

type AttendanceWithPrismaCodeIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
	codeIDField()
}

type AttendanceWithPrismaCodeIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	codeIDField()
}

type attendanceWithPrismaCodeIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCodeIDSetParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCodeIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCodeIDSetParam) attendanceModel() {}

func (p attendanceWithPrismaCodeIDSetParam) codeIDField() {}

type AttendanceWithPrismaCodeIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	codeIDField()
}

type attendanceWithPrismaCodeIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCodeIDEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCodeIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCodeIDEqualsParam) attendanceModel() {}

func (p attendanceWithPrismaCodeIDEqualsParam) codeIDField() {}

func (attendanceWithPrismaCodeIDSetParam) settable()  {}
func (attendanceWithPrismaCodeIDEqualsParam) equals() {}

type attendanceWithPrismaCodeIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCodeIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCodeIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCodeIDEqualsUniqueParam) attendanceModel() {}
func (p attendanceWithPrismaCodeIDEqualsUniqueParam) codeIDField()     {}

func (attendanceWithPrismaCodeIDEqualsUniqueParam) unique() {}
func (attendanceWithPrismaCodeIDEqualsUniqueParam) equals() {}

type AttendanceWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
	userIDField()
}

type AttendanceWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	userIDField()
}

type attendanceWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaUserIDSetParam) attendanceModel() {}

func (p attendanceWithPrismaUserIDSetParam) userIDField() {}

type AttendanceWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	userIDField()
}

type attendanceWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaUserIDEqualsParam) attendanceModel() {}

func (p attendanceWithPrismaUserIDEqualsParam) userIDField() {}

func (attendanceWithPrismaUserIDSetParam) settable()  {}
func (attendanceWithPrismaUserIDEqualsParam) equals() {}

type attendanceWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaUserIDEqualsUniqueParam) attendanceModel() {}
func (p attendanceWithPrismaUserIDEqualsUniqueParam) userIDField()     {}

func (attendanceWithPrismaUserIDEqualsUniqueParam) unique() {}
func (attendanceWithPrismaUserIDEqualsUniqueParam) equals() {}

type AttendanceWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
	statusField()
}

type AttendanceWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	statusField()
}

type attendanceWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaStatusSetParam) attendanceModel() {}

func (p attendanceWithPrismaStatusSetParam) statusField() {}

type AttendanceWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	statusField()
}

type attendanceWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaStatusEqualsParam) attendanceModel() {}

func (p attendanceWithPrismaStatusEqualsParam) statusField() {}

func (attendanceWithPrismaStatusSetParam) settable()  {}
func (attendanceWithPrismaStatusEqualsParam) equals() {}

type attendanceWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaStatusEqualsUniqueParam) attendanceModel() {}
func (p attendanceWithPrismaStatusEqualsUniqueParam) statusField()     {}

func (attendanceWithPrismaStatusEqualsUniqueParam) unique() {}
func (attendanceWithPrismaStatusEqualsUniqueParam) equals() {}

type AttendanceWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
	createdAtField()
}

type AttendanceWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	createdAtField()
}

type attendanceWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCreatedAtSetParam) attendanceModel() {}

func (p attendanceWithPrismaCreatedAtSetParam) createdAtField() {}

type AttendanceWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	createdAtField()
}

type attendanceWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCreatedAtEqualsParam) attendanceModel() {}

func (p attendanceWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (attendanceWithPrismaCreatedAtSetParam) settable()  {}
func (attendanceWithPrismaCreatedAtEqualsParam) equals() {}

type attendanceWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCreatedAtEqualsUniqueParam) attendanceModel() {}
func (p attendanceWithPrismaCreatedAtEqualsUniqueParam) createdAtField()  {}

func (attendanceWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (attendanceWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type AttendanceWithPrismaCodeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
	codeField()
}

type AttendanceWithPrismaCodeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	codeField()
}

type attendanceWithPrismaCodeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCodeSetParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCodeSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCodeSetParam) attendanceModel() {}

func (p attendanceWithPrismaCodeSetParam) codeField() {}

type AttendanceWithPrismaCodeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	codeField()
}

type attendanceWithPrismaCodeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCodeEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCodeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCodeEqualsParam) attendanceModel() {}

func (p attendanceWithPrismaCodeEqualsParam) codeField() {}

func (attendanceWithPrismaCodeSetParam) settable()  {}
func (attendanceWithPrismaCodeEqualsParam) equals() {}

type attendanceWithPrismaCodeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaCodeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaCodeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaCodeEqualsUniqueParam) attendanceModel() {}
func (p attendanceWithPrismaCodeEqualsUniqueParam) codeField()       {}

func (attendanceWithPrismaCodeEqualsUniqueParam) unique() {}
func (attendanceWithPrismaCodeEqualsUniqueParam) equals() {}

type AttendanceWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	attendanceModel()
	userField()
}

type AttendanceWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	userField()
}

type attendanceWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaUserSetParam) attendanceModel() {}

func (p attendanceWithPrismaUserSetParam) userField() {}

type AttendanceWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	attendanceModel()
	userField()
}

type attendanceWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaUserEqualsParam) attendanceModel() {}

func (p attendanceWithPrismaUserEqualsParam) userField() {}

func (attendanceWithPrismaUserSetParam) settable()  {}
func (attendanceWithPrismaUserEqualsParam) equals() {}

type attendanceWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p attendanceWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p attendanceWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p attendanceWithPrismaUserEqualsUniqueParam) attendanceModel() {}
func (p attendanceWithPrismaUserEqualsUniqueParam) userField()       {}

func (attendanceWithPrismaUserEqualsUniqueParam) unique() {}
func (attendanceWithPrismaUserEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_nrp UserWithPrismaNrpSetParam,
	_name UserWithPrismaNameSetParam,
	_about UserWithPrismaAboutSetParam,
	_email UserWithPrismaEmailSetParam,
	_phone UserWithPrismaPhoneSetParam,
	_password UserWithPrismaPasswordSetParam,
	_role UserWithPrismaRoleSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _nrp.field())
	fields = append(fields, _name.field())
	fields = append(fields, _about.field())
	fields = append(fields, _email.field())
	fields = append(fields, _phone.field())
	fields = append(fields, _password.field())
	fields = append(fields, _role.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single group.
func (r groupActions) CreateOne(
	_name GroupWithPrismaNameSetParam,

	optional ...GroupSetParam,
) groupCreateOne {
	var v groupCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Group"
	v.query.Outputs = groupOutput

	var fields []builder.Field

	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r groupCreateOne) With(params ...GroupRelationWith) groupCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type groupCreateOne struct {
	query builder.Query
}

func (p groupCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p groupCreateOne) groupModel() {}

func (r groupCreateOne) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupCreateOne) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single practicum.
func (r practicumActions) CreateOne(
	_title PracticumWithPrismaTitleSetParam,

	optional ...PracticumSetParam,
) practicumCreateOne {
	var v practicumCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Practicum"
	v.query.Outputs = practicumOutput

	var fields []builder.Field

	fields = append(fields, _title.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r practicumCreateOne) With(params ...PracticumRelationWith) practicumCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type practicumCreateOne struct {
	query builder.Query
}

func (p practicumCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p practicumCreateOne) practicumModel() {}

func (r practicumCreateOne) Exec(ctx context.Context) (*PracticumModel, error) {
	var v PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumCreateOne) Tx() PracticumUniqueTxResult {
	v := newPracticumUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single schedule.
func (r scheduleActions) CreateOne(
	_practicum ScheduleWithPrismaPracticumSetParam,
	_group ScheduleWithPrismaGroupSetParam,
	_assistant ScheduleWithPrismaAssistantSetParam,

	optional ...ScheduleSetParam,
) scheduleCreateOne {
	var v scheduleCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Schedule"
	v.query.Outputs = scheduleOutput

	var fields []builder.Field

	fields = append(fields, _practicum.field())
	fields = append(fields, _group.field())
	fields = append(fields, _assistant.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r scheduleCreateOne) With(params ...ScheduleRelationWith) scheduleCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type scheduleCreateOne struct {
	query builder.Query
}

func (p scheduleCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p scheduleCreateOne) scheduleModel() {}

func (r scheduleCreateOne) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleCreateOne) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single grade.
func (r gradeActions) CreateOne(
	_schedule GradeWithPrismaScheduleSetParam,
	_user GradeWithPrismaUserSetParam,
	_grader GradeWithPrismaGraderSetParam,

	optional ...GradeSetParam,
) gradeCreateOne {
	var v gradeCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Grade"
	v.query.Outputs = gradeOutput

	var fields []builder.Field

	fields = append(fields, _schedule.field())
	fields = append(fields, _user.field())
	fields = append(fields, _grader.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r gradeCreateOne) With(params ...GradeRelationWith) gradeCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type gradeCreateOne struct {
	query builder.Query
}

func (p gradeCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p gradeCreateOne) gradeModel() {}

func (r gradeCreateOne) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeCreateOne) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single announcement.
func (r announcementActions) CreateOne(
	_title AnnouncementWithPrismaTitleSetParam,
	_content AnnouncementWithPrismaContentSetParam,
	_author AnnouncementWithPrismaAuthorSetParam,

	optional ...AnnouncementSetParam,
) announcementCreateOne {
	var v announcementCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Announcement"
	v.query.Outputs = announcementOutput

	var fields []builder.Field

	fields = append(fields, _title.field())
	fields = append(fields, _content.field())
	fields = append(fields, _author.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r announcementCreateOne) With(params ...AnnouncementRelationWith) announcementCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type announcementCreateOne struct {
	query builder.Query
}

func (p announcementCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p announcementCreateOne) announcementModel() {}

func (r announcementCreateOne) Exec(ctx context.Context) (*AnnouncementModel, error) {
	var v AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementCreateOne) Tx() AnnouncementUniqueTxResult {
	v := newAnnouncementUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single attendanceCode.
func (r attendanceCodeActions) CreateOne(
	_code AttendanceCodeWithPrismaCodeSetParam,
	_expiredAt AttendanceCodeWithPrismaExpiredAtSetParam,
	_schedule AttendanceCodeWithPrismaScheduleSetParam,

	optional ...AttendanceCodeSetParam,
) attendanceCodeCreateOne {
	var v attendanceCodeCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "AttendanceCode"
	v.query.Outputs = attendanceCodeOutput

	var fields []builder.Field

	fields = append(fields, _code.field())
	fields = append(fields, _expiredAt.field())
	fields = append(fields, _schedule.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r attendanceCodeCreateOne) With(params ...AttendanceCodeRelationWith) attendanceCodeCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type attendanceCodeCreateOne struct {
	query builder.Query
}

func (p attendanceCodeCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p attendanceCodeCreateOne) attendanceCodeModel() {}

func (r attendanceCodeCreateOne) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeCreateOne) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single attendance.
func (r attendanceActions) CreateOne(
	_code AttendanceWithPrismaCodeSetParam,
	_user AttendanceWithPrismaUserSetParam,

	optional ...AttendanceSetParam,
) attendanceCreateOne {
	var v attendanceCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Attendance"
	v.query.Outputs = attendanceOutput

	var fields []builder.Field

	fields = append(fields, _code.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r attendanceCreateOne) With(params ...AttendanceRelationWith) attendanceCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type attendanceCreateOne struct {
	query builder.Query
}

func (p attendanceCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p attendanceCreateOne) attendanceModel() {}

func (r attendanceCreateOne) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCreateOne) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type userToMemberGroupsFindUnique struct {
	query builder.Query
}

func (r userToMemberGroupsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsFindUnique) with()         {}
func (r userToMemberGroupsFindUnique) userModel()    {}
func (r userToMemberGroupsFindUnique) userRelation() {}

func (r userToMemberGroupsFindUnique) With(params ...GroupRelationWith) userToMemberGroupsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToMemberGroupsFindUnique) Select(params ...userPrismaFields) userToMemberGroupsFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToMemberGroupsFindUnique) Omit(params ...userPrismaFields) userToMemberGroupsFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToMemberGroupsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToMemberGroupsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToMemberGroupsFindUnique) Update(params ...UserSetParam) userToMemberGroupsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToMemberGroupsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToMemberGroupsUpdateUnique struct {
	query builder.Query
}

func (r userToMemberGroupsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsUpdateUnique) userModel() {}

func (r userToMemberGroupsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToMemberGroupsUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToMemberGroupsFindUnique) Delete() userToMemberGroupsDeleteUnique {
	var v userToMemberGroupsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToMemberGroupsDeleteUnique struct {
	query builder.Query
}

func (r userToMemberGroupsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToMemberGroupsDeleteUnique) userModel() {}

func (r userToMemberGroupsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToMemberGroupsDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToMemberGroupsFindFirst struct {
	query builder.Query
}

func (r userToMemberGroupsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsFindFirst) with()         {}
func (r userToMemberGroupsFindFirst) userModel()    {}
func (r userToMemberGroupsFindFirst) userRelation() {}

func (r userToMemberGroupsFindFirst) With(params ...GroupRelationWith) userToMemberGroupsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToMemberGroupsFindFirst) Select(params ...userPrismaFields) userToMemberGroupsFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToMemberGroupsFindFirst) Omit(params ...userPrismaFields) userToMemberGroupsFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToMemberGroupsFindFirst) OrderBy(params ...GroupOrderByParam) userToMemberGroupsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToMemberGroupsFindFirst) Skip(count int) userToMemberGroupsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToMemberGroupsFindFirst) Take(count int) userToMemberGroupsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToMemberGroupsFindFirst) Cursor(cursor UserCursorParam) userToMemberGroupsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToMemberGroupsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToMemberGroupsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToMemberGroupsFindMany struct {
	query builder.Query
}

func (r userToMemberGroupsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsFindMany) with()         {}
func (r userToMemberGroupsFindMany) userModel()    {}
func (r userToMemberGroupsFindMany) userRelation() {}

func (r userToMemberGroupsFindMany) With(params ...GroupRelationWith) userToMemberGroupsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToMemberGroupsFindMany) Select(params ...userPrismaFields) userToMemberGroupsFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToMemberGroupsFindMany) Omit(params ...userPrismaFields) userToMemberGroupsFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToMemberGroupsFindMany) OrderBy(params ...GroupOrderByParam) userToMemberGroupsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToMemberGroupsFindMany) Skip(count int) userToMemberGroupsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToMemberGroupsFindMany) Take(count int) userToMemberGroupsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToMemberGroupsFindMany) Cursor(cursor UserCursorParam) userToMemberGroupsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToMemberGroupsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToMemberGroupsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToMemberGroupsFindMany) Update(params ...UserSetParam) userToMemberGroupsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToMemberGroupsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToMemberGroupsUpdateMany struct {
	query builder.Query
}

func (r userToMemberGroupsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToMemberGroupsUpdateMany) userModel() {}

func (r userToMemberGroupsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToMemberGroupsUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToMemberGroupsFindMany) Delete() userToMemberGroupsDeleteMany {
	var v userToMemberGroupsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToMemberGroupsDeleteMany struct {
	query builder.Query
}

func (r userToMemberGroupsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToMemberGroupsDeleteMany) userModel() {}

func (r userToMemberGroupsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToMemberGroupsDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToAttendancesFindUnique struct {
	query builder.Query
}

func (r userToAttendancesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToAttendancesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAttendancesFindUnique) with()         {}
func (r userToAttendancesFindUnique) userModel()    {}
func (r userToAttendancesFindUnique) userRelation() {}

func (r userToAttendancesFindUnique) With(params ...AttendanceRelationWith) userToAttendancesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAttendancesFindUnique) Select(params ...userPrismaFields) userToAttendancesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAttendancesFindUnique) Omit(params ...userPrismaFields) userToAttendancesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAttendancesFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAttendancesFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAttendancesFindUnique) Update(params ...UserSetParam) userToAttendancesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToAttendancesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAttendancesUpdateUnique struct {
	query builder.Query
}

func (r userToAttendancesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAttendancesUpdateUnique) userModel() {}

func (r userToAttendancesUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAttendancesUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToAttendancesFindUnique) Delete() userToAttendancesDeleteUnique {
	var v userToAttendancesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToAttendancesDeleteUnique struct {
	query builder.Query
}

func (r userToAttendancesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToAttendancesDeleteUnique) userModel() {}

func (r userToAttendancesDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAttendancesDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToAttendancesFindFirst struct {
	query builder.Query
}

func (r userToAttendancesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToAttendancesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAttendancesFindFirst) with()         {}
func (r userToAttendancesFindFirst) userModel()    {}
func (r userToAttendancesFindFirst) userRelation() {}

func (r userToAttendancesFindFirst) With(params ...AttendanceRelationWith) userToAttendancesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAttendancesFindFirst) Select(params ...userPrismaFields) userToAttendancesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAttendancesFindFirst) Omit(params ...userPrismaFields) userToAttendancesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAttendancesFindFirst) OrderBy(params ...AttendanceOrderByParam) userToAttendancesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToAttendancesFindFirst) Skip(count int) userToAttendancesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAttendancesFindFirst) Take(count int) userToAttendancesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAttendancesFindFirst) Cursor(cursor UserCursorParam) userToAttendancesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAttendancesFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAttendancesFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToAttendancesFindMany struct {
	query builder.Query
}

func (r userToAttendancesFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToAttendancesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAttendancesFindMany) with()         {}
func (r userToAttendancesFindMany) userModel()    {}
func (r userToAttendancesFindMany) userRelation() {}

func (r userToAttendancesFindMany) With(params ...AttendanceRelationWith) userToAttendancesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAttendancesFindMany) Select(params ...userPrismaFields) userToAttendancesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAttendancesFindMany) Omit(params ...userPrismaFields) userToAttendancesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAttendancesFindMany) OrderBy(params ...AttendanceOrderByParam) userToAttendancesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToAttendancesFindMany) Skip(count int) userToAttendancesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAttendancesFindMany) Take(count int) userToAttendancesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAttendancesFindMany) Cursor(cursor UserCursorParam) userToAttendancesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAttendancesFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToAttendancesFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToAttendancesFindMany) Update(params ...UserSetParam) userToAttendancesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToAttendancesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAttendancesUpdateMany struct {
	query builder.Query
}

func (r userToAttendancesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAttendancesUpdateMany) userModel() {}

func (r userToAttendancesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAttendancesUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToAttendancesFindMany) Delete() userToAttendancesDeleteMany {
	var v userToAttendancesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToAttendancesDeleteMany struct {
	query builder.Query
}

func (r userToAttendancesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToAttendancesDeleteMany) userModel() {}

func (r userToAttendancesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAttendancesDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToAssistantSchedulesFindUnique struct {
	query builder.Query
}

func (r userToAssistantSchedulesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesFindUnique) with()         {}
func (r userToAssistantSchedulesFindUnique) userModel()    {}
func (r userToAssistantSchedulesFindUnique) userRelation() {}

func (r userToAssistantSchedulesFindUnique) With(params ...ScheduleRelationWith) userToAssistantSchedulesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAssistantSchedulesFindUnique) Select(params ...userPrismaFields) userToAssistantSchedulesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAssistantSchedulesFindUnique) Omit(params ...userPrismaFields) userToAssistantSchedulesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAssistantSchedulesFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAssistantSchedulesFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAssistantSchedulesFindUnique) Update(params ...UserSetParam) userToAssistantSchedulesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToAssistantSchedulesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAssistantSchedulesUpdateUnique struct {
	query builder.Query
}

func (r userToAssistantSchedulesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesUpdateUnique) userModel() {}

func (r userToAssistantSchedulesUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAssistantSchedulesUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToAssistantSchedulesFindUnique) Delete() userToAssistantSchedulesDeleteUnique {
	var v userToAssistantSchedulesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToAssistantSchedulesDeleteUnique struct {
	query builder.Query
}

func (r userToAssistantSchedulesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToAssistantSchedulesDeleteUnique) userModel() {}

func (r userToAssistantSchedulesDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAssistantSchedulesDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToAssistantSchedulesFindFirst struct {
	query builder.Query
}

func (r userToAssistantSchedulesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesFindFirst) with()         {}
func (r userToAssistantSchedulesFindFirst) userModel()    {}
func (r userToAssistantSchedulesFindFirst) userRelation() {}

func (r userToAssistantSchedulesFindFirst) With(params ...ScheduleRelationWith) userToAssistantSchedulesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAssistantSchedulesFindFirst) Select(params ...userPrismaFields) userToAssistantSchedulesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAssistantSchedulesFindFirst) Omit(params ...userPrismaFields) userToAssistantSchedulesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAssistantSchedulesFindFirst) OrderBy(params ...ScheduleOrderByParam) userToAssistantSchedulesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToAssistantSchedulesFindFirst) Skip(count int) userToAssistantSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAssistantSchedulesFindFirst) Take(count int) userToAssistantSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAssistantSchedulesFindFirst) Cursor(cursor UserCursorParam) userToAssistantSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAssistantSchedulesFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAssistantSchedulesFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToAssistantSchedulesFindMany struct {
	query builder.Query
}

func (r userToAssistantSchedulesFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesFindMany) with()         {}
func (r userToAssistantSchedulesFindMany) userModel()    {}
func (r userToAssistantSchedulesFindMany) userRelation() {}

func (r userToAssistantSchedulesFindMany) With(params ...ScheduleRelationWith) userToAssistantSchedulesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAssistantSchedulesFindMany) Select(params ...userPrismaFields) userToAssistantSchedulesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAssistantSchedulesFindMany) Omit(params ...userPrismaFields) userToAssistantSchedulesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAssistantSchedulesFindMany) OrderBy(params ...ScheduleOrderByParam) userToAssistantSchedulesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToAssistantSchedulesFindMany) Skip(count int) userToAssistantSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAssistantSchedulesFindMany) Take(count int) userToAssistantSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAssistantSchedulesFindMany) Cursor(cursor UserCursorParam) userToAssistantSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAssistantSchedulesFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToAssistantSchedulesFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToAssistantSchedulesFindMany) Update(params ...UserSetParam) userToAssistantSchedulesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToAssistantSchedulesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAssistantSchedulesUpdateMany struct {
	query builder.Query
}

func (r userToAssistantSchedulesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAssistantSchedulesUpdateMany) userModel() {}

func (r userToAssistantSchedulesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAssistantSchedulesUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToAssistantSchedulesFindMany) Delete() userToAssistantSchedulesDeleteMany {
	var v userToAssistantSchedulesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToAssistantSchedulesDeleteMany struct {
	query builder.Query
}

func (r userToAssistantSchedulesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToAssistantSchedulesDeleteMany) userModel() {}

func (r userToAssistantSchedulesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAssistantSchedulesDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToGradedGradesFindUnique struct {
	query builder.Query
}

func (r userToGradedGradesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesFindUnique) with()         {}
func (r userToGradedGradesFindUnique) userModel()    {}
func (r userToGradedGradesFindUnique) userRelation() {}

func (r userToGradedGradesFindUnique) With(params ...GradeRelationWith) userToGradedGradesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToGradedGradesFindUnique) Select(params ...userPrismaFields) userToGradedGradesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToGradedGradesFindUnique) Omit(params ...userPrismaFields) userToGradedGradesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToGradedGradesFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToGradedGradesFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToGradedGradesFindUnique) Update(params ...UserSetParam) userToGradedGradesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToGradedGradesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToGradedGradesUpdateUnique struct {
	query builder.Query
}

func (r userToGradedGradesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesUpdateUnique) userModel() {}

func (r userToGradedGradesUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToGradedGradesUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToGradedGradesFindUnique) Delete() userToGradedGradesDeleteUnique {
	var v userToGradedGradesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToGradedGradesDeleteUnique struct {
	query builder.Query
}

func (r userToGradedGradesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToGradedGradesDeleteUnique) userModel() {}

func (r userToGradedGradesDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToGradedGradesDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToGradedGradesFindFirst struct {
	query builder.Query
}

func (r userToGradedGradesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesFindFirst) with()         {}
func (r userToGradedGradesFindFirst) userModel()    {}
func (r userToGradedGradesFindFirst) userRelation() {}

func (r userToGradedGradesFindFirst) With(params ...GradeRelationWith) userToGradedGradesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToGradedGradesFindFirst) Select(params ...userPrismaFields) userToGradedGradesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToGradedGradesFindFirst) Omit(params ...userPrismaFields) userToGradedGradesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToGradedGradesFindFirst) OrderBy(params ...GradeOrderByParam) userToGradedGradesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToGradedGradesFindFirst) Skip(count int) userToGradedGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToGradedGradesFindFirst) Take(count int) userToGradedGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToGradedGradesFindFirst) Cursor(cursor UserCursorParam) userToGradedGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToGradedGradesFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToGradedGradesFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToGradedGradesFindMany struct {
	query builder.Query
}

func (r userToGradedGradesFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesFindMany) with()         {}
func (r userToGradedGradesFindMany) userModel()    {}
func (r userToGradedGradesFindMany) userRelation() {}

func (r userToGradedGradesFindMany) With(params ...GradeRelationWith) userToGradedGradesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToGradedGradesFindMany) Select(params ...userPrismaFields) userToGradedGradesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToGradedGradesFindMany) Omit(params ...userPrismaFields) userToGradedGradesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToGradedGradesFindMany) OrderBy(params ...GradeOrderByParam) userToGradedGradesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToGradedGradesFindMany) Skip(count int) userToGradedGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToGradedGradesFindMany) Take(count int) userToGradedGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToGradedGradesFindMany) Cursor(cursor UserCursorParam) userToGradedGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToGradedGradesFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToGradedGradesFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToGradedGradesFindMany) Update(params ...UserSetParam) userToGradedGradesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToGradedGradesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToGradedGradesUpdateMany struct {
	query builder.Query
}

func (r userToGradedGradesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToGradedGradesUpdateMany) userModel() {}

func (r userToGradedGradesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToGradedGradesUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToGradedGradesFindMany) Delete() userToGradedGradesDeleteMany {
	var v userToGradedGradesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToGradedGradesDeleteMany struct {
	query builder.Query
}

func (r userToGradedGradesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToGradedGradesDeleteMany) userModel() {}

func (r userToGradedGradesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToGradedGradesDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserGradesFindUnique struct {
	query builder.Query
}

func (r userToUserGradesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToUserGradesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserGradesFindUnique) with()         {}
func (r userToUserGradesFindUnique) userModel()    {}
func (r userToUserGradesFindUnique) userRelation() {}

func (r userToUserGradesFindUnique) With(params ...GradeRelationWith) userToUserGradesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserGradesFindUnique) Select(params ...userPrismaFields) userToUserGradesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToUserGradesFindUnique) Omit(params ...userPrismaFields) userToUserGradesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToUserGradesFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserGradesFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserGradesFindUnique) Update(params ...UserSetParam) userToUserGradesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToUserGradesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserGradesUpdateUnique struct {
	query builder.Query
}

func (r userToUserGradesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserGradesUpdateUnique) userModel() {}

func (r userToUserGradesUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserGradesUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserGradesFindUnique) Delete() userToUserGradesDeleteUnique {
	var v userToUserGradesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToUserGradesDeleteUnique struct {
	query builder.Query
}

func (r userToUserGradesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserGradesDeleteUnique) userModel() {}

func (r userToUserGradesDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserGradesDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToUserGradesFindFirst struct {
	query builder.Query
}

func (r userToUserGradesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToUserGradesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserGradesFindFirst) with()         {}
func (r userToUserGradesFindFirst) userModel()    {}
func (r userToUserGradesFindFirst) userRelation() {}

func (r userToUserGradesFindFirst) With(params ...GradeRelationWith) userToUserGradesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserGradesFindFirst) Select(params ...userPrismaFields) userToUserGradesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToUserGradesFindFirst) Omit(params ...userPrismaFields) userToUserGradesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToUserGradesFindFirst) OrderBy(params ...GradeOrderByParam) userToUserGradesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserGradesFindFirst) Skip(count int) userToUserGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserGradesFindFirst) Take(count int) userToUserGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserGradesFindFirst) Cursor(cursor UserCursorParam) userToUserGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserGradesFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToUserGradesFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToUserGradesFindMany struct {
	query builder.Query
}

func (r userToUserGradesFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToUserGradesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserGradesFindMany) with()         {}
func (r userToUserGradesFindMany) userModel()    {}
func (r userToUserGradesFindMany) userRelation() {}

func (r userToUserGradesFindMany) With(params ...GradeRelationWith) userToUserGradesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToUserGradesFindMany) Select(params ...userPrismaFields) userToUserGradesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToUserGradesFindMany) Omit(params ...userPrismaFields) userToUserGradesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToUserGradesFindMany) OrderBy(params ...GradeOrderByParam) userToUserGradesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToUserGradesFindMany) Skip(count int) userToUserGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToUserGradesFindMany) Take(count int) userToUserGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToUserGradesFindMany) Cursor(cursor UserCursorParam) userToUserGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToUserGradesFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserGradesFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToUserGradesFindMany) Update(params ...UserSetParam) userToUserGradesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToUserGradesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToUserGradesUpdateMany struct {
	query builder.Query
}

func (r userToUserGradesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToUserGradesUpdateMany) userModel() {}

func (r userToUserGradesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserGradesUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToUserGradesFindMany) Delete() userToUserGradesDeleteMany {
	var v userToUserGradesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToUserGradesDeleteMany struct {
	query builder.Query
}

func (r userToUserGradesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToUserGradesDeleteMany) userModel() {}

func (r userToUserGradesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToUserGradesDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToAnnouncementsFindUnique struct {
	query builder.Query
}

func (r userToAnnouncementsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsFindUnique) with()         {}
func (r userToAnnouncementsFindUnique) userModel()    {}
func (r userToAnnouncementsFindUnique) userRelation() {}

func (r userToAnnouncementsFindUnique) With(params ...AnnouncementRelationWith) userToAnnouncementsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAnnouncementsFindUnique) Select(params ...userPrismaFields) userToAnnouncementsFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAnnouncementsFindUnique) Omit(params ...userPrismaFields) userToAnnouncementsFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAnnouncementsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAnnouncementsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAnnouncementsFindUnique) Update(params ...UserSetParam) userToAnnouncementsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToAnnouncementsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAnnouncementsUpdateUnique struct {
	query builder.Query
}

func (r userToAnnouncementsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsUpdateUnique) userModel() {}

func (r userToAnnouncementsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAnnouncementsUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToAnnouncementsFindUnique) Delete() userToAnnouncementsDeleteUnique {
	var v userToAnnouncementsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToAnnouncementsDeleteUnique struct {
	query builder.Query
}

func (r userToAnnouncementsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToAnnouncementsDeleteUnique) userModel() {}

func (r userToAnnouncementsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAnnouncementsDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToAnnouncementsFindFirst struct {
	query builder.Query
}

func (r userToAnnouncementsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsFindFirst) with()         {}
func (r userToAnnouncementsFindFirst) userModel()    {}
func (r userToAnnouncementsFindFirst) userRelation() {}

func (r userToAnnouncementsFindFirst) With(params ...AnnouncementRelationWith) userToAnnouncementsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAnnouncementsFindFirst) Select(params ...userPrismaFields) userToAnnouncementsFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAnnouncementsFindFirst) Omit(params ...userPrismaFields) userToAnnouncementsFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAnnouncementsFindFirst) OrderBy(params ...AnnouncementOrderByParam) userToAnnouncementsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToAnnouncementsFindFirst) Skip(count int) userToAnnouncementsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAnnouncementsFindFirst) Take(count int) userToAnnouncementsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAnnouncementsFindFirst) Cursor(cursor UserCursorParam) userToAnnouncementsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAnnouncementsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToAnnouncementsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToAnnouncementsFindMany struct {
	query builder.Query
}

func (r userToAnnouncementsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsFindMany) with()         {}
func (r userToAnnouncementsFindMany) userModel()    {}
func (r userToAnnouncementsFindMany) userRelation() {}

func (r userToAnnouncementsFindMany) With(params ...AnnouncementRelationWith) userToAnnouncementsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToAnnouncementsFindMany) Select(params ...userPrismaFields) userToAnnouncementsFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAnnouncementsFindMany) Omit(params ...userPrismaFields) userToAnnouncementsFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToAnnouncementsFindMany) OrderBy(params ...AnnouncementOrderByParam) userToAnnouncementsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToAnnouncementsFindMany) Skip(count int) userToAnnouncementsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToAnnouncementsFindMany) Take(count int) userToAnnouncementsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToAnnouncementsFindMany) Cursor(cursor UserCursorParam) userToAnnouncementsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToAnnouncementsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToAnnouncementsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToAnnouncementsFindMany) Update(params ...UserSetParam) userToAnnouncementsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToAnnouncementsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToAnnouncementsUpdateMany struct {
	query builder.Query
}

func (r userToAnnouncementsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToAnnouncementsUpdateMany) userModel() {}

func (r userToAnnouncementsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAnnouncementsUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToAnnouncementsFindMany) Delete() userToAnnouncementsDeleteMany {
	var v userToAnnouncementsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToAnnouncementsDeleteMany struct {
	query builder.Query
}

func (r userToAnnouncementsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToAnnouncementsDeleteMany) userModel() {}

func (r userToAnnouncementsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToAnnouncementsDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Select(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Omit(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) Select(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) Omit(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) Select(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) Omit(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type groupToMembersFindUnique struct {
	query builder.Query
}

func (r groupToMembersFindUnique) getQuery() builder.Query {
	return r.query
}

func (r groupToMembersFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToMembersFindUnique) with()          {}
func (r groupToMembersFindUnique) groupModel()    {}
func (r groupToMembersFindUnique) groupRelation() {}

func (r groupToMembersFindUnique) With(params ...UserRelationWith) groupToMembersFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupToMembersFindUnique) Select(params ...groupPrismaFields) groupToMembersFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToMembersFindUnique) Omit(params ...groupPrismaFields) groupToMembersFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToMembersFindUnique) Exec(ctx context.Context) (
	*GroupModel,
	error,
) {
	var v *GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupToMembersFindUnique) ExecInner(ctx context.Context) (
	*InnerGroup,
	error,
) {
	var v *InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupToMembersFindUnique) Update(params ...GroupSetParam) groupToMembersUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Group"

	var v groupToMembersUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type groupToMembersUpdateUnique struct {
	query builder.Query
}

func (r groupToMembersUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToMembersUpdateUnique) groupModel() {}

func (r groupToMembersUpdateUnique) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToMembersUpdateUnique) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r groupToMembersFindUnique) Delete() groupToMembersDeleteUnique {
	var v groupToMembersDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Group"

	return v
}

type groupToMembersDeleteUnique struct {
	query builder.Query
}

func (r groupToMembersDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p groupToMembersDeleteUnique) groupModel() {}

func (r groupToMembersDeleteUnique) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToMembersDeleteUnique) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type groupToMembersFindFirst struct {
	query builder.Query
}

func (r groupToMembersFindFirst) getQuery() builder.Query {
	return r.query
}

func (r groupToMembersFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToMembersFindFirst) with()          {}
func (r groupToMembersFindFirst) groupModel()    {}
func (r groupToMembersFindFirst) groupRelation() {}

func (r groupToMembersFindFirst) With(params ...UserRelationWith) groupToMembersFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupToMembersFindFirst) Select(params ...groupPrismaFields) groupToMembersFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToMembersFindFirst) Omit(params ...groupPrismaFields) groupToMembersFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToMembersFindFirst) OrderBy(params ...UserOrderByParam) groupToMembersFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r groupToMembersFindFirst) Skip(count int) groupToMembersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r groupToMembersFindFirst) Take(count int) groupToMembersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r groupToMembersFindFirst) Cursor(cursor GroupCursorParam) groupToMembersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r groupToMembersFindFirst) Exec(ctx context.Context) (
	*GroupModel,
	error,
) {
	var v *GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupToMembersFindFirst) ExecInner(ctx context.Context) (
	*InnerGroup,
	error,
) {
	var v *InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type groupToMembersFindMany struct {
	query builder.Query
}

func (r groupToMembersFindMany) getQuery() builder.Query {
	return r.query
}

func (r groupToMembersFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToMembersFindMany) with()          {}
func (r groupToMembersFindMany) groupModel()    {}
func (r groupToMembersFindMany) groupRelation() {}

func (r groupToMembersFindMany) With(params ...UserRelationWith) groupToMembersFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupToMembersFindMany) Select(params ...groupPrismaFields) groupToMembersFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToMembersFindMany) Omit(params ...groupPrismaFields) groupToMembersFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToMembersFindMany) OrderBy(params ...UserOrderByParam) groupToMembersFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r groupToMembersFindMany) Skip(count int) groupToMembersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r groupToMembersFindMany) Take(count int) groupToMembersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r groupToMembersFindMany) Cursor(cursor GroupCursorParam) groupToMembersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r groupToMembersFindMany) Exec(ctx context.Context) (
	[]GroupModel,
	error,
) {
	var v []GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r groupToMembersFindMany) ExecInner(ctx context.Context) (
	[]InnerGroup,
	error,
) {
	var v []InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r groupToMembersFindMany) Update(params ...GroupSetParam) groupToMembersUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Group"

	r.query.Outputs = countOutput

	var v groupToMembersUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type groupToMembersUpdateMany struct {
	query builder.Query
}

func (r groupToMembersUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToMembersUpdateMany) groupModel() {}

func (r groupToMembersUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToMembersUpdateMany) Tx() GroupManyTxResult {
	v := newGroupManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r groupToMembersFindMany) Delete() groupToMembersDeleteMany {
	var v groupToMembersDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Group"

	v.query.Outputs = countOutput

	return v
}

type groupToMembersDeleteMany struct {
	query builder.Query
}

func (r groupToMembersDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p groupToMembersDeleteMany) groupModel() {}

func (r groupToMembersDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToMembersDeleteMany) Tx() GroupManyTxResult {
	v := newGroupManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type groupToSchedulesFindUnique struct {
	query builder.Query
}

func (r groupToSchedulesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesFindUnique) with()          {}
func (r groupToSchedulesFindUnique) groupModel()    {}
func (r groupToSchedulesFindUnique) groupRelation() {}

func (r groupToSchedulesFindUnique) With(params ...ScheduleRelationWith) groupToSchedulesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupToSchedulesFindUnique) Select(params ...groupPrismaFields) groupToSchedulesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToSchedulesFindUnique) Omit(params ...groupPrismaFields) groupToSchedulesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToSchedulesFindUnique) Exec(ctx context.Context) (
	*GroupModel,
	error,
) {
	var v *GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupToSchedulesFindUnique) ExecInner(ctx context.Context) (
	*InnerGroup,
	error,
) {
	var v *InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupToSchedulesFindUnique) Update(params ...GroupSetParam) groupToSchedulesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Group"

	var v groupToSchedulesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type groupToSchedulesUpdateUnique struct {
	query builder.Query
}

func (r groupToSchedulesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesUpdateUnique) groupModel() {}

func (r groupToSchedulesUpdateUnique) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToSchedulesUpdateUnique) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r groupToSchedulesFindUnique) Delete() groupToSchedulesDeleteUnique {
	var v groupToSchedulesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Group"

	return v
}

type groupToSchedulesDeleteUnique struct {
	query builder.Query
}

func (r groupToSchedulesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p groupToSchedulesDeleteUnique) groupModel() {}

func (r groupToSchedulesDeleteUnique) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToSchedulesDeleteUnique) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type groupToSchedulesFindFirst struct {
	query builder.Query
}

func (r groupToSchedulesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesFindFirst) with()          {}
func (r groupToSchedulesFindFirst) groupModel()    {}
func (r groupToSchedulesFindFirst) groupRelation() {}

func (r groupToSchedulesFindFirst) With(params ...ScheduleRelationWith) groupToSchedulesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupToSchedulesFindFirst) Select(params ...groupPrismaFields) groupToSchedulesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToSchedulesFindFirst) Omit(params ...groupPrismaFields) groupToSchedulesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToSchedulesFindFirst) OrderBy(params ...ScheduleOrderByParam) groupToSchedulesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r groupToSchedulesFindFirst) Skip(count int) groupToSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r groupToSchedulesFindFirst) Take(count int) groupToSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r groupToSchedulesFindFirst) Cursor(cursor GroupCursorParam) groupToSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r groupToSchedulesFindFirst) Exec(ctx context.Context) (
	*GroupModel,
	error,
) {
	var v *GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupToSchedulesFindFirst) ExecInner(ctx context.Context) (
	*InnerGroup,
	error,
) {
	var v *InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type groupToSchedulesFindMany struct {
	query builder.Query
}

func (r groupToSchedulesFindMany) getQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesFindMany) with()          {}
func (r groupToSchedulesFindMany) groupModel()    {}
func (r groupToSchedulesFindMany) groupRelation() {}

func (r groupToSchedulesFindMany) With(params ...ScheduleRelationWith) groupToSchedulesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupToSchedulesFindMany) Select(params ...groupPrismaFields) groupToSchedulesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToSchedulesFindMany) Omit(params ...groupPrismaFields) groupToSchedulesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupToSchedulesFindMany) OrderBy(params ...ScheduleOrderByParam) groupToSchedulesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r groupToSchedulesFindMany) Skip(count int) groupToSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r groupToSchedulesFindMany) Take(count int) groupToSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r groupToSchedulesFindMany) Cursor(cursor GroupCursorParam) groupToSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r groupToSchedulesFindMany) Exec(ctx context.Context) (
	[]GroupModel,
	error,
) {
	var v []GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r groupToSchedulesFindMany) ExecInner(ctx context.Context) (
	[]InnerGroup,
	error,
) {
	var v []InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r groupToSchedulesFindMany) Update(params ...GroupSetParam) groupToSchedulesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Group"

	r.query.Outputs = countOutput

	var v groupToSchedulesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type groupToSchedulesUpdateMany struct {
	query builder.Query
}

func (r groupToSchedulesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r groupToSchedulesUpdateMany) groupModel() {}

func (r groupToSchedulesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToSchedulesUpdateMany) Tx() GroupManyTxResult {
	v := newGroupManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r groupToSchedulesFindMany) Delete() groupToSchedulesDeleteMany {
	var v groupToSchedulesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Group"

	v.query.Outputs = countOutput

	return v
}

type groupToSchedulesDeleteMany struct {
	query builder.Query
}

func (r groupToSchedulesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p groupToSchedulesDeleteMany) groupModel() {}

func (r groupToSchedulesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupToSchedulesDeleteMany) Tx() GroupManyTxResult {
	v := newGroupManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type groupFindUnique struct {
	query builder.Query
}

func (r groupFindUnique) getQuery() builder.Query {
	return r.query
}

func (r groupFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r groupFindUnique) with()          {}
func (r groupFindUnique) groupModel()    {}
func (r groupFindUnique) groupRelation() {}

func (r groupActions) FindUnique(
	params GroupEqualsUniqueWhereParam,
) groupFindUnique {
	var v groupFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Group"
	v.query.Outputs = groupOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r groupFindUnique) With(params ...GroupRelationWith) groupFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupFindUnique) Select(params ...groupPrismaFields) groupFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupFindUnique) Omit(params ...groupPrismaFields) groupFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupFindUnique) Exec(ctx context.Context) (
	*GroupModel,
	error,
) {
	var v *GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupFindUnique) ExecInner(ctx context.Context) (
	*InnerGroup,
	error,
) {
	var v *InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupFindUnique) Update(params ...GroupSetParam) groupUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Group"

	var v groupUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type groupUpdateUnique struct {
	query builder.Query
}

func (r groupUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r groupUpdateUnique) groupModel() {}

func (r groupUpdateUnique) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupUpdateUnique) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r groupFindUnique) Delete() groupDeleteUnique {
	var v groupDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Group"

	return v
}

type groupDeleteUnique struct {
	query builder.Query
}

func (r groupDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p groupDeleteUnique) groupModel() {}

func (r groupDeleteUnique) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupDeleteUnique) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type groupFindFirst struct {
	query builder.Query
}

func (r groupFindFirst) getQuery() builder.Query {
	return r.query
}

func (r groupFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r groupFindFirst) with()          {}
func (r groupFindFirst) groupModel()    {}
func (r groupFindFirst) groupRelation() {}

func (r groupActions) FindFirst(
	params ...GroupWhereParam,
) groupFindFirst {
	var v groupFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Group"
	v.query.Outputs = groupOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r groupFindFirst) With(params ...GroupRelationWith) groupFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupFindFirst) Select(params ...groupPrismaFields) groupFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupFindFirst) Omit(params ...groupPrismaFields) groupFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupFindFirst) OrderBy(params ...GroupOrderByParam) groupFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r groupFindFirst) Skip(count int) groupFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r groupFindFirst) Take(count int) groupFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r groupFindFirst) Cursor(cursor GroupCursorParam) groupFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r groupFindFirst) Exec(ctx context.Context) (
	*GroupModel,
	error,
) {
	var v *GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r groupFindFirst) ExecInner(ctx context.Context) (
	*InnerGroup,
	error,
) {
	var v *InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type groupFindMany struct {
	query builder.Query
}

func (r groupFindMany) getQuery() builder.Query {
	return r.query
}

func (r groupFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r groupFindMany) with()          {}
func (r groupFindMany) groupModel()    {}
func (r groupFindMany) groupRelation() {}

func (r groupActions) FindMany(
	params ...GroupWhereParam,
) groupFindMany {
	var v groupFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Group"
	v.query.Outputs = groupOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r groupFindMany) With(params ...GroupRelationWith) groupFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r groupFindMany) Select(params ...groupPrismaFields) groupFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r groupFindMany) Omit(params ...groupPrismaFields) groupFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range groupOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r groupFindMany) OrderBy(params ...GroupOrderByParam) groupFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r groupFindMany) Skip(count int) groupFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r groupFindMany) Take(count int) groupFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r groupFindMany) Cursor(cursor GroupCursorParam) groupFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r groupFindMany) Exec(ctx context.Context) (
	[]GroupModel,
	error,
) {
	var v []GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r groupFindMany) ExecInner(ctx context.Context) (
	[]InnerGroup,
	error,
) {
	var v []InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r groupFindMany) Update(params ...GroupSetParam) groupUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Group"

	r.query.Outputs = countOutput

	var v groupUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type groupUpdateMany struct {
	query builder.Query
}

func (r groupUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r groupUpdateMany) groupModel() {}

func (r groupUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupUpdateMany) Tx() GroupManyTxResult {
	v := newGroupManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r groupFindMany) Delete() groupDeleteMany {
	var v groupDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Group"

	v.query.Outputs = countOutput

	return v
}

type groupDeleteMany struct {
	query builder.Query
}

func (r groupDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p groupDeleteMany) groupModel() {}

func (r groupDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupDeleteMany) Tx() GroupManyTxResult {
	v := newGroupManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type practicumToSchedulesFindUnique struct {
	query builder.Query
}

func (r practicumToSchedulesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesFindUnique) with()              {}
func (r practicumToSchedulesFindUnique) practicumModel()    {}
func (r practicumToSchedulesFindUnique) practicumRelation() {}

func (r practicumToSchedulesFindUnique) With(params ...ScheduleRelationWith) practicumToSchedulesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r practicumToSchedulesFindUnique) Select(params ...practicumPrismaFields) practicumToSchedulesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumToSchedulesFindUnique) Omit(params ...practicumPrismaFields) practicumToSchedulesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range practicumOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumToSchedulesFindUnique) Exec(ctx context.Context) (
	*PracticumModel,
	error,
) {
	var v *PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r practicumToSchedulesFindUnique) ExecInner(ctx context.Context) (
	*InnerPracticum,
	error,
) {
	var v *InnerPracticum
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r practicumToSchedulesFindUnique) Update(params ...PracticumSetParam) practicumToSchedulesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Practicum"

	var v practicumToSchedulesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type practicumToSchedulesUpdateUnique struct {
	query builder.Query
}

func (r practicumToSchedulesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesUpdateUnique) practicumModel() {}

func (r practicumToSchedulesUpdateUnique) Exec(ctx context.Context) (*PracticumModel, error) {
	var v PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumToSchedulesUpdateUnique) Tx() PracticumUniqueTxResult {
	v := newPracticumUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r practicumToSchedulesFindUnique) Delete() practicumToSchedulesDeleteUnique {
	var v practicumToSchedulesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Practicum"

	return v
}

type practicumToSchedulesDeleteUnique struct {
	query builder.Query
}

func (r practicumToSchedulesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p practicumToSchedulesDeleteUnique) practicumModel() {}

func (r practicumToSchedulesDeleteUnique) Exec(ctx context.Context) (*PracticumModel, error) {
	var v PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumToSchedulesDeleteUnique) Tx() PracticumUniqueTxResult {
	v := newPracticumUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type practicumToSchedulesFindFirst struct {
	query builder.Query
}

func (r practicumToSchedulesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesFindFirst) with()              {}
func (r practicumToSchedulesFindFirst) practicumModel()    {}
func (r practicumToSchedulesFindFirst) practicumRelation() {}

func (r practicumToSchedulesFindFirst) With(params ...ScheduleRelationWith) practicumToSchedulesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r practicumToSchedulesFindFirst) Select(params ...practicumPrismaFields) practicumToSchedulesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumToSchedulesFindFirst) Omit(params ...practicumPrismaFields) practicumToSchedulesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range practicumOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumToSchedulesFindFirst) OrderBy(params ...ScheduleOrderByParam) practicumToSchedulesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r practicumToSchedulesFindFirst) Skip(count int) practicumToSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r practicumToSchedulesFindFirst) Take(count int) practicumToSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r practicumToSchedulesFindFirst) Cursor(cursor PracticumCursorParam) practicumToSchedulesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r practicumToSchedulesFindFirst) Exec(ctx context.Context) (
	*PracticumModel,
	error,
) {
	var v *PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r practicumToSchedulesFindFirst) ExecInner(ctx context.Context) (
	*InnerPracticum,
	error,
) {
	var v *InnerPracticum
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type practicumToSchedulesFindMany struct {
	query builder.Query
}

func (r practicumToSchedulesFindMany) getQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesFindMany) with()              {}
func (r practicumToSchedulesFindMany) practicumModel()    {}
func (r practicumToSchedulesFindMany) practicumRelation() {}

func (r practicumToSchedulesFindMany) With(params ...ScheduleRelationWith) practicumToSchedulesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r practicumToSchedulesFindMany) Select(params ...practicumPrismaFields) practicumToSchedulesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumToSchedulesFindMany) Omit(params ...practicumPrismaFields) practicumToSchedulesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range practicumOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumToSchedulesFindMany) OrderBy(params ...ScheduleOrderByParam) practicumToSchedulesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r practicumToSchedulesFindMany) Skip(count int) practicumToSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r practicumToSchedulesFindMany) Take(count int) practicumToSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r practicumToSchedulesFindMany) Cursor(cursor PracticumCursorParam) practicumToSchedulesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r practicumToSchedulesFindMany) Exec(ctx context.Context) (
	[]PracticumModel,
	error,
) {
	var v []PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r practicumToSchedulesFindMany) ExecInner(ctx context.Context) (
	[]InnerPracticum,
	error,
) {
	var v []InnerPracticum
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r practicumToSchedulesFindMany) Update(params ...PracticumSetParam) practicumToSchedulesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Practicum"

	r.query.Outputs = countOutput

	var v practicumToSchedulesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type practicumToSchedulesUpdateMany struct {
	query builder.Query
}

func (r practicumToSchedulesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumToSchedulesUpdateMany) practicumModel() {}

func (r practicumToSchedulesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumToSchedulesUpdateMany) Tx() PracticumManyTxResult {
	v := newPracticumManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r practicumToSchedulesFindMany) Delete() practicumToSchedulesDeleteMany {
	var v practicumToSchedulesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Practicum"

	v.query.Outputs = countOutput

	return v
}

type practicumToSchedulesDeleteMany struct {
	query builder.Query
}

func (r practicumToSchedulesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p practicumToSchedulesDeleteMany) practicumModel() {}

func (r practicumToSchedulesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumToSchedulesDeleteMany) Tx() PracticumManyTxResult {
	v := newPracticumManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type practicumFindUnique struct {
	query builder.Query
}

func (r practicumFindUnique) getQuery() builder.Query {
	return r.query
}

func (r practicumFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumFindUnique) with()              {}
func (r practicumFindUnique) practicumModel()    {}
func (r practicumFindUnique) practicumRelation() {}

func (r practicumActions) FindUnique(
	params PracticumEqualsUniqueWhereParam,
) practicumFindUnique {
	var v practicumFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Practicum"
	v.query.Outputs = practicumOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r practicumFindUnique) With(params ...PracticumRelationWith) practicumFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r practicumFindUnique) Select(params ...practicumPrismaFields) practicumFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumFindUnique) Omit(params ...practicumPrismaFields) practicumFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range practicumOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumFindUnique) Exec(ctx context.Context) (
	*PracticumModel,
	error,
) {
	var v *PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r practicumFindUnique) ExecInner(ctx context.Context) (
	*InnerPracticum,
	error,
) {
	var v *InnerPracticum
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r practicumFindUnique) Update(params ...PracticumSetParam) practicumUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Practicum"

	var v practicumUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type practicumUpdateUnique struct {
	query builder.Query
}

func (r practicumUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumUpdateUnique) practicumModel() {}

func (r practicumUpdateUnique) Exec(ctx context.Context) (*PracticumModel, error) {
	var v PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumUpdateUnique) Tx() PracticumUniqueTxResult {
	v := newPracticumUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r practicumFindUnique) Delete() practicumDeleteUnique {
	var v practicumDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Practicum"

	return v
}

type practicumDeleteUnique struct {
	query builder.Query
}

func (r practicumDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p practicumDeleteUnique) practicumModel() {}

func (r practicumDeleteUnique) Exec(ctx context.Context) (*PracticumModel, error) {
	var v PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumDeleteUnique) Tx() PracticumUniqueTxResult {
	v := newPracticumUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type practicumFindFirst struct {
	query builder.Query
}

func (r practicumFindFirst) getQuery() builder.Query {
	return r.query
}

func (r practicumFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumFindFirst) with()              {}
func (r practicumFindFirst) practicumModel()    {}
func (r practicumFindFirst) practicumRelation() {}

func (r practicumActions) FindFirst(
	params ...PracticumWhereParam,
) practicumFindFirst {
	var v practicumFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Practicum"
	v.query.Outputs = practicumOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r practicumFindFirst) With(params ...PracticumRelationWith) practicumFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r practicumFindFirst) Select(params ...practicumPrismaFields) practicumFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumFindFirst) Omit(params ...practicumPrismaFields) practicumFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range practicumOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumFindFirst) OrderBy(params ...PracticumOrderByParam) practicumFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r practicumFindFirst) Skip(count int) practicumFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r practicumFindFirst) Take(count int) practicumFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r practicumFindFirst) Cursor(cursor PracticumCursorParam) practicumFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r practicumFindFirst) Exec(ctx context.Context) (
	*PracticumModel,
	error,
) {
	var v *PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r practicumFindFirst) ExecInner(ctx context.Context) (
	*InnerPracticum,
	error,
) {
	var v *InnerPracticum
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type practicumFindMany struct {
	query builder.Query
}

func (r practicumFindMany) getQuery() builder.Query {
	return r.query
}

func (r practicumFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumFindMany) with()              {}
func (r practicumFindMany) practicumModel()    {}
func (r practicumFindMany) practicumRelation() {}

func (r practicumActions) FindMany(
	params ...PracticumWhereParam,
) practicumFindMany {
	var v practicumFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Practicum"
	v.query.Outputs = practicumOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r practicumFindMany) With(params ...PracticumRelationWith) practicumFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r practicumFindMany) Select(params ...practicumPrismaFields) practicumFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumFindMany) Omit(params ...practicumPrismaFields) practicumFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range practicumOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r practicumFindMany) OrderBy(params ...PracticumOrderByParam) practicumFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r practicumFindMany) Skip(count int) practicumFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r practicumFindMany) Take(count int) practicumFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r practicumFindMany) Cursor(cursor PracticumCursorParam) practicumFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r practicumFindMany) Exec(ctx context.Context) (
	[]PracticumModel,
	error,
) {
	var v []PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r practicumFindMany) ExecInner(ctx context.Context) (
	[]InnerPracticum,
	error,
) {
	var v []InnerPracticum
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r practicumFindMany) Update(params ...PracticumSetParam) practicumUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Practicum"

	r.query.Outputs = countOutput

	var v practicumUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type practicumUpdateMany struct {
	query builder.Query
}

func (r practicumUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumUpdateMany) practicumModel() {}

func (r practicumUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumUpdateMany) Tx() PracticumManyTxResult {
	v := newPracticumManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r practicumFindMany) Delete() practicumDeleteMany {
	var v practicumDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Practicum"

	v.query.Outputs = countOutput

	return v
}

type practicumDeleteMany struct {
	query builder.Query
}

func (r practicumDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p practicumDeleteMany) practicumModel() {}

func (r practicumDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumDeleteMany) Tx() PracticumManyTxResult {
	v := newPracticumManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToPracticumFindUnique struct {
	query builder.Query
}

func (r scheduleToPracticumFindUnique) getQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumFindUnique) with()             {}
func (r scheduleToPracticumFindUnique) scheduleModel()    {}
func (r scheduleToPracticumFindUnique) scheduleRelation() {}

func (r scheduleToPracticumFindUnique) With(params ...PracticumRelationWith) scheduleToPracticumFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToPracticumFindUnique) Select(params ...schedulePrismaFields) scheduleToPracticumFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToPracticumFindUnique) Omit(params ...schedulePrismaFields) scheduleToPracticumFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToPracticumFindUnique) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToPracticumFindUnique) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToPracticumFindUnique) Update(params ...ScheduleSetParam) scheduleToPracticumUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Schedule"

	var v scheduleToPracticumUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToPracticumUpdateUnique struct {
	query builder.Query
}

func (r scheduleToPracticumUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumUpdateUnique) scheduleModel() {}

func (r scheduleToPracticumUpdateUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToPracticumUpdateUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToPracticumFindUnique) Delete() scheduleToPracticumDeleteUnique {
	var v scheduleToPracticumDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Schedule"

	return v
}

type scheduleToPracticumDeleteUnique struct {
	query builder.Query
}

func (r scheduleToPracticumDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToPracticumDeleteUnique) scheduleModel() {}

func (r scheduleToPracticumDeleteUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToPracticumDeleteUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToPracticumFindFirst struct {
	query builder.Query
}

func (r scheduleToPracticumFindFirst) getQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumFindFirst) with()             {}
func (r scheduleToPracticumFindFirst) scheduleModel()    {}
func (r scheduleToPracticumFindFirst) scheduleRelation() {}

func (r scheduleToPracticumFindFirst) With(params ...PracticumRelationWith) scheduleToPracticumFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToPracticumFindFirst) Select(params ...schedulePrismaFields) scheduleToPracticumFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToPracticumFindFirst) Omit(params ...schedulePrismaFields) scheduleToPracticumFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToPracticumFindFirst) OrderBy(params ...PracticumOrderByParam) scheduleToPracticumFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToPracticumFindFirst) Skip(count int) scheduleToPracticumFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToPracticumFindFirst) Take(count int) scheduleToPracticumFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToPracticumFindFirst) Cursor(cursor ScheduleCursorParam) scheduleToPracticumFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToPracticumFindFirst) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToPracticumFindFirst) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type scheduleToPracticumFindMany struct {
	query builder.Query
}

func (r scheduleToPracticumFindMany) getQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumFindMany) with()             {}
func (r scheduleToPracticumFindMany) scheduleModel()    {}
func (r scheduleToPracticumFindMany) scheduleRelation() {}

func (r scheduleToPracticumFindMany) With(params ...PracticumRelationWith) scheduleToPracticumFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToPracticumFindMany) Select(params ...schedulePrismaFields) scheduleToPracticumFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToPracticumFindMany) Omit(params ...schedulePrismaFields) scheduleToPracticumFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToPracticumFindMany) OrderBy(params ...PracticumOrderByParam) scheduleToPracticumFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToPracticumFindMany) Skip(count int) scheduleToPracticumFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToPracticumFindMany) Take(count int) scheduleToPracticumFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToPracticumFindMany) Cursor(cursor ScheduleCursorParam) scheduleToPracticumFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToPracticumFindMany) Exec(ctx context.Context) (
	[]ScheduleModel,
	error,
) {
	var v []ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToPracticumFindMany) ExecInner(ctx context.Context) (
	[]InnerSchedule,
	error,
) {
	var v []InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToPracticumFindMany) Update(params ...ScheduleSetParam) scheduleToPracticumUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Schedule"

	r.query.Outputs = countOutput

	var v scheduleToPracticumUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToPracticumUpdateMany struct {
	query builder.Query
}

func (r scheduleToPracticumUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToPracticumUpdateMany) scheduleModel() {}

func (r scheduleToPracticumUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToPracticumUpdateMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToPracticumFindMany) Delete() scheduleToPracticumDeleteMany {
	var v scheduleToPracticumDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Schedule"

	v.query.Outputs = countOutput

	return v
}

type scheduleToPracticumDeleteMany struct {
	query builder.Query
}

func (r scheduleToPracticumDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToPracticumDeleteMany) scheduleModel() {}

func (r scheduleToPracticumDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToPracticumDeleteMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToGroupFindUnique struct {
	query builder.Query
}

func (r scheduleToGroupFindUnique) getQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupFindUnique) with()             {}
func (r scheduleToGroupFindUnique) scheduleModel()    {}
func (r scheduleToGroupFindUnique) scheduleRelation() {}

func (r scheduleToGroupFindUnique) With(params ...GroupRelationWith) scheduleToGroupFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToGroupFindUnique) Select(params ...schedulePrismaFields) scheduleToGroupFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGroupFindUnique) Omit(params ...schedulePrismaFields) scheduleToGroupFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGroupFindUnique) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToGroupFindUnique) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToGroupFindUnique) Update(params ...ScheduleSetParam) scheduleToGroupUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Schedule"

	var v scheduleToGroupUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToGroupUpdateUnique struct {
	query builder.Query
}

func (r scheduleToGroupUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupUpdateUnique) scheduleModel() {}

func (r scheduleToGroupUpdateUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGroupUpdateUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToGroupFindUnique) Delete() scheduleToGroupDeleteUnique {
	var v scheduleToGroupDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Schedule"

	return v
}

type scheduleToGroupDeleteUnique struct {
	query builder.Query
}

func (r scheduleToGroupDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToGroupDeleteUnique) scheduleModel() {}

func (r scheduleToGroupDeleteUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGroupDeleteUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToGroupFindFirst struct {
	query builder.Query
}

func (r scheduleToGroupFindFirst) getQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupFindFirst) with()             {}
func (r scheduleToGroupFindFirst) scheduleModel()    {}
func (r scheduleToGroupFindFirst) scheduleRelation() {}

func (r scheduleToGroupFindFirst) With(params ...GroupRelationWith) scheduleToGroupFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToGroupFindFirst) Select(params ...schedulePrismaFields) scheduleToGroupFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGroupFindFirst) Omit(params ...schedulePrismaFields) scheduleToGroupFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGroupFindFirst) OrderBy(params ...GroupOrderByParam) scheduleToGroupFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToGroupFindFirst) Skip(count int) scheduleToGroupFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToGroupFindFirst) Take(count int) scheduleToGroupFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToGroupFindFirst) Cursor(cursor ScheduleCursorParam) scheduleToGroupFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToGroupFindFirst) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToGroupFindFirst) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type scheduleToGroupFindMany struct {
	query builder.Query
}

func (r scheduleToGroupFindMany) getQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupFindMany) with()             {}
func (r scheduleToGroupFindMany) scheduleModel()    {}
func (r scheduleToGroupFindMany) scheduleRelation() {}

func (r scheduleToGroupFindMany) With(params ...GroupRelationWith) scheduleToGroupFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToGroupFindMany) Select(params ...schedulePrismaFields) scheduleToGroupFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGroupFindMany) Omit(params ...schedulePrismaFields) scheduleToGroupFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGroupFindMany) OrderBy(params ...GroupOrderByParam) scheduleToGroupFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToGroupFindMany) Skip(count int) scheduleToGroupFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToGroupFindMany) Take(count int) scheduleToGroupFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToGroupFindMany) Cursor(cursor ScheduleCursorParam) scheduleToGroupFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToGroupFindMany) Exec(ctx context.Context) (
	[]ScheduleModel,
	error,
) {
	var v []ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToGroupFindMany) ExecInner(ctx context.Context) (
	[]InnerSchedule,
	error,
) {
	var v []InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToGroupFindMany) Update(params ...ScheduleSetParam) scheduleToGroupUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Schedule"

	r.query.Outputs = countOutput

	var v scheduleToGroupUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToGroupUpdateMany struct {
	query builder.Query
}

func (r scheduleToGroupUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGroupUpdateMany) scheduleModel() {}

func (r scheduleToGroupUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGroupUpdateMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToGroupFindMany) Delete() scheduleToGroupDeleteMany {
	var v scheduleToGroupDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Schedule"

	v.query.Outputs = countOutput

	return v
}

type scheduleToGroupDeleteMany struct {
	query builder.Query
}

func (r scheduleToGroupDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToGroupDeleteMany) scheduleModel() {}

func (r scheduleToGroupDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGroupDeleteMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToAssistantFindUnique struct {
	query builder.Query
}

func (r scheduleToAssistantFindUnique) getQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantFindUnique) with()             {}
func (r scheduleToAssistantFindUnique) scheduleModel()    {}
func (r scheduleToAssistantFindUnique) scheduleRelation() {}

func (r scheduleToAssistantFindUnique) With(params ...UserRelationWith) scheduleToAssistantFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToAssistantFindUnique) Select(params ...schedulePrismaFields) scheduleToAssistantFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAssistantFindUnique) Omit(params ...schedulePrismaFields) scheduleToAssistantFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAssistantFindUnique) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToAssistantFindUnique) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToAssistantFindUnique) Update(params ...ScheduleSetParam) scheduleToAssistantUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Schedule"

	var v scheduleToAssistantUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToAssistantUpdateUnique struct {
	query builder.Query
}

func (r scheduleToAssistantUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantUpdateUnique) scheduleModel() {}

func (r scheduleToAssistantUpdateUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAssistantUpdateUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToAssistantFindUnique) Delete() scheduleToAssistantDeleteUnique {
	var v scheduleToAssistantDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Schedule"

	return v
}

type scheduleToAssistantDeleteUnique struct {
	query builder.Query
}

func (r scheduleToAssistantDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToAssistantDeleteUnique) scheduleModel() {}

func (r scheduleToAssistantDeleteUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAssistantDeleteUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToAssistantFindFirst struct {
	query builder.Query
}

func (r scheduleToAssistantFindFirst) getQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantFindFirst) with()             {}
func (r scheduleToAssistantFindFirst) scheduleModel()    {}
func (r scheduleToAssistantFindFirst) scheduleRelation() {}

func (r scheduleToAssistantFindFirst) With(params ...UserRelationWith) scheduleToAssistantFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToAssistantFindFirst) Select(params ...schedulePrismaFields) scheduleToAssistantFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAssistantFindFirst) Omit(params ...schedulePrismaFields) scheduleToAssistantFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAssistantFindFirst) OrderBy(params ...UserOrderByParam) scheduleToAssistantFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToAssistantFindFirst) Skip(count int) scheduleToAssistantFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToAssistantFindFirst) Take(count int) scheduleToAssistantFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToAssistantFindFirst) Cursor(cursor ScheduleCursorParam) scheduleToAssistantFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToAssistantFindFirst) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToAssistantFindFirst) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type scheduleToAssistantFindMany struct {
	query builder.Query
}

func (r scheduleToAssistantFindMany) getQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantFindMany) with()             {}
func (r scheduleToAssistantFindMany) scheduleModel()    {}
func (r scheduleToAssistantFindMany) scheduleRelation() {}

func (r scheduleToAssistantFindMany) With(params ...UserRelationWith) scheduleToAssistantFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToAssistantFindMany) Select(params ...schedulePrismaFields) scheduleToAssistantFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAssistantFindMany) Omit(params ...schedulePrismaFields) scheduleToAssistantFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAssistantFindMany) OrderBy(params ...UserOrderByParam) scheduleToAssistantFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToAssistantFindMany) Skip(count int) scheduleToAssistantFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToAssistantFindMany) Take(count int) scheduleToAssistantFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToAssistantFindMany) Cursor(cursor ScheduleCursorParam) scheduleToAssistantFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToAssistantFindMany) Exec(ctx context.Context) (
	[]ScheduleModel,
	error,
) {
	var v []ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToAssistantFindMany) ExecInner(ctx context.Context) (
	[]InnerSchedule,
	error,
) {
	var v []InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToAssistantFindMany) Update(params ...ScheduleSetParam) scheduleToAssistantUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Schedule"

	r.query.Outputs = countOutput

	var v scheduleToAssistantUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToAssistantUpdateMany struct {
	query builder.Query
}

func (r scheduleToAssistantUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAssistantUpdateMany) scheduleModel() {}

func (r scheduleToAssistantUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAssistantUpdateMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToAssistantFindMany) Delete() scheduleToAssistantDeleteMany {
	var v scheduleToAssistantDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Schedule"

	v.query.Outputs = countOutput

	return v
}

type scheduleToAssistantDeleteMany struct {
	query builder.Query
}

func (r scheduleToAssistantDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToAssistantDeleteMany) scheduleModel() {}

func (r scheduleToAssistantDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAssistantDeleteMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToAttendanceCodesFindUnique struct {
	query builder.Query
}

func (r scheduleToAttendanceCodesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesFindUnique) with()             {}
func (r scheduleToAttendanceCodesFindUnique) scheduleModel()    {}
func (r scheduleToAttendanceCodesFindUnique) scheduleRelation() {}

func (r scheduleToAttendanceCodesFindUnique) With(params ...AttendanceCodeRelationWith) scheduleToAttendanceCodesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToAttendanceCodesFindUnique) Select(params ...schedulePrismaFields) scheduleToAttendanceCodesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAttendanceCodesFindUnique) Omit(params ...schedulePrismaFields) scheduleToAttendanceCodesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAttendanceCodesFindUnique) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToAttendanceCodesFindUnique) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToAttendanceCodesFindUnique) Update(params ...ScheduleSetParam) scheduleToAttendanceCodesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Schedule"

	var v scheduleToAttendanceCodesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToAttendanceCodesUpdateUnique struct {
	query builder.Query
}

func (r scheduleToAttendanceCodesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesUpdateUnique) scheduleModel() {}

func (r scheduleToAttendanceCodesUpdateUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAttendanceCodesUpdateUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToAttendanceCodesFindUnique) Delete() scheduleToAttendanceCodesDeleteUnique {
	var v scheduleToAttendanceCodesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Schedule"

	return v
}

type scheduleToAttendanceCodesDeleteUnique struct {
	query builder.Query
}

func (r scheduleToAttendanceCodesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToAttendanceCodesDeleteUnique) scheduleModel() {}

func (r scheduleToAttendanceCodesDeleteUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAttendanceCodesDeleteUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToAttendanceCodesFindFirst struct {
	query builder.Query
}

func (r scheduleToAttendanceCodesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesFindFirst) with()             {}
func (r scheduleToAttendanceCodesFindFirst) scheduleModel()    {}
func (r scheduleToAttendanceCodesFindFirst) scheduleRelation() {}

func (r scheduleToAttendanceCodesFindFirst) With(params ...AttendanceCodeRelationWith) scheduleToAttendanceCodesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToAttendanceCodesFindFirst) Select(params ...schedulePrismaFields) scheduleToAttendanceCodesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAttendanceCodesFindFirst) Omit(params ...schedulePrismaFields) scheduleToAttendanceCodesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAttendanceCodesFindFirst) OrderBy(params ...AttendanceCodeOrderByParam) scheduleToAttendanceCodesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToAttendanceCodesFindFirst) Skip(count int) scheduleToAttendanceCodesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToAttendanceCodesFindFirst) Take(count int) scheduleToAttendanceCodesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToAttendanceCodesFindFirst) Cursor(cursor ScheduleCursorParam) scheduleToAttendanceCodesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToAttendanceCodesFindFirst) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToAttendanceCodesFindFirst) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type scheduleToAttendanceCodesFindMany struct {
	query builder.Query
}

func (r scheduleToAttendanceCodesFindMany) getQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesFindMany) with()             {}
func (r scheduleToAttendanceCodesFindMany) scheduleModel()    {}
func (r scheduleToAttendanceCodesFindMany) scheduleRelation() {}

func (r scheduleToAttendanceCodesFindMany) With(params ...AttendanceCodeRelationWith) scheduleToAttendanceCodesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToAttendanceCodesFindMany) Select(params ...schedulePrismaFields) scheduleToAttendanceCodesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAttendanceCodesFindMany) Omit(params ...schedulePrismaFields) scheduleToAttendanceCodesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToAttendanceCodesFindMany) OrderBy(params ...AttendanceCodeOrderByParam) scheduleToAttendanceCodesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToAttendanceCodesFindMany) Skip(count int) scheduleToAttendanceCodesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToAttendanceCodesFindMany) Take(count int) scheduleToAttendanceCodesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToAttendanceCodesFindMany) Cursor(cursor ScheduleCursorParam) scheduleToAttendanceCodesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToAttendanceCodesFindMany) Exec(ctx context.Context) (
	[]ScheduleModel,
	error,
) {
	var v []ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToAttendanceCodesFindMany) ExecInner(ctx context.Context) (
	[]InnerSchedule,
	error,
) {
	var v []InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToAttendanceCodesFindMany) Update(params ...ScheduleSetParam) scheduleToAttendanceCodesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Schedule"

	r.query.Outputs = countOutput

	var v scheduleToAttendanceCodesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToAttendanceCodesUpdateMany struct {
	query builder.Query
}

func (r scheduleToAttendanceCodesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToAttendanceCodesUpdateMany) scheduleModel() {}

func (r scheduleToAttendanceCodesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAttendanceCodesUpdateMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToAttendanceCodesFindMany) Delete() scheduleToAttendanceCodesDeleteMany {
	var v scheduleToAttendanceCodesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Schedule"

	v.query.Outputs = countOutput

	return v
}

type scheduleToAttendanceCodesDeleteMany struct {
	query builder.Query
}

func (r scheduleToAttendanceCodesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToAttendanceCodesDeleteMany) scheduleModel() {}

func (r scheduleToAttendanceCodesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToAttendanceCodesDeleteMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToGradesFindUnique struct {
	query builder.Query
}

func (r scheduleToGradesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesFindUnique) with()             {}
func (r scheduleToGradesFindUnique) scheduleModel()    {}
func (r scheduleToGradesFindUnique) scheduleRelation() {}

func (r scheduleToGradesFindUnique) With(params ...GradeRelationWith) scheduleToGradesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToGradesFindUnique) Select(params ...schedulePrismaFields) scheduleToGradesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGradesFindUnique) Omit(params ...schedulePrismaFields) scheduleToGradesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGradesFindUnique) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToGradesFindUnique) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToGradesFindUnique) Update(params ...ScheduleSetParam) scheduleToGradesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Schedule"

	var v scheduleToGradesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToGradesUpdateUnique struct {
	query builder.Query
}

func (r scheduleToGradesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesUpdateUnique) scheduleModel() {}

func (r scheduleToGradesUpdateUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGradesUpdateUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToGradesFindUnique) Delete() scheduleToGradesDeleteUnique {
	var v scheduleToGradesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Schedule"

	return v
}

type scheduleToGradesDeleteUnique struct {
	query builder.Query
}

func (r scheduleToGradesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToGradesDeleteUnique) scheduleModel() {}

func (r scheduleToGradesDeleteUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGradesDeleteUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleToGradesFindFirst struct {
	query builder.Query
}

func (r scheduleToGradesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesFindFirst) with()             {}
func (r scheduleToGradesFindFirst) scheduleModel()    {}
func (r scheduleToGradesFindFirst) scheduleRelation() {}

func (r scheduleToGradesFindFirst) With(params ...GradeRelationWith) scheduleToGradesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToGradesFindFirst) Select(params ...schedulePrismaFields) scheduleToGradesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGradesFindFirst) Omit(params ...schedulePrismaFields) scheduleToGradesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGradesFindFirst) OrderBy(params ...GradeOrderByParam) scheduleToGradesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToGradesFindFirst) Skip(count int) scheduleToGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToGradesFindFirst) Take(count int) scheduleToGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToGradesFindFirst) Cursor(cursor ScheduleCursorParam) scheduleToGradesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToGradesFindFirst) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleToGradesFindFirst) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type scheduleToGradesFindMany struct {
	query builder.Query
}

func (r scheduleToGradesFindMany) getQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesFindMany) with()             {}
func (r scheduleToGradesFindMany) scheduleModel()    {}
func (r scheduleToGradesFindMany) scheduleRelation() {}

func (r scheduleToGradesFindMany) With(params ...GradeRelationWith) scheduleToGradesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleToGradesFindMany) Select(params ...schedulePrismaFields) scheduleToGradesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGradesFindMany) Omit(params ...schedulePrismaFields) scheduleToGradesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleToGradesFindMany) OrderBy(params ...GradeOrderByParam) scheduleToGradesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleToGradesFindMany) Skip(count int) scheduleToGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleToGradesFindMany) Take(count int) scheduleToGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleToGradesFindMany) Cursor(cursor ScheduleCursorParam) scheduleToGradesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleToGradesFindMany) Exec(ctx context.Context) (
	[]ScheduleModel,
	error,
) {
	var v []ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToGradesFindMany) ExecInner(ctx context.Context) (
	[]InnerSchedule,
	error,
) {
	var v []InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleToGradesFindMany) Update(params ...ScheduleSetParam) scheduleToGradesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Schedule"

	r.query.Outputs = countOutput

	var v scheduleToGradesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleToGradesUpdateMany struct {
	query builder.Query
}

func (r scheduleToGradesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleToGradesUpdateMany) scheduleModel() {}

func (r scheduleToGradesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGradesUpdateMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleToGradesFindMany) Delete() scheduleToGradesDeleteMany {
	var v scheduleToGradesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Schedule"

	v.query.Outputs = countOutput

	return v
}

type scheduleToGradesDeleteMany struct {
	query builder.Query
}

func (r scheduleToGradesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleToGradesDeleteMany) scheduleModel() {}

func (r scheduleToGradesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleToGradesDeleteMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleFindUnique struct {
	query builder.Query
}

func (r scheduleFindUnique) getQuery() builder.Query {
	return r.query
}

func (r scheduleFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleFindUnique) with()             {}
func (r scheduleFindUnique) scheduleModel()    {}
func (r scheduleFindUnique) scheduleRelation() {}

func (r scheduleActions) FindUnique(
	params ScheduleEqualsUniqueWhereParam,
) scheduleFindUnique {
	var v scheduleFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Schedule"
	v.query.Outputs = scheduleOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r scheduleFindUnique) With(params ...ScheduleRelationWith) scheduleFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleFindUnique) Select(params ...schedulePrismaFields) scheduleFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleFindUnique) Omit(params ...schedulePrismaFields) scheduleFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleFindUnique) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleFindUnique) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleFindUnique) Update(params ...ScheduleSetParam) scheduleUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Schedule"

	var v scheduleUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleUpdateUnique struct {
	query builder.Query
}

func (r scheduleUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleUpdateUnique) scheduleModel() {}

func (r scheduleUpdateUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleUpdateUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleFindUnique) Delete() scheduleDeleteUnique {
	var v scheduleDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Schedule"

	return v
}

type scheduleDeleteUnique struct {
	query builder.Query
}

func (r scheduleDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleDeleteUnique) scheduleModel() {}

func (r scheduleDeleteUnique) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleDeleteUnique) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleFindFirst struct {
	query builder.Query
}

func (r scheduleFindFirst) getQuery() builder.Query {
	return r.query
}

func (r scheduleFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleFindFirst) with()             {}
func (r scheduleFindFirst) scheduleModel()    {}
func (r scheduleFindFirst) scheduleRelation() {}

func (r scheduleActions) FindFirst(
	params ...ScheduleWhereParam,
) scheduleFindFirst {
	var v scheduleFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Schedule"
	v.query.Outputs = scheduleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r scheduleFindFirst) With(params ...ScheduleRelationWith) scheduleFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleFindFirst) Select(params ...schedulePrismaFields) scheduleFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleFindFirst) Omit(params ...schedulePrismaFields) scheduleFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleFindFirst) OrderBy(params ...ScheduleOrderByParam) scheduleFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleFindFirst) Skip(count int) scheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleFindFirst) Take(count int) scheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleFindFirst) Cursor(cursor ScheduleCursorParam) scheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleFindFirst) Exec(ctx context.Context) (
	*ScheduleModel,
	error,
) {
	var v *ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r scheduleFindFirst) ExecInner(ctx context.Context) (
	*InnerSchedule,
	error,
) {
	var v *InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type scheduleFindMany struct {
	query builder.Query
}

func (r scheduleFindMany) getQuery() builder.Query {
	return r.query
}

func (r scheduleFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleFindMany) with()             {}
func (r scheduleFindMany) scheduleModel()    {}
func (r scheduleFindMany) scheduleRelation() {}

func (r scheduleActions) FindMany(
	params ...ScheduleWhereParam,
) scheduleFindMany {
	var v scheduleFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Schedule"
	v.query.Outputs = scheduleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r scheduleFindMany) With(params ...ScheduleRelationWith) scheduleFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r scheduleFindMany) Select(params ...schedulePrismaFields) scheduleFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleFindMany) Omit(params ...schedulePrismaFields) scheduleFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range scheduleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r scheduleFindMany) OrderBy(params ...ScheduleOrderByParam) scheduleFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r scheduleFindMany) Skip(count int) scheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r scheduleFindMany) Take(count int) scheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r scheduleFindMany) Cursor(cursor ScheduleCursorParam) scheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r scheduleFindMany) Exec(ctx context.Context) (
	[]ScheduleModel,
	error,
) {
	var v []ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleFindMany) ExecInner(ctx context.Context) (
	[]InnerSchedule,
	error,
) {
	var v []InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r scheduleFindMany) Update(params ...ScheduleSetParam) scheduleUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Schedule"

	r.query.Outputs = countOutput

	var v scheduleUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type scheduleUpdateMany struct {
	query builder.Query
}

func (r scheduleUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleUpdateMany) scheduleModel() {}

func (r scheduleUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleUpdateMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r scheduleFindMany) Delete() scheduleDeleteMany {
	var v scheduleDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Schedule"

	v.query.Outputs = countOutput

	return v
}

type scheduleDeleteMany struct {
	query builder.Query
}

func (r scheduleDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p scheduleDeleteMany) scheduleModel() {}

func (r scheduleDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleDeleteMany) Tx() ScheduleManyTxResult {
	v := newScheduleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeToScheduleFindUnique struct {
	query builder.Query
}

func (r gradeToScheduleFindUnique) getQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleFindUnique) with()          {}
func (r gradeToScheduleFindUnique) gradeModel()    {}
func (r gradeToScheduleFindUnique) gradeRelation() {}

func (r gradeToScheduleFindUnique) With(params ...ScheduleRelationWith) gradeToScheduleFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToScheduleFindUnique) Select(params ...gradePrismaFields) gradeToScheduleFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToScheduleFindUnique) Omit(params ...gradePrismaFields) gradeToScheduleFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToScheduleFindUnique) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToScheduleFindUnique) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToScheduleFindUnique) Update(params ...GradeSetParam) gradeToScheduleUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Grade"

	var v gradeToScheduleUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeToScheduleUpdateUnique struct {
	query builder.Query
}

func (r gradeToScheduleUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleUpdateUnique) gradeModel() {}

func (r gradeToScheduleUpdateUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToScheduleUpdateUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeToScheduleFindUnique) Delete() gradeToScheduleDeleteUnique {
	var v gradeToScheduleDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Grade"

	return v
}

type gradeToScheduleDeleteUnique struct {
	query builder.Query
}

func (r gradeToScheduleDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeToScheduleDeleteUnique) gradeModel() {}

func (r gradeToScheduleDeleteUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToScheduleDeleteUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeToScheduleFindFirst struct {
	query builder.Query
}

func (r gradeToScheduleFindFirst) getQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleFindFirst) with()          {}
func (r gradeToScheduleFindFirst) gradeModel()    {}
func (r gradeToScheduleFindFirst) gradeRelation() {}

func (r gradeToScheduleFindFirst) With(params ...ScheduleRelationWith) gradeToScheduleFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToScheduleFindFirst) Select(params ...gradePrismaFields) gradeToScheduleFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToScheduleFindFirst) Omit(params ...gradePrismaFields) gradeToScheduleFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToScheduleFindFirst) OrderBy(params ...ScheduleOrderByParam) gradeToScheduleFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeToScheduleFindFirst) Skip(count int) gradeToScheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeToScheduleFindFirst) Take(count int) gradeToScheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeToScheduleFindFirst) Cursor(cursor GradeCursorParam) gradeToScheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeToScheduleFindFirst) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToScheduleFindFirst) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type gradeToScheduleFindMany struct {
	query builder.Query
}

func (r gradeToScheduleFindMany) getQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleFindMany) with()          {}
func (r gradeToScheduleFindMany) gradeModel()    {}
func (r gradeToScheduleFindMany) gradeRelation() {}

func (r gradeToScheduleFindMany) With(params ...ScheduleRelationWith) gradeToScheduleFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToScheduleFindMany) Select(params ...gradePrismaFields) gradeToScheduleFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToScheduleFindMany) Omit(params ...gradePrismaFields) gradeToScheduleFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToScheduleFindMany) OrderBy(params ...ScheduleOrderByParam) gradeToScheduleFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeToScheduleFindMany) Skip(count int) gradeToScheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeToScheduleFindMany) Take(count int) gradeToScheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeToScheduleFindMany) Cursor(cursor GradeCursorParam) gradeToScheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeToScheduleFindMany) Exec(ctx context.Context) (
	[]GradeModel,
	error,
) {
	var v []GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeToScheduleFindMany) ExecInner(ctx context.Context) (
	[]InnerGrade,
	error,
) {
	var v []InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeToScheduleFindMany) Update(params ...GradeSetParam) gradeToScheduleUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Grade"

	r.query.Outputs = countOutput

	var v gradeToScheduleUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeToScheduleUpdateMany struct {
	query builder.Query
}

func (r gradeToScheduleUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToScheduleUpdateMany) gradeModel() {}

func (r gradeToScheduleUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToScheduleUpdateMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeToScheduleFindMany) Delete() gradeToScheduleDeleteMany {
	var v gradeToScheduleDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Grade"

	v.query.Outputs = countOutput

	return v
}

type gradeToScheduleDeleteMany struct {
	query builder.Query
}

func (r gradeToScheduleDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeToScheduleDeleteMany) gradeModel() {}

func (r gradeToScheduleDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToScheduleDeleteMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeToUserFindUnique struct {
	query builder.Query
}

func (r gradeToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r gradeToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToUserFindUnique) with()          {}
func (r gradeToUserFindUnique) gradeModel()    {}
func (r gradeToUserFindUnique) gradeRelation() {}

func (r gradeToUserFindUnique) With(params ...UserRelationWith) gradeToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToUserFindUnique) Select(params ...gradePrismaFields) gradeToUserFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToUserFindUnique) Omit(params ...gradePrismaFields) gradeToUserFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToUserFindUnique) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToUserFindUnique) Update(params ...GradeSetParam) gradeToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Grade"

	var v gradeToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeToUserUpdateUnique struct {
	query builder.Query
}

func (r gradeToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToUserUpdateUnique) gradeModel() {}

func (r gradeToUserUpdateUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToUserUpdateUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeToUserFindUnique) Delete() gradeToUserDeleteUnique {
	var v gradeToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Grade"

	return v
}

type gradeToUserDeleteUnique struct {
	query builder.Query
}

func (r gradeToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeToUserDeleteUnique) gradeModel() {}

func (r gradeToUserDeleteUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToUserDeleteUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeToUserFindFirst struct {
	query builder.Query
}

func (r gradeToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r gradeToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToUserFindFirst) with()          {}
func (r gradeToUserFindFirst) gradeModel()    {}
func (r gradeToUserFindFirst) gradeRelation() {}

func (r gradeToUserFindFirst) With(params ...UserRelationWith) gradeToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToUserFindFirst) Select(params ...gradePrismaFields) gradeToUserFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToUserFindFirst) Omit(params ...gradePrismaFields) gradeToUserFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToUserFindFirst) OrderBy(params ...UserOrderByParam) gradeToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeToUserFindFirst) Skip(count int) gradeToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeToUserFindFirst) Take(count int) gradeToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeToUserFindFirst) Cursor(cursor GradeCursorParam) gradeToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeToUserFindFirst) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type gradeToUserFindMany struct {
	query builder.Query
}

func (r gradeToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r gradeToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToUserFindMany) with()          {}
func (r gradeToUserFindMany) gradeModel()    {}
func (r gradeToUserFindMany) gradeRelation() {}

func (r gradeToUserFindMany) With(params ...UserRelationWith) gradeToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToUserFindMany) Select(params ...gradePrismaFields) gradeToUserFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToUserFindMany) Omit(params ...gradePrismaFields) gradeToUserFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToUserFindMany) OrderBy(params ...UserOrderByParam) gradeToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeToUserFindMany) Skip(count int) gradeToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeToUserFindMany) Take(count int) gradeToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeToUserFindMany) Cursor(cursor GradeCursorParam) gradeToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeToUserFindMany) Exec(ctx context.Context) (
	[]GradeModel,
	error,
) {
	var v []GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerGrade,
	error,
) {
	var v []InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeToUserFindMany) Update(params ...GradeSetParam) gradeToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Grade"

	r.query.Outputs = countOutput

	var v gradeToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeToUserUpdateMany struct {
	query builder.Query
}

func (r gradeToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToUserUpdateMany) gradeModel() {}

func (r gradeToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToUserUpdateMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeToUserFindMany) Delete() gradeToUserDeleteMany {
	var v gradeToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Grade"

	v.query.Outputs = countOutput

	return v
}

type gradeToUserDeleteMany struct {
	query builder.Query
}

func (r gradeToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeToUserDeleteMany) gradeModel() {}

func (r gradeToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToUserDeleteMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeToGraderFindUnique struct {
	query builder.Query
}

func (r gradeToGraderFindUnique) getQuery() builder.Query {
	return r.query
}

func (r gradeToGraderFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToGraderFindUnique) with()          {}
func (r gradeToGraderFindUnique) gradeModel()    {}
func (r gradeToGraderFindUnique) gradeRelation() {}

func (r gradeToGraderFindUnique) With(params ...UserRelationWith) gradeToGraderFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToGraderFindUnique) Select(params ...gradePrismaFields) gradeToGraderFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToGraderFindUnique) Omit(params ...gradePrismaFields) gradeToGraderFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToGraderFindUnique) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToGraderFindUnique) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToGraderFindUnique) Update(params ...GradeSetParam) gradeToGraderUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Grade"

	var v gradeToGraderUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeToGraderUpdateUnique struct {
	query builder.Query
}

func (r gradeToGraderUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToGraderUpdateUnique) gradeModel() {}

func (r gradeToGraderUpdateUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToGraderUpdateUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeToGraderFindUnique) Delete() gradeToGraderDeleteUnique {
	var v gradeToGraderDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Grade"

	return v
}

type gradeToGraderDeleteUnique struct {
	query builder.Query
}

func (r gradeToGraderDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeToGraderDeleteUnique) gradeModel() {}

func (r gradeToGraderDeleteUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToGraderDeleteUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeToGraderFindFirst struct {
	query builder.Query
}

func (r gradeToGraderFindFirst) getQuery() builder.Query {
	return r.query
}

func (r gradeToGraderFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToGraderFindFirst) with()          {}
func (r gradeToGraderFindFirst) gradeModel()    {}
func (r gradeToGraderFindFirst) gradeRelation() {}

func (r gradeToGraderFindFirst) With(params ...UserRelationWith) gradeToGraderFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToGraderFindFirst) Select(params ...gradePrismaFields) gradeToGraderFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToGraderFindFirst) Omit(params ...gradePrismaFields) gradeToGraderFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToGraderFindFirst) OrderBy(params ...UserOrderByParam) gradeToGraderFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeToGraderFindFirst) Skip(count int) gradeToGraderFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeToGraderFindFirst) Take(count int) gradeToGraderFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeToGraderFindFirst) Cursor(cursor GradeCursorParam) gradeToGraderFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeToGraderFindFirst) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeToGraderFindFirst) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type gradeToGraderFindMany struct {
	query builder.Query
}

func (r gradeToGraderFindMany) getQuery() builder.Query {
	return r.query
}

func (r gradeToGraderFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToGraderFindMany) with()          {}
func (r gradeToGraderFindMany) gradeModel()    {}
func (r gradeToGraderFindMany) gradeRelation() {}

func (r gradeToGraderFindMany) With(params ...UserRelationWith) gradeToGraderFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeToGraderFindMany) Select(params ...gradePrismaFields) gradeToGraderFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToGraderFindMany) Omit(params ...gradePrismaFields) gradeToGraderFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeToGraderFindMany) OrderBy(params ...UserOrderByParam) gradeToGraderFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeToGraderFindMany) Skip(count int) gradeToGraderFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeToGraderFindMany) Take(count int) gradeToGraderFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeToGraderFindMany) Cursor(cursor GradeCursorParam) gradeToGraderFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeToGraderFindMany) Exec(ctx context.Context) (
	[]GradeModel,
	error,
) {
	var v []GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeToGraderFindMany) ExecInner(ctx context.Context) (
	[]InnerGrade,
	error,
) {
	var v []InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeToGraderFindMany) Update(params ...GradeSetParam) gradeToGraderUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Grade"

	r.query.Outputs = countOutput

	var v gradeToGraderUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeToGraderUpdateMany struct {
	query builder.Query
}

func (r gradeToGraderUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeToGraderUpdateMany) gradeModel() {}

func (r gradeToGraderUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToGraderUpdateMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeToGraderFindMany) Delete() gradeToGraderDeleteMany {
	var v gradeToGraderDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Grade"

	v.query.Outputs = countOutput

	return v
}

type gradeToGraderDeleteMany struct {
	query builder.Query
}

func (r gradeToGraderDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeToGraderDeleteMany) gradeModel() {}

func (r gradeToGraderDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeToGraderDeleteMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeFindUnique struct {
	query builder.Query
}

func (r gradeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r gradeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeFindUnique) with()          {}
func (r gradeFindUnique) gradeModel()    {}
func (r gradeFindUnique) gradeRelation() {}

func (r gradeActions) FindUnique(
	params GradeEqualsUniqueWhereParam,
) gradeFindUnique {
	var v gradeFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Grade"
	v.query.Outputs = gradeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r gradeFindUnique) With(params ...GradeRelationWith) gradeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeFindUnique) Select(params ...gradePrismaFields) gradeFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeFindUnique) Omit(params ...gradePrismaFields) gradeFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeFindUnique) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeFindUnique) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeFindUnique) Update(params ...GradeSetParam) gradeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Grade"

	var v gradeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeUpdateUnique struct {
	query builder.Query
}

func (r gradeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeUpdateUnique) gradeModel() {}

func (r gradeUpdateUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeUpdateUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeFindUnique) Delete() gradeDeleteUnique {
	var v gradeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Grade"

	return v
}

type gradeDeleteUnique struct {
	query builder.Query
}

func (r gradeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeDeleteUnique) gradeModel() {}

func (r gradeDeleteUnique) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeDeleteUnique) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeFindFirst struct {
	query builder.Query
}

func (r gradeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r gradeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeFindFirst) with()          {}
func (r gradeFindFirst) gradeModel()    {}
func (r gradeFindFirst) gradeRelation() {}

func (r gradeActions) FindFirst(
	params ...GradeWhereParam,
) gradeFindFirst {
	var v gradeFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Grade"
	v.query.Outputs = gradeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r gradeFindFirst) With(params ...GradeRelationWith) gradeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeFindFirst) Select(params ...gradePrismaFields) gradeFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeFindFirst) Omit(params ...gradePrismaFields) gradeFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeFindFirst) OrderBy(params ...GradeOrderByParam) gradeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeFindFirst) Skip(count int) gradeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeFindFirst) Take(count int) gradeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeFindFirst) Cursor(cursor GradeCursorParam) gradeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeFindFirst) Exec(ctx context.Context) (
	*GradeModel,
	error,
) {
	var v *GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r gradeFindFirst) ExecInner(ctx context.Context) (
	*InnerGrade,
	error,
) {
	var v *InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type gradeFindMany struct {
	query builder.Query
}

func (r gradeFindMany) getQuery() builder.Query {
	return r.query
}

func (r gradeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeFindMany) with()          {}
func (r gradeFindMany) gradeModel()    {}
func (r gradeFindMany) gradeRelation() {}

func (r gradeActions) FindMany(
	params ...GradeWhereParam,
) gradeFindMany {
	var v gradeFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Grade"
	v.query.Outputs = gradeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r gradeFindMany) With(params ...GradeRelationWith) gradeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r gradeFindMany) Select(params ...gradePrismaFields) gradeFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeFindMany) Omit(params ...gradePrismaFields) gradeFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range gradeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r gradeFindMany) OrderBy(params ...GradeOrderByParam) gradeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r gradeFindMany) Skip(count int) gradeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r gradeFindMany) Take(count int) gradeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r gradeFindMany) Cursor(cursor GradeCursorParam) gradeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r gradeFindMany) Exec(ctx context.Context) (
	[]GradeModel,
	error,
) {
	var v []GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeFindMany) ExecInner(ctx context.Context) (
	[]InnerGrade,
	error,
) {
	var v []InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r gradeFindMany) Update(params ...GradeSetParam) gradeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Grade"

	r.query.Outputs = countOutput

	var v gradeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type gradeUpdateMany struct {
	query builder.Query
}

func (r gradeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeUpdateMany) gradeModel() {}

func (r gradeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeUpdateMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r gradeFindMany) Delete() gradeDeleteMany {
	var v gradeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Grade"

	v.query.Outputs = countOutput

	return v
}

type gradeDeleteMany struct {
	query builder.Query
}

func (r gradeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p gradeDeleteMany) gradeModel() {}

func (r gradeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeDeleteMany) Tx() GradeManyTxResult {
	v := newGradeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type announcementToAuthorFindUnique struct {
	query builder.Query
}

func (r announcementToAuthorFindUnique) getQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorFindUnique) with()                 {}
func (r announcementToAuthorFindUnique) announcementModel()    {}
func (r announcementToAuthorFindUnique) announcementRelation() {}

func (r announcementToAuthorFindUnique) With(params ...UserRelationWith) announcementToAuthorFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r announcementToAuthorFindUnique) Select(params ...announcementPrismaFields) announcementToAuthorFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementToAuthorFindUnique) Omit(params ...announcementPrismaFields) announcementToAuthorFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range announcementOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementToAuthorFindUnique) Exec(ctx context.Context) (
	*AnnouncementModel,
	error,
) {
	var v *AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r announcementToAuthorFindUnique) ExecInner(ctx context.Context) (
	*InnerAnnouncement,
	error,
) {
	var v *InnerAnnouncement
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r announcementToAuthorFindUnique) Update(params ...AnnouncementSetParam) announcementToAuthorUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Announcement"

	var v announcementToAuthorUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type announcementToAuthorUpdateUnique struct {
	query builder.Query
}

func (r announcementToAuthorUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorUpdateUnique) announcementModel() {}

func (r announcementToAuthorUpdateUnique) Exec(ctx context.Context) (*AnnouncementModel, error) {
	var v AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementToAuthorUpdateUnique) Tx() AnnouncementUniqueTxResult {
	v := newAnnouncementUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r announcementToAuthorFindUnique) Delete() announcementToAuthorDeleteUnique {
	var v announcementToAuthorDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Announcement"

	return v
}

type announcementToAuthorDeleteUnique struct {
	query builder.Query
}

func (r announcementToAuthorDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p announcementToAuthorDeleteUnique) announcementModel() {}

func (r announcementToAuthorDeleteUnique) Exec(ctx context.Context) (*AnnouncementModel, error) {
	var v AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementToAuthorDeleteUnique) Tx() AnnouncementUniqueTxResult {
	v := newAnnouncementUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type announcementToAuthorFindFirst struct {
	query builder.Query
}

func (r announcementToAuthorFindFirst) getQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorFindFirst) with()                 {}
func (r announcementToAuthorFindFirst) announcementModel()    {}
func (r announcementToAuthorFindFirst) announcementRelation() {}

func (r announcementToAuthorFindFirst) With(params ...UserRelationWith) announcementToAuthorFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r announcementToAuthorFindFirst) Select(params ...announcementPrismaFields) announcementToAuthorFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementToAuthorFindFirst) Omit(params ...announcementPrismaFields) announcementToAuthorFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range announcementOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementToAuthorFindFirst) OrderBy(params ...UserOrderByParam) announcementToAuthorFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r announcementToAuthorFindFirst) Skip(count int) announcementToAuthorFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r announcementToAuthorFindFirst) Take(count int) announcementToAuthorFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r announcementToAuthorFindFirst) Cursor(cursor AnnouncementCursorParam) announcementToAuthorFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r announcementToAuthorFindFirst) Exec(ctx context.Context) (
	*AnnouncementModel,
	error,
) {
	var v *AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r announcementToAuthorFindFirst) ExecInner(ctx context.Context) (
	*InnerAnnouncement,
	error,
) {
	var v *InnerAnnouncement
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type announcementToAuthorFindMany struct {
	query builder.Query
}

func (r announcementToAuthorFindMany) getQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorFindMany) with()                 {}
func (r announcementToAuthorFindMany) announcementModel()    {}
func (r announcementToAuthorFindMany) announcementRelation() {}

func (r announcementToAuthorFindMany) With(params ...UserRelationWith) announcementToAuthorFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r announcementToAuthorFindMany) Select(params ...announcementPrismaFields) announcementToAuthorFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementToAuthorFindMany) Omit(params ...announcementPrismaFields) announcementToAuthorFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range announcementOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementToAuthorFindMany) OrderBy(params ...UserOrderByParam) announcementToAuthorFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r announcementToAuthorFindMany) Skip(count int) announcementToAuthorFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r announcementToAuthorFindMany) Take(count int) announcementToAuthorFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r announcementToAuthorFindMany) Cursor(cursor AnnouncementCursorParam) announcementToAuthorFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r announcementToAuthorFindMany) Exec(ctx context.Context) (
	[]AnnouncementModel,
	error,
) {
	var v []AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r announcementToAuthorFindMany) ExecInner(ctx context.Context) (
	[]InnerAnnouncement,
	error,
) {
	var v []InnerAnnouncement
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r announcementToAuthorFindMany) Update(params ...AnnouncementSetParam) announcementToAuthorUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Announcement"

	r.query.Outputs = countOutput

	var v announcementToAuthorUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type announcementToAuthorUpdateMany struct {
	query builder.Query
}

func (r announcementToAuthorUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementToAuthorUpdateMany) announcementModel() {}

func (r announcementToAuthorUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementToAuthorUpdateMany) Tx() AnnouncementManyTxResult {
	v := newAnnouncementManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r announcementToAuthorFindMany) Delete() announcementToAuthorDeleteMany {
	var v announcementToAuthorDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Announcement"

	v.query.Outputs = countOutput

	return v
}

type announcementToAuthorDeleteMany struct {
	query builder.Query
}

func (r announcementToAuthorDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p announcementToAuthorDeleteMany) announcementModel() {}

func (r announcementToAuthorDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementToAuthorDeleteMany) Tx() AnnouncementManyTxResult {
	v := newAnnouncementManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type announcementFindUnique struct {
	query builder.Query
}

func (r announcementFindUnique) getQuery() builder.Query {
	return r.query
}

func (r announcementFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementFindUnique) with()                 {}
func (r announcementFindUnique) announcementModel()    {}
func (r announcementFindUnique) announcementRelation() {}

func (r announcementActions) FindUnique(
	params AnnouncementEqualsUniqueWhereParam,
) announcementFindUnique {
	var v announcementFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Announcement"
	v.query.Outputs = announcementOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r announcementFindUnique) With(params ...AnnouncementRelationWith) announcementFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r announcementFindUnique) Select(params ...announcementPrismaFields) announcementFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementFindUnique) Omit(params ...announcementPrismaFields) announcementFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range announcementOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementFindUnique) Exec(ctx context.Context) (
	*AnnouncementModel,
	error,
) {
	var v *AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r announcementFindUnique) ExecInner(ctx context.Context) (
	*InnerAnnouncement,
	error,
) {
	var v *InnerAnnouncement
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r announcementFindUnique) Update(params ...AnnouncementSetParam) announcementUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Announcement"

	var v announcementUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type announcementUpdateUnique struct {
	query builder.Query
}

func (r announcementUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementUpdateUnique) announcementModel() {}

func (r announcementUpdateUnique) Exec(ctx context.Context) (*AnnouncementModel, error) {
	var v AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementUpdateUnique) Tx() AnnouncementUniqueTxResult {
	v := newAnnouncementUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r announcementFindUnique) Delete() announcementDeleteUnique {
	var v announcementDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Announcement"

	return v
}

type announcementDeleteUnique struct {
	query builder.Query
}

func (r announcementDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p announcementDeleteUnique) announcementModel() {}

func (r announcementDeleteUnique) Exec(ctx context.Context) (*AnnouncementModel, error) {
	var v AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementDeleteUnique) Tx() AnnouncementUniqueTxResult {
	v := newAnnouncementUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type announcementFindFirst struct {
	query builder.Query
}

func (r announcementFindFirst) getQuery() builder.Query {
	return r.query
}

func (r announcementFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementFindFirst) with()                 {}
func (r announcementFindFirst) announcementModel()    {}
func (r announcementFindFirst) announcementRelation() {}

func (r announcementActions) FindFirst(
	params ...AnnouncementWhereParam,
) announcementFindFirst {
	var v announcementFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Announcement"
	v.query.Outputs = announcementOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r announcementFindFirst) With(params ...AnnouncementRelationWith) announcementFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r announcementFindFirst) Select(params ...announcementPrismaFields) announcementFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementFindFirst) Omit(params ...announcementPrismaFields) announcementFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range announcementOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementFindFirst) OrderBy(params ...AnnouncementOrderByParam) announcementFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r announcementFindFirst) Skip(count int) announcementFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r announcementFindFirst) Take(count int) announcementFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r announcementFindFirst) Cursor(cursor AnnouncementCursorParam) announcementFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r announcementFindFirst) Exec(ctx context.Context) (
	*AnnouncementModel,
	error,
) {
	var v *AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r announcementFindFirst) ExecInner(ctx context.Context) (
	*InnerAnnouncement,
	error,
) {
	var v *InnerAnnouncement
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type announcementFindMany struct {
	query builder.Query
}

func (r announcementFindMany) getQuery() builder.Query {
	return r.query
}

func (r announcementFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementFindMany) with()                 {}
func (r announcementFindMany) announcementModel()    {}
func (r announcementFindMany) announcementRelation() {}

func (r announcementActions) FindMany(
	params ...AnnouncementWhereParam,
) announcementFindMany {
	var v announcementFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Announcement"
	v.query.Outputs = announcementOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r announcementFindMany) With(params ...AnnouncementRelationWith) announcementFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r announcementFindMany) Select(params ...announcementPrismaFields) announcementFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementFindMany) Omit(params ...announcementPrismaFields) announcementFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range announcementOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r announcementFindMany) OrderBy(params ...AnnouncementOrderByParam) announcementFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r announcementFindMany) Skip(count int) announcementFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r announcementFindMany) Take(count int) announcementFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r announcementFindMany) Cursor(cursor AnnouncementCursorParam) announcementFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r announcementFindMany) Exec(ctx context.Context) (
	[]AnnouncementModel,
	error,
) {
	var v []AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r announcementFindMany) ExecInner(ctx context.Context) (
	[]InnerAnnouncement,
	error,
) {
	var v []InnerAnnouncement
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r announcementFindMany) Update(params ...AnnouncementSetParam) announcementUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Announcement"

	r.query.Outputs = countOutput

	var v announcementUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type announcementUpdateMany struct {
	query builder.Query
}

func (r announcementUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementUpdateMany) announcementModel() {}

func (r announcementUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementUpdateMany) Tx() AnnouncementManyTxResult {
	v := newAnnouncementManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r announcementFindMany) Delete() announcementDeleteMany {
	var v announcementDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Announcement"

	v.query.Outputs = countOutput

	return v
}

type announcementDeleteMany struct {
	query builder.Query
}

func (r announcementDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p announcementDeleteMany) announcementModel() {}

func (r announcementDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementDeleteMany) Tx() AnnouncementManyTxResult {
	v := newAnnouncementManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceCodeToScheduleFindUnique struct {
	query builder.Query
}

func (r attendanceCodeToScheduleFindUnique) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleFindUnique) with()                   {}
func (r attendanceCodeToScheduleFindUnique) attendanceCodeModel()    {}
func (r attendanceCodeToScheduleFindUnique) attendanceCodeRelation() {}

func (r attendanceCodeToScheduleFindUnique) With(params ...ScheduleRelationWith) attendanceCodeToScheduleFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeToScheduleFindUnique) Select(params ...attendanceCodePrismaFields) attendanceCodeToScheduleFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToScheduleFindUnique) Omit(params ...attendanceCodePrismaFields) attendanceCodeToScheduleFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToScheduleFindUnique) Exec(ctx context.Context) (
	*AttendanceCodeModel,
	error,
) {
	var v *AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeToScheduleFindUnique) ExecInner(ctx context.Context) (
	*InnerAttendanceCode,
	error,
) {
	var v *InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeToScheduleFindUnique) Update(params ...AttendanceCodeSetParam) attendanceCodeToScheduleUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AttendanceCode"

	var v attendanceCodeToScheduleUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceCodeToScheduleUpdateUnique struct {
	query builder.Query
}

func (r attendanceCodeToScheduleUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleUpdateUnique) attendanceCodeModel() {}

func (r attendanceCodeToScheduleUpdateUnique) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToScheduleUpdateUnique) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceCodeToScheduleFindUnique) Delete() attendanceCodeToScheduleDeleteUnique {
	var v attendanceCodeToScheduleDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AttendanceCode"

	return v
}

type attendanceCodeToScheduleDeleteUnique struct {
	query builder.Query
}

func (r attendanceCodeToScheduleDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceCodeToScheduleDeleteUnique) attendanceCodeModel() {}

func (r attendanceCodeToScheduleDeleteUnique) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToScheduleDeleteUnique) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceCodeToScheduleFindFirst struct {
	query builder.Query
}

func (r attendanceCodeToScheduleFindFirst) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleFindFirst) with()                   {}
func (r attendanceCodeToScheduleFindFirst) attendanceCodeModel()    {}
func (r attendanceCodeToScheduleFindFirst) attendanceCodeRelation() {}

func (r attendanceCodeToScheduleFindFirst) With(params ...ScheduleRelationWith) attendanceCodeToScheduleFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeToScheduleFindFirst) Select(params ...attendanceCodePrismaFields) attendanceCodeToScheduleFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToScheduleFindFirst) Omit(params ...attendanceCodePrismaFields) attendanceCodeToScheduleFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToScheduleFindFirst) OrderBy(params ...ScheduleOrderByParam) attendanceCodeToScheduleFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceCodeToScheduleFindFirst) Skip(count int) attendanceCodeToScheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceCodeToScheduleFindFirst) Take(count int) attendanceCodeToScheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceCodeToScheduleFindFirst) Cursor(cursor AttendanceCodeCursorParam) attendanceCodeToScheduleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceCodeToScheduleFindFirst) Exec(ctx context.Context) (
	*AttendanceCodeModel,
	error,
) {
	var v *AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeToScheduleFindFirst) ExecInner(ctx context.Context) (
	*InnerAttendanceCode,
	error,
) {
	var v *InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type attendanceCodeToScheduleFindMany struct {
	query builder.Query
}

func (r attendanceCodeToScheduleFindMany) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleFindMany) with()                   {}
func (r attendanceCodeToScheduleFindMany) attendanceCodeModel()    {}
func (r attendanceCodeToScheduleFindMany) attendanceCodeRelation() {}

func (r attendanceCodeToScheduleFindMany) With(params ...ScheduleRelationWith) attendanceCodeToScheduleFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeToScheduleFindMany) Select(params ...attendanceCodePrismaFields) attendanceCodeToScheduleFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToScheduleFindMany) Omit(params ...attendanceCodePrismaFields) attendanceCodeToScheduleFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToScheduleFindMany) OrderBy(params ...ScheduleOrderByParam) attendanceCodeToScheduleFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceCodeToScheduleFindMany) Skip(count int) attendanceCodeToScheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceCodeToScheduleFindMany) Take(count int) attendanceCodeToScheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceCodeToScheduleFindMany) Cursor(cursor AttendanceCodeCursorParam) attendanceCodeToScheduleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceCodeToScheduleFindMany) Exec(ctx context.Context) (
	[]AttendanceCodeModel,
	error,
) {
	var v []AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceCodeToScheduleFindMany) ExecInner(ctx context.Context) (
	[]InnerAttendanceCode,
	error,
) {
	var v []InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceCodeToScheduleFindMany) Update(params ...AttendanceCodeSetParam) attendanceCodeToScheduleUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AttendanceCode"

	r.query.Outputs = countOutput

	var v attendanceCodeToScheduleUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceCodeToScheduleUpdateMany struct {
	query builder.Query
}

func (r attendanceCodeToScheduleUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToScheduleUpdateMany) attendanceCodeModel() {}

func (r attendanceCodeToScheduleUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToScheduleUpdateMany) Tx() AttendanceCodeManyTxResult {
	v := newAttendanceCodeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceCodeToScheduleFindMany) Delete() attendanceCodeToScheduleDeleteMany {
	var v attendanceCodeToScheduleDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AttendanceCode"

	v.query.Outputs = countOutput

	return v
}

type attendanceCodeToScheduleDeleteMany struct {
	query builder.Query
}

func (r attendanceCodeToScheduleDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceCodeToScheduleDeleteMany) attendanceCodeModel() {}

func (r attendanceCodeToScheduleDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToScheduleDeleteMany) Tx() AttendanceCodeManyTxResult {
	v := newAttendanceCodeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceCodeToAttendancesFindUnique struct {
	query builder.Query
}

func (r attendanceCodeToAttendancesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesFindUnique) with()                   {}
func (r attendanceCodeToAttendancesFindUnique) attendanceCodeModel()    {}
func (r attendanceCodeToAttendancesFindUnique) attendanceCodeRelation() {}

func (r attendanceCodeToAttendancesFindUnique) With(params ...AttendanceRelationWith) attendanceCodeToAttendancesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeToAttendancesFindUnique) Select(params ...attendanceCodePrismaFields) attendanceCodeToAttendancesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToAttendancesFindUnique) Omit(params ...attendanceCodePrismaFields) attendanceCodeToAttendancesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToAttendancesFindUnique) Exec(ctx context.Context) (
	*AttendanceCodeModel,
	error,
) {
	var v *AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeToAttendancesFindUnique) ExecInner(ctx context.Context) (
	*InnerAttendanceCode,
	error,
) {
	var v *InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeToAttendancesFindUnique) Update(params ...AttendanceCodeSetParam) attendanceCodeToAttendancesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AttendanceCode"

	var v attendanceCodeToAttendancesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceCodeToAttendancesUpdateUnique struct {
	query builder.Query
}

func (r attendanceCodeToAttendancesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesUpdateUnique) attendanceCodeModel() {}

func (r attendanceCodeToAttendancesUpdateUnique) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToAttendancesUpdateUnique) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceCodeToAttendancesFindUnique) Delete() attendanceCodeToAttendancesDeleteUnique {
	var v attendanceCodeToAttendancesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AttendanceCode"

	return v
}

type attendanceCodeToAttendancesDeleteUnique struct {
	query builder.Query
}

func (r attendanceCodeToAttendancesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceCodeToAttendancesDeleteUnique) attendanceCodeModel() {}

func (r attendanceCodeToAttendancesDeleteUnique) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToAttendancesDeleteUnique) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceCodeToAttendancesFindFirst struct {
	query builder.Query
}

func (r attendanceCodeToAttendancesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesFindFirst) with()                   {}
func (r attendanceCodeToAttendancesFindFirst) attendanceCodeModel()    {}
func (r attendanceCodeToAttendancesFindFirst) attendanceCodeRelation() {}

func (r attendanceCodeToAttendancesFindFirst) With(params ...AttendanceRelationWith) attendanceCodeToAttendancesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeToAttendancesFindFirst) Select(params ...attendanceCodePrismaFields) attendanceCodeToAttendancesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToAttendancesFindFirst) Omit(params ...attendanceCodePrismaFields) attendanceCodeToAttendancesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToAttendancesFindFirst) OrderBy(params ...AttendanceOrderByParam) attendanceCodeToAttendancesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceCodeToAttendancesFindFirst) Skip(count int) attendanceCodeToAttendancesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceCodeToAttendancesFindFirst) Take(count int) attendanceCodeToAttendancesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceCodeToAttendancesFindFirst) Cursor(cursor AttendanceCodeCursorParam) attendanceCodeToAttendancesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceCodeToAttendancesFindFirst) Exec(ctx context.Context) (
	*AttendanceCodeModel,
	error,
) {
	var v *AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeToAttendancesFindFirst) ExecInner(ctx context.Context) (
	*InnerAttendanceCode,
	error,
) {
	var v *InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type attendanceCodeToAttendancesFindMany struct {
	query builder.Query
}

func (r attendanceCodeToAttendancesFindMany) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesFindMany) with()                   {}
func (r attendanceCodeToAttendancesFindMany) attendanceCodeModel()    {}
func (r attendanceCodeToAttendancesFindMany) attendanceCodeRelation() {}

func (r attendanceCodeToAttendancesFindMany) With(params ...AttendanceRelationWith) attendanceCodeToAttendancesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeToAttendancesFindMany) Select(params ...attendanceCodePrismaFields) attendanceCodeToAttendancesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToAttendancesFindMany) Omit(params ...attendanceCodePrismaFields) attendanceCodeToAttendancesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeToAttendancesFindMany) OrderBy(params ...AttendanceOrderByParam) attendanceCodeToAttendancesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceCodeToAttendancesFindMany) Skip(count int) attendanceCodeToAttendancesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceCodeToAttendancesFindMany) Take(count int) attendanceCodeToAttendancesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceCodeToAttendancesFindMany) Cursor(cursor AttendanceCodeCursorParam) attendanceCodeToAttendancesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceCodeToAttendancesFindMany) Exec(ctx context.Context) (
	[]AttendanceCodeModel,
	error,
) {
	var v []AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceCodeToAttendancesFindMany) ExecInner(ctx context.Context) (
	[]InnerAttendanceCode,
	error,
) {
	var v []InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceCodeToAttendancesFindMany) Update(params ...AttendanceCodeSetParam) attendanceCodeToAttendancesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AttendanceCode"

	r.query.Outputs = countOutput

	var v attendanceCodeToAttendancesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceCodeToAttendancesUpdateMany struct {
	query builder.Query
}

func (r attendanceCodeToAttendancesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeToAttendancesUpdateMany) attendanceCodeModel() {}

func (r attendanceCodeToAttendancesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToAttendancesUpdateMany) Tx() AttendanceCodeManyTxResult {
	v := newAttendanceCodeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceCodeToAttendancesFindMany) Delete() attendanceCodeToAttendancesDeleteMany {
	var v attendanceCodeToAttendancesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AttendanceCode"

	v.query.Outputs = countOutput

	return v
}

type attendanceCodeToAttendancesDeleteMany struct {
	query builder.Query
}

func (r attendanceCodeToAttendancesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceCodeToAttendancesDeleteMany) attendanceCodeModel() {}

func (r attendanceCodeToAttendancesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeToAttendancesDeleteMany) Tx() AttendanceCodeManyTxResult {
	v := newAttendanceCodeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceCodeFindUnique struct {
	query builder.Query
}

func (r attendanceCodeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeFindUnique) with()                   {}
func (r attendanceCodeFindUnique) attendanceCodeModel()    {}
func (r attendanceCodeFindUnique) attendanceCodeRelation() {}

func (r attendanceCodeActions) FindUnique(
	params AttendanceCodeEqualsUniqueWhereParam,
) attendanceCodeFindUnique {
	var v attendanceCodeFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "AttendanceCode"
	v.query.Outputs = attendanceCodeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r attendanceCodeFindUnique) With(params ...AttendanceCodeRelationWith) attendanceCodeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeFindUnique) Select(params ...attendanceCodePrismaFields) attendanceCodeFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeFindUnique) Omit(params ...attendanceCodePrismaFields) attendanceCodeFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeFindUnique) Exec(ctx context.Context) (
	*AttendanceCodeModel,
	error,
) {
	var v *AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeFindUnique) ExecInner(ctx context.Context) (
	*InnerAttendanceCode,
	error,
) {
	var v *InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeFindUnique) Update(params ...AttendanceCodeSetParam) attendanceCodeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "AttendanceCode"

	var v attendanceCodeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceCodeUpdateUnique struct {
	query builder.Query
}

func (r attendanceCodeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeUpdateUnique) attendanceCodeModel() {}

func (r attendanceCodeUpdateUnique) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeUpdateUnique) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceCodeFindUnique) Delete() attendanceCodeDeleteUnique {
	var v attendanceCodeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "AttendanceCode"

	return v
}

type attendanceCodeDeleteUnique struct {
	query builder.Query
}

func (r attendanceCodeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceCodeDeleteUnique) attendanceCodeModel() {}

func (r attendanceCodeDeleteUnique) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeDeleteUnique) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceCodeFindFirst struct {
	query builder.Query
}

func (r attendanceCodeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeFindFirst) with()                   {}
func (r attendanceCodeFindFirst) attendanceCodeModel()    {}
func (r attendanceCodeFindFirst) attendanceCodeRelation() {}

func (r attendanceCodeActions) FindFirst(
	params ...AttendanceCodeWhereParam,
) attendanceCodeFindFirst {
	var v attendanceCodeFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "AttendanceCode"
	v.query.Outputs = attendanceCodeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r attendanceCodeFindFirst) With(params ...AttendanceCodeRelationWith) attendanceCodeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeFindFirst) Select(params ...attendanceCodePrismaFields) attendanceCodeFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeFindFirst) Omit(params ...attendanceCodePrismaFields) attendanceCodeFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeFindFirst) OrderBy(params ...AttendanceCodeOrderByParam) attendanceCodeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceCodeFindFirst) Skip(count int) attendanceCodeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceCodeFindFirst) Take(count int) attendanceCodeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceCodeFindFirst) Cursor(cursor AttendanceCodeCursorParam) attendanceCodeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceCodeFindFirst) Exec(ctx context.Context) (
	*AttendanceCodeModel,
	error,
) {
	var v *AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceCodeFindFirst) ExecInner(ctx context.Context) (
	*InnerAttendanceCode,
	error,
) {
	var v *InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type attendanceCodeFindMany struct {
	query builder.Query
}

func (r attendanceCodeFindMany) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeFindMany) with()                   {}
func (r attendanceCodeFindMany) attendanceCodeModel()    {}
func (r attendanceCodeFindMany) attendanceCodeRelation() {}

func (r attendanceCodeActions) FindMany(
	params ...AttendanceCodeWhereParam,
) attendanceCodeFindMany {
	var v attendanceCodeFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "AttendanceCode"
	v.query.Outputs = attendanceCodeOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r attendanceCodeFindMany) With(params ...AttendanceCodeRelationWith) attendanceCodeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceCodeFindMany) Select(params ...attendanceCodePrismaFields) attendanceCodeFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeFindMany) Omit(params ...attendanceCodePrismaFields) attendanceCodeFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceCodeOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceCodeFindMany) OrderBy(params ...AttendanceCodeOrderByParam) attendanceCodeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceCodeFindMany) Skip(count int) attendanceCodeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceCodeFindMany) Take(count int) attendanceCodeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceCodeFindMany) Cursor(cursor AttendanceCodeCursorParam) attendanceCodeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceCodeFindMany) Exec(ctx context.Context) (
	[]AttendanceCodeModel,
	error,
) {
	var v []AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceCodeFindMany) ExecInner(ctx context.Context) (
	[]InnerAttendanceCode,
	error,
) {
	var v []InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceCodeFindMany) Update(params ...AttendanceCodeSetParam) attendanceCodeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "AttendanceCode"

	r.query.Outputs = countOutput

	var v attendanceCodeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceCodeUpdateMany struct {
	query builder.Query
}

func (r attendanceCodeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeUpdateMany) attendanceCodeModel() {}

func (r attendanceCodeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeUpdateMany) Tx() AttendanceCodeManyTxResult {
	v := newAttendanceCodeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceCodeFindMany) Delete() attendanceCodeDeleteMany {
	var v attendanceCodeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "AttendanceCode"

	v.query.Outputs = countOutput

	return v
}

type attendanceCodeDeleteMany struct {
	query builder.Query
}

func (r attendanceCodeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceCodeDeleteMany) attendanceCodeModel() {}

func (r attendanceCodeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeDeleteMany) Tx() AttendanceCodeManyTxResult {
	v := newAttendanceCodeManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceToCodeFindUnique struct {
	query builder.Query
}

func (r attendanceToCodeFindUnique) getQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeFindUnique) with()               {}
func (r attendanceToCodeFindUnique) attendanceModel()    {}
func (r attendanceToCodeFindUnique) attendanceRelation() {}

func (r attendanceToCodeFindUnique) With(params ...AttendanceCodeRelationWith) attendanceToCodeFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceToCodeFindUnique) Select(params ...attendancePrismaFields) attendanceToCodeFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToCodeFindUnique) Omit(params ...attendancePrismaFields) attendanceToCodeFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToCodeFindUnique) Exec(ctx context.Context) (
	*AttendanceModel,
	error,
) {
	var v *AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceToCodeFindUnique) ExecInner(ctx context.Context) (
	*InnerAttendance,
	error,
) {
	var v *InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceToCodeFindUnique) Update(params ...AttendanceSetParam) attendanceToCodeUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Attendance"

	var v attendanceToCodeUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceToCodeUpdateUnique struct {
	query builder.Query
}

func (r attendanceToCodeUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeUpdateUnique) attendanceModel() {}

func (r attendanceToCodeUpdateUnique) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToCodeUpdateUnique) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceToCodeFindUnique) Delete() attendanceToCodeDeleteUnique {
	var v attendanceToCodeDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Attendance"

	return v
}

type attendanceToCodeDeleteUnique struct {
	query builder.Query
}

func (r attendanceToCodeDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceToCodeDeleteUnique) attendanceModel() {}

func (r attendanceToCodeDeleteUnique) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToCodeDeleteUnique) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceToCodeFindFirst struct {
	query builder.Query
}

func (r attendanceToCodeFindFirst) getQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeFindFirst) with()               {}
func (r attendanceToCodeFindFirst) attendanceModel()    {}
func (r attendanceToCodeFindFirst) attendanceRelation() {}

func (r attendanceToCodeFindFirst) With(params ...AttendanceCodeRelationWith) attendanceToCodeFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceToCodeFindFirst) Select(params ...attendancePrismaFields) attendanceToCodeFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToCodeFindFirst) Omit(params ...attendancePrismaFields) attendanceToCodeFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToCodeFindFirst) OrderBy(params ...AttendanceCodeOrderByParam) attendanceToCodeFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceToCodeFindFirst) Skip(count int) attendanceToCodeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceToCodeFindFirst) Take(count int) attendanceToCodeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceToCodeFindFirst) Cursor(cursor AttendanceCursorParam) attendanceToCodeFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceToCodeFindFirst) Exec(ctx context.Context) (
	*AttendanceModel,
	error,
) {
	var v *AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceToCodeFindFirst) ExecInner(ctx context.Context) (
	*InnerAttendance,
	error,
) {
	var v *InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type attendanceToCodeFindMany struct {
	query builder.Query
}

func (r attendanceToCodeFindMany) getQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeFindMany) with()               {}
func (r attendanceToCodeFindMany) attendanceModel()    {}
func (r attendanceToCodeFindMany) attendanceRelation() {}

func (r attendanceToCodeFindMany) With(params ...AttendanceCodeRelationWith) attendanceToCodeFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceToCodeFindMany) Select(params ...attendancePrismaFields) attendanceToCodeFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToCodeFindMany) Omit(params ...attendancePrismaFields) attendanceToCodeFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToCodeFindMany) OrderBy(params ...AttendanceCodeOrderByParam) attendanceToCodeFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceToCodeFindMany) Skip(count int) attendanceToCodeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceToCodeFindMany) Take(count int) attendanceToCodeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceToCodeFindMany) Cursor(cursor AttendanceCursorParam) attendanceToCodeFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceToCodeFindMany) Exec(ctx context.Context) (
	[]AttendanceModel,
	error,
) {
	var v []AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceToCodeFindMany) ExecInner(ctx context.Context) (
	[]InnerAttendance,
	error,
) {
	var v []InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceToCodeFindMany) Update(params ...AttendanceSetParam) attendanceToCodeUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Attendance"

	r.query.Outputs = countOutput

	var v attendanceToCodeUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceToCodeUpdateMany struct {
	query builder.Query
}

func (r attendanceToCodeUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToCodeUpdateMany) attendanceModel() {}

func (r attendanceToCodeUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToCodeUpdateMany) Tx() AttendanceManyTxResult {
	v := newAttendanceManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceToCodeFindMany) Delete() attendanceToCodeDeleteMany {
	var v attendanceToCodeDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Attendance"

	v.query.Outputs = countOutput

	return v
}

type attendanceToCodeDeleteMany struct {
	query builder.Query
}

func (r attendanceToCodeDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceToCodeDeleteMany) attendanceModel() {}

func (r attendanceToCodeDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToCodeDeleteMany) Tx() AttendanceManyTxResult {
	v := newAttendanceManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceToUserFindUnique struct {
	query builder.Query
}

func (r attendanceToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r attendanceToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToUserFindUnique) with()               {}
func (r attendanceToUserFindUnique) attendanceModel()    {}
func (r attendanceToUserFindUnique) attendanceRelation() {}

func (r attendanceToUserFindUnique) With(params ...UserRelationWith) attendanceToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceToUserFindUnique) Select(params ...attendancePrismaFields) attendanceToUserFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToUserFindUnique) Omit(params ...attendancePrismaFields) attendanceToUserFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToUserFindUnique) Exec(ctx context.Context) (
	*AttendanceModel,
	error,
) {
	var v *AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerAttendance,
	error,
) {
	var v *InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceToUserFindUnique) Update(params ...AttendanceSetParam) attendanceToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Attendance"

	var v attendanceToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceToUserUpdateUnique struct {
	query builder.Query
}

func (r attendanceToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToUserUpdateUnique) attendanceModel() {}

func (r attendanceToUserUpdateUnique) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToUserUpdateUnique) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceToUserFindUnique) Delete() attendanceToUserDeleteUnique {
	var v attendanceToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Attendance"

	return v
}

type attendanceToUserDeleteUnique struct {
	query builder.Query
}

func (r attendanceToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceToUserDeleteUnique) attendanceModel() {}

func (r attendanceToUserDeleteUnique) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToUserDeleteUnique) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceToUserFindFirst struct {
	query builder.Query
}

func (r attendanceToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r attendanceToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToUserFindFirst) with()               {}
func (r attendanceToUserFindFirst) attendanceModel()    {}
func (r attendanceToUserFindFirst) attendanceRelation() {}

func (r attendanceToUserFindFirst) With(params ...UserRelationWith) attendanceToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceToUserFindFirst) Select(params ...attendancePrismaFields) attendanceToUserFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToUserFindFirst) Omit(params ...attendancePrismaFields) attendanceToUserFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToUserFindFirst) OrderBy(params ...UserOrderByParam) attendanceToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceToUserFindFirst) Skip(count int) attendanceToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceToUserFindFirst) Take(count int) attendanceToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceToUserFindFirst) Cursor(cursor AttendanceCursorParam) attendanceToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceToUserFindFirst) Exec(ctx context.Context) (
	*AttendanceModel,
	error,
) {
	var v *AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerAttendance,
	error,
) {
	var v *InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type attendanceToUserFindMany struct {
	query builder.Query
}

func (r attendanceToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r attendanceToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToUserFindMany) with()               {}
func (r attendanceToUserFindMany) attendanceModel()    {}
func (r attendanceToUserFindMany) attendanceRelation() {}

func (r attendanceToUserFindMany) With(params ...UserRelationWith) attendanceToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceToUserFindMany) Select(params ...attendancePrismaFields) attendanceToUserFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToUserFindMany) Omit(params ...attendancePrismaFields) attendanceToUserFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceToUserFindMany) OrderBy(params ...UserOrderByParam) attendanceToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceToUserFindMany) Skip(count int) attendanceToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceToUserFindMany) Take(count int) attendanceToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceToUserFindMany) Cursor(cursor AttendanceCursorParam) attendanceToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceToUserFindMany) Exec(ctx context.Context) (
	[]AttendanceModel,
	error,
) {
	var v []AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerAttendance,
	error,
) {
	var v []InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceToUserFindMany) Update(params ...AttendanceSetParam) attendanceToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Attendance"

	r.query.Outputs = countOutput

	var v attendanceToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceToUserUpdateMany struct {
	query builder.Query
}

func (r attendanceToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceToUserUpdateMany) attendanceModel() {}

func (r attendanceToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToUserUpdateMany) Tx() AttendanceManyTxResult {
	v := newAttendanceManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceToUserFindMany) Delete() attendanceToUserDeleteMany {
	var v attendanceToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Attendance"

	v.query.Outputs = countOutput

	return v
}

type attendanceToUserDeleteMany struct {
	query builder.Query
}

func (r attendanceToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceToUserDeleteMany) attendanceModel() {}

func (r attendanceToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceToUserDeleteMany) Tx() AttendanceManyTxResult {
	v := newAttendanceManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceFindUnique struct {
	query builder.Query
}

func (r attendanceFindUnique) getQuery() builder.Query {
	return r.query
}

func (r attendanceFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceFindUnique) with()               {}
func (r attendanceFindUnique) attendanceModel()    {}
func (r attendanceFindUnique) attendanceRelation() {}

func (r attendanceActions) FindUnique(
	params AttendanceEqualsUniqueWhereParam,
) attendanceFindUnique {
	var v attendanceFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Attendance"
	v.query.Outputs = attendanceOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r attendanceFindUnique) With(params ...AttendanceRelationWith) attendanceFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceFindUnique) Select(params ...attendancePrismaFields) attendanceFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceFindUnique) Omit(params ...attendancePrismaFields) attendanceFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceFindUnique) Exec(ctx context.Context) (
	*AttendanceModel,
	error,
) {
	var v *AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceFindUnique) ExecInner(ctx context.Context) (
	*InnerAttendance,
	error,
) {
	var v *InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceFindUnique) Update(params ...AttendanceSetParam) attendanceUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Attendance"

	var v attendanceUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceUpdateUnique struct {
	query builder.Query
}

func (r attendanceUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceUpdateUnique) attendanceModel() {}

func (r attendanceUpdateUnique) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceUpdateUnique) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceFindUnique) Delete() attendanceDeleteUnique {
	var v attendanceDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Attendance"

	return v
}

type attendanceDeleteUnique struct {
	query builder.Query
}

func (r attendanceDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceDeleteUnique) attendanceModel() {}

func (r attendanceDeleteUnique) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceDeleteUnique) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceFindFirst struct {
	query builder.Query
}

func (r attendanceFindFirst) getQuery() builder.Query {
	return r.query
}

func (r attendanceFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceFindFirst) with()               {}
func (r attendanceFindFirst) attendanceModel()    {}
func (r attendanceFindFirst) attendanceRelation() {}

func (r attendanceActions) FindFirst(
	params ...AttendanceWhereParam,
) attendanceFindFirst {
	var v attendanceFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Attendance"
	v.query.Outputs = attendanceOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r attendanceFindFirst) With(params ...AttendanceRelationWith) attendanceFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceFindFirst) Select(params ...attendancePrismaFields) attendanceFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceFindFirst) Omit(params ...attendancePrismaFields) attendanceFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceFindFirst) OrderBy(params ...AttendanceOrderByParam) attendanceFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceFindFirst) Skip(count int) attendanceFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceFindFirst) Take(count int) attendanceFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceFindFirst) Cursor(cursor AttendanceCursorParam) attendanceFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceFindFirst) Exec(ctx context.Context) (
	*AttendanceModel,
	error,
) {
	var v *AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r attendanceFindFirst) ExecInner(ctx context.Context) (
	*InnerAttendance,
	error,
) {
	var v *InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type attendanceFindMany struct {
	query builder.Query
}

func (r attendanceFindMany) getQuery() builder.Query {
	return r.query
}

func (r attendanceFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceFindMany) with()               {}
func (r attendanceFindMany) attendanceModel()    {}
func (r attendanceFindMany) attendanceRelation() {}

func (r attendanceActions) FindMany(
	params ...AttendanceWhereParam,
) attendanceFindMany {
	var v attendanceFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Attendance"
	v.query.Outputs = attendanceOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r attendanceFindMany) With(params ...AttendanceRelationWith) attendanceFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r attendanceFindMany) Select(params ...attendancePrismaFields) attendanceFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceFindMany) Omit(params ...attendancePrismaFields) attendanceFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range attendanceOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r attendanceFindMany) OrderBy(params ...AttendanceOrderByParam) attendanceFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r attendanceFindMany) Skip(count int) attendanceFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r attendanceFindMany) Take(count int) attendanceFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r attendanceFindMany) Cursor(cursor AttendanceCursorParam) attendanceFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r attendanceFindMany) Exec(ctx context.Context) (
	[]AttendanceModel,
	error,
) {
	var v []AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceFindMany) ExecInner(ctx context.Context) (
	[]InnerAttendance,
	error,
) {
	var v []InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r attendanceFindMany) Update(params ...AttendanceSetParam) attendanceUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Attendance"

	r.query.Outputs = countOutput

	var v attendanceUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type attendanceUpdateMany struct {
	query builder.Query
}

func (r attendanceUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceUpdateMany) attendanceModel() {}

func (r attendanceUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceUpdateMany) Tx() AttendanceManyTxResult {
	v := newAttendanceManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r attendanceFindMany) Delete() attendanceDeleteMany {
	var v attendanceDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Attendance"

	v.query.Outputs = countOutput

	return v
}

type attendanceDeleteMany struct {
	query builder.Query
}

func (r attendanceDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p attendanceDeleteMany) attendanceModel() {}

func (r attendanceDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceDeleteMany) Tx() AttendanceManyTxResult {
	v := newAttendanceManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newUserUniqueTxResult() UserUniqueTxResult {
	return UserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserUniqueTxResult) IsTx() {}

func (r UserUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserManyTxResult() UserManyTxResult {
	return UserManyTxResult{
		result: &transaction.Result{},
	}
}

type UserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserManyTxResult) IsTx() {}

func (r UserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newGroupUniqueTxResult() GroupUniqueTxResult {
	return GroupUniqueTxResult{
		result: &transaction.Result{},
	}
}

type GroupUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p GroupUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p GroupUniqueTxResult) IsTx() {}

func (r GroupUniqueTxResult) Result() (v *GroupModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newGroupManyTxResult() GroupManyTxResult {
	return GroupManyTxResult{
		result: &transaction.Result{},
	}
}

type GroupManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p GroupManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p GroupManyTxResult) IsTx() {}

func (r GroupManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPracticumUniqueTxResult() PracticumUniqueTxResult {
	return PracticumUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PracticumUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PracticumUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PracticumUniqueTxResult) IsTx() {}

func (r PracticumUniqueTxResult) Result() (v *PracticumModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPracticumManyTxResult() PracticumManyTxResult {
	return PracticumManyTxResult{
		result: &transaction.Result{},
	}
}

type PracticumManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PracticumManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PracticumManyTxResult) IsTx() {}

func (r PracticumManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newScheduleUniqueTxResult() ScheduleUniqueTxResult {
	return ScheduleUniqueTxResult{
		result: &transaction.Result{},
	}
}

type ScheduleUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p ScheduleUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p ScheduleUniqueTxResult) IsTx() {}

func (r ScheduleUniqueTxResult) Result() (v *ScheduleModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newScheduleManyTxResult() ScheduleManyTxResult {
	return ScheduleManyTxResult{
		result: &transaction.Result{},
	}
}

type ScheduleManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p ScheduleManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p ScheduleManyTxResult) IsTx() {}

func (r ScheduleManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newGradeUniqueTxResult() GradeUniqueTxResult {
	return GradeUniqueTxResult{
		result: &transaction.Result{},
	}
}

type GradeUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p GradeUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p GradeUniqueTxResult) IsTx() {}

func (r GradeUniqueTxResult) Result() (v *GradeModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newGradeManyTxResult() GradeManyTxResult {
	return GradeManyTxResult{
		result: &transaction.Result{},
	}
}

type GradeManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p GradeManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p GradeManyTxResult) IsTx() {}

func (r GradeManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newAnnouncementUniqueTxResult() AnnouncementUniqueTxResult {
	return AnnouncementUniqueTxResult{
		result: &transaction.Result{},
	}
}

type AnnouncementUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p AnnouncementUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p AnnouncementUniqueTxResult) IsTx() {}

func (r AnnouncementUniqueTxResult) Result() (v *AnnouncementModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newAnnouncementManyTxResult() AnnouncementManyTxResult {
	return AnnouncementManyTxResult{
		result: &transaction.Result{},
	}
}

type AnnouncementManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p AnnouncementManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p AnnouncementManyTxResult) IsTx() {}

func (r AnnouncementManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newAttendanceCodeUniqueTxResult() AttendanceCodeUniqueTxResult {
	return AttendanceCodeUniqueTxResult{
		result: &transaction.Result{},
	}
}

type AttendanceCodeUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p AttendanceCodeUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p AttendanceCodeUniqueTxResult) IsTx() {}

func (r AttendanceCodeUniqueTxResult) Result() (v *AttendanceCodeModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newAttendanceCodeManyTxResult() AttendanceCodeManyTxResult {
	return AttendanceCodeManyTxResult{
		result: &transaction.Result{},
	}
}

type AttendanceCodeManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p AttendanceCodeManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p AttendanceCodeManyTxResult) IsTx() {}

func (r AttendanceCodeManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newAttendanceUniqueTxResult() AttendanceUniqueTxResult {
	return AttendanceUniqueTxResult{
		result: &transaction.Result{},
	}
}

type AttendanceUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p AttendanceUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p AttendanceUniqueTxResult) IsTx() {}

func (r AttendanceUniqueTxResult) Result() (v *AttendanceModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newAttendanceManyTxResult() AttendanceManyTxResult {
	return AttendanceManyTxResult{
		result: &transaction.Result{},
	}
}

type AttendanceManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p AttendanceManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p AttendanceManyTxResult) IsTx() {}

func (r AttendanceManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_nrp UserWithPrismaNrpSetParam,
	_name UserWithPrismaNameSetParam,
	_about UserWithPrismaAboutSetParam,
	_email UserWithPrismaEmailSetParam,
	_phone UserWithPrismaPhoneSetParam,
	_password UserWithPrismaPasswordSetParam,
	_role UserWithPrismaRoleSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _nrp.field())
	fields = append(fields, _name.field())
	fields = append(fields, _about.field())
	fields = append(fields, _email.field())
	fields = append(fields, _phone.field())
	fields = append(fields, _password.field())
	fields = append(fields, _role.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type groupUpsertOne struct {
	query builder.Query
}

func (r groupUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r groupUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r groupUpsertOne) with()          {}
func (r groupUpsertOne) groupModel()    {}
func (r groupUpsertOne) groupRelation() {}

func (r groupActions) UpsertOne(
	params GroupEqualsUniqueWhereParam,
) groupUpsertOne {
	var v groupUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Group"
	v.query.Outputs = groupOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r groupUpsertOne) Create(

	_name GroupWithPrismaNameSetParam,

	optional ...GroupSetParam,
) groupUpsertOne {
	var v groupUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r groupUpsertOne) Update(
	params ...GroupSetParam,
) groupUpsertOne {
	var v groupUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r groupUpsertOne) Exec(ctx context.Context) (*GroupModel, error) {
	var v GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r groupUpsertOne) Tx() GroupUniqueTxResult {
	v := newGroupUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type practicumUpsertOne struct {
	query builder.Query
}

func (r practicumUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r practicumUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumUpsertOne) with()              {}
func (r practicumUpsertOne) practicumModel()    {}
func (r practicumUpsertOne) practicumRelation() {}

func (r practicumActions) UpsertOne(
	params PracticumEqualsUniqueWhereParam,
) practicumUpsertOne {
	var v practicumUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Practicum"
	v.query.Outputs = practicumOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r practicumUpsertOne) Create(

	_title PracticumWithPrismaTitleSetParam,

	optional ...PracticumSetParam,
) practicumUpsertOne {
	var v practicumUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _title.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r practicumUpsertOne) Update(
	params ...PracticumSetParam,
) practicumUpsertOne {
	var v practicumUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r practicumUpsertOne) Exec(ctx context.Context) (*PracticumModel, error) {
	var v PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r practicumUpsertOne) Tx() PracticumUniqueTxResult {
	v := newPracticumUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type scheduleUpsertOne struct {
	query builder.Query
}

func (r scheduleUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r scheduleUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleUpsertOne) with()             {}
func (r scheduleUpsertOne) scheduleModel()    {}
func (r scheduleUpsertOne) scheduleRelation() {}

func (r scheduleActions) UpsertOne(
	params ScheduleEqualsUniqueWhereParam,
) scheduleUpsertOne {
	var v scheduleUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Schedule"
	v.query.Outputs = scheduleOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r scheduleUpsertOne) Create(

	_practicum ScheduleWithPrismaPracticumSetParam,
	_group ScheduleWithPrismaGroupSetParam,
	_assistant ScheduleWithPrismaAssistantSetParam,

	optional ...ScheduleSetParam,
) scheduleUpsertOne {
	var v scheduleUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _practicum.field())
	fields = append(fields, _group.field())
	fields = append(fields, _assistant.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r scheduleUpsertOne) Update(
	params ...ScheduleSetParam,
) scheduleUpsertOne {
	var v scheduleUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r scheduleUpsertOne) Exec(ctx context.Context) (*ScheduleModel, error) {
	var v ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r scheduleUpsertOne) Tx() ScheduleUniqueTxResult {
	v := newScheduleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type gradeUpsertOne struct {
	query builder.Query
}

func (r gradeUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r gradeUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeUpsertOne) with()          {}
func (r gradeUpsertOne) gradeModel()    {}
func (r gradeUpsertOne) gradeRelation() {}

func (r gradeActions) UpsertOne(
	params GradeEqualsUniqueWhereParam,
) gradeUpsertOne {
	var v gradeUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Grade"
	v.query.Outputs = gradeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r gradeUpsertOne) Create(

	_schedule GradeWithPrismaScheduleSetParam,
	_user GradeWithPrismaUserSetParam,
	_grader GradeWithPrismaGraderSetParam,

	optional ...GradeSetParam,
) gradeUpsertOne {
	var v gradeUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _schedule.field())
	fields = append(fields, _user.field())
	fields = append(fields, _grader.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r gradeUpsertOne) Update(
	params ...GradeSetParam,
) gradeUpsertOne {
	var v gradeUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r gradeUpsertOne) Exec(ctx context.Context) (*GradeModel, error) {
	var v GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r gradeUpsertOne) Tx() GradeUniqueTxResult {
	v := newGradeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type announcementUpsertOne struct {
	query builder.Query
}

func (r announcementUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r announcementUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementUpsertOne) with()                 {}
func (r announcementUpsertOne) announcementModel()    {}
func (r announcementUpsertOne) announcementRelation() {}

func (r announcementActions) UpsertOne(
	params AnnouncementEqualsUniqueWhereParam,
) announcementUpsertOne {
	var v announcementUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Announcement"
	v.query.Outputs = announcementOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r announcementUpsertOne) Create(

	_title AnnouncementWithPrismaTitleSetParam,
	_content AnnouncementWithPrismaContentSetParam,
	_author AnnouncementWithPrismaAuthorSetParam,

	optional ...AnnouncementSetParam,
) announcementUpsertOne {
	var v announcementUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _title.field())
	fields = append(fields, _content.field())
	fields = append(fields, _author.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r announcementUpsertOne) Update(
	params ...AnnouncementSetParam,
) announcementUpsertOne {
	var v announcementUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r announcementUpsertOne) Exec(ctx context.Context) (*AnnouncementModel, error) {
	var v AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r announcementUpsertOne) Tx() AnnouncementUniqueTxResult {
	v := newAnnouncementUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceCodeUpsertOne struct {
	query builder.Query
}

func (r attendanceCodeUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeUpsertOne) with()                   {}
func (r attendanceCodeUpsertOne) attendanceCodeModel()    {}
func (r attendanceCodeUpsertOne) attendanceCodeRelation() {}

func (r attendanceCodeActions) UpsertOne(
	params AttendanceCodeEqualsUniqueWhereParam,
) attendanceCodeUpsertOne {
	var v attendanceCodeUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "AttendanceCode"
	v.query.Outputs = attendanceCodeOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r attendanceCodeUpsertOne) Create(

	_code AttendanceCodeWithPrismaCodeSetParam,
	_expiredAt AttendanceCodeWithPrismaExpiredAtSetParam,
	_schedule AttendanceCodeWithPrismaScheduleSetParam,

	optional ...AttendanceCodeSetParam,
) attendanceCodeUpsertOne {
	var v attendanceCodeUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _code.field())
	fields = append(fields, _expiredAt.field())
	fields = append(fields, _schedule.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r attendanceCodeUpsertOne) Update(
	params ...AttendanceCodeSetParam,
) attendanceCodeUpsertOne {
	var v attendanceCodeUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r attendanceCodeUpsertOne) Exec(ctx context.Context) (*AttendanceCodeModel, error) {
	var v AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceCodeUpsertOne) Tx() AttendanceCodeUniqueTxResult {
	v := newAttendanceCodeUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type attendanceUpsertOne struct {
	query builder.Query
}

func (r attendanceUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r attendanceUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceUpsertOne) with()               {}
func (r attendanceUpsertOne) attendanceModel()    {}
func (r attendanceUpsertOne) attendanceRelation() {}

func (r attendanceActions) UpsertOne(
	params AttendanceEqualsUniqueWhereParam,
) attendanceUpsertOne {
	var v attendanceUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Attendance"
	v.query.Outputs = attendanceOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r attendanceUpsertOne) Create(

	_code AttendanceWithPrismaCodeSetParam,
	_user AttendanceWithPrismaUserSetParam,

	optional ...AttendanceSetParam,
) attendanceUpsertOne {
	var v attendanceUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _code.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r attendanceUpsertOne) Update(
	params ...AttendanceSetParam,
) attendanceUpsertOne {
	var v attendanceUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r attendanceUpsertOne) Exec(ctx context.Context) (*AttendanceModel, error) {
	var v AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r attendanceUpsertOne) Tx() AttendanceUniqueTxResult {
	v := newAttendanceUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template raw.gotpl ---

type userAggregateRaw struct {
	query builder.Query
}

func (r userAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r userAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r userAggregateRaw) with()         {}
func (r userAggregateRaw) userModel()    {}
func (r userAggregateRaw) userRelation() {}

func (r userActions) FindRaw(filter interface{}, options ...interface{}) userAggregateRaw {
	var v userAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "User"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r userActions) AggregateRaw(pipeline []interface{}, options ...interface{}) userAggregateRaw {
	var v userAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "User"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r userAggregateRaw) Exec(ctx context.Context) ([]UserModel, error) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r userAggregateRaw) ExecInner(ctx context.Context) ([]InnerUser, error) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

type groupAggregateRaw struct {
	query builder.Query
}

func (r groupAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r groupAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r groupAggregateRaw) with()          {}
func (r groupAggregateRaw) groupModel()    {}
func (r groupAggregateRaw) groupRelation() {}

func (r groupActions) FindRaw(filter interface{}, options ...interface{}) groupAggregateRaw {
	var v groupAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "Group"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r groupActions) AggregateRaw(pipeline []interface{}, options ...interface{}) groupAggregateRaw {
	var v groupAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "Group"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r groupAggregateRaw) Exec(ctx context.Context) ([]GroupModel, error) {
	var v []GroupModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r groupAggregateRaw) ExecInner(ctx context.Context) ([]InnerGroup, error) {
	var v []InnerGroup
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

type practicumAggregateRaw struct {
	query builder.Query
}

func (r practicumAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r practicumAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r practicumAggregateRaw) with()              {}
func (r practicumAggregateRaw) practicumModel()    {}
func (r practicumAggregateRaw) practicumRelation() {}

func (r practicumActions) FindRaw(filter interface{}, options ...interface{}) practicumAggregateRaw {
	var v practicumAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "Practicum"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r practicumActions) AggregateRaw(pipeline []interface{}, options ...interface{}) practicumAggregateRaw {
	var v practicumAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "Practicum"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r practicumAggregateRaw) Exec(ctx context.Context) ([]PracticumModel, error) {
	var v []PracticumModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r practicumAggregateRaw) ExecInner(ctx context.Context) ([]InnerPracticum, error) {
	var v []InnerPracticum
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

type scheduleAggregateRaw struct {
	query builder.Query
}

func (r scheduleAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r scheduleAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r scheduleAggregateRaw) with()             {}
func (r scheduleAggregateRaw) scheduleModel()    {}
func (r scheduleAggregateRaw) scheduleRelation() {}

func (r scheduleActions) FindRaw(filter interface{}, options ...interface{}) scheduleAggregateRaw {
	var v scheduleAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "Schedule"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r scheduleActions) AggregateRaw(pipeline []interface{}, options ...interface{}) scheduleAggregateRaw {
	var v scheduleAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "Schedule"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r scheduleAggregateRaw) Exec(ctx context.Context) ([]ScheduleModel, error) {
	var v []ScheduleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r scheduleAggregateRaw) ExecInner(ctx context.Context) ([]InnerSchedule, error) {
	var v []InnerSchedule
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

type gradeAggregateRaw struct {
	query builder.Query
}

func (r gradeAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r gradeAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r gradeAggregateRaw) with()          {}
func (r gradeAggregateRaw) gradeModel()    {}
func (r gradeAggregateRaw) gradeRelation() {}

func (r gradeActions) FindRaw(filter interface{}, options ...interface{}) gradeAggregateRaw {
	var v gradeAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "Grade"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r gradeActions) AggregateRaw(pipeline []interface{}, options ...interface{}) gradeAggregateRaw {
	var v gradeAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "Grade"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r gradeAggregateRaw) Exec(ctx context.Context) ([]GradeModel, error) {
	var v []GradeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r gradeAggregateRaw) ExecInner(ctx context.Context) ([]InnerGrade, error) {
	var v []InnerGrade
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

type announcementAggregateRaw struct {
	query builder.Query
}

func (r announcementAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r announcementAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r announcementAggregateRaw) with()                 {}
func (r announcementAggregateRaw) announcementModel()    {}
func (r announcementAggregateRaw) announcementRelation() {}

func (r announcementActions) FindRaw(filter interface{}, options ...interface{}) announcementAggregateRaw {
	var v announcementAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "Announcement"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r announcementActions) AggregateRaw(pipeline []interface{}, options ...interface{}) announcementAggregateRaw {
	var v announcementAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "Announcement"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r announcementAggregateRaw) Exec(ctx context.Context) ([]AnnouncementModel, error) {
	var v []AnnouncementModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r announcementAggregateRaw) ExecInner(ctx context.Context) ([]InnerAnnouncement, error) {
	var v []InnerAnnouncement
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

type attendanceCodeAggregateRaw struct {
	query builder.Query
}

func (r attendanceCodeAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r attendanceCodeAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceCodeAggregateRaw) with()                   {}
func (r attendanceCodeAggregateRaw) attendanceCodeModel()    {}
func (r attendanceCodeAggregateRaw) attendanceCodeRelation() {}

func (r attendanceCodeActions) FindRaw(filter interface{}, options ...interface{}) attendanceCodeAggregateRaw {
	var v attendanceCodeAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "AttendanceCode"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r attendanceCodeActions) AggregateRaw(pipeline []interface{}, options ...interface{}) attendanceCodeAggregateRaw {
	var v attendanceCodeAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "AttendanceCode"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r attendanceCodeAggregateRaw) Exec(ctx context.Context) ([]AttendanceCodeModel, error) {
	var v []AttendanceCodeModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r attendanceCodeAggregateRaw) ExecInner(ctx context.Context) ([]InnerAttendanceCode, error) {
	var v []InnerAttendanceCode
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

type attendanceAggregateRaw struct {
	query builder.Query
}

func (r attendanceAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r attendanceAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r attendanceAggregateRaw) with()               {}
func (r attendanceAggregateRaw) attendanceModel()    {}
func (r attendanceAggregateRaw) attendanceRelation() {}

func (r attendanceActions) FindRaw(filter interface{}, options ...interface{}) attendanceAggregateRaw {
	var v attendanceAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "Attendance"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r attendanceActions) AggregateRaw(pipeline []interface{}, options ...interface{}) attendanceAggregateRaw {
	var v attendanceAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "Attendance"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r attendanceAggregateRaw) Exec(ctx context.Context) ([]AttendanceModel, error) {
	var v []AttendanceModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r attendanceAggregateRaw) ExecInner(ctx context.Context) ([]InnerAttendance, error) {
	var v []InnerAttendance
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}
